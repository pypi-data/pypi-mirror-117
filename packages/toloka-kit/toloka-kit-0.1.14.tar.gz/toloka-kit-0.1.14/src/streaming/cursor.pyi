__all__ = [
    'AssignmentCursor',
    'BaseCursor',
    'DATETIME_MIN',
    'TaskCursor',
    'TolokaClientSyncOrAsyncType',
    'UserBonusCursor',
    'UserSkillCursor',
]
import toloka.client
import typing


TolokaClientSyncOrAsyncType = typing.Union[toloka.client.TolokaClient, ...]

DATETIME_MIN = ...

class BaseCursor:
    def __init__(
        self,
        toloka_client: typing.Union[toloka.client.TolokaClient, ...],
        request: typing.TypeVar('RequestObjectType', bound=None)
    ) -> None:
        """Method generated by attrs for class BaseCursor.
        """
        ...

    toloka_client: typing.Union[toloka.client.TolokaClient, ...]
    _request: typing.TypeVar('RequestObjectType', bound=None)
    _prev_response: typing.Optional[typing.TypeVar('ResponseObjectType', bound=None)]


@typing.overload
def AssignmentCursor(
    toloka_client: typing.Union[toloka.client.TolokaClient, ...],
    event_type: typing.Any,
    request: dict = ...
) -> None:
    """Iterator over Assignment objects of seleted AssignmentEventType.

    Args:
        toloka_client: TolokaClient object that is being used to search assignments.
        request: Base request to search assignments by.
        event_type: Assignments event's type to search.

    Examples:
        Iterate over assignment acceptances events.

        >>> it = AssignmentCursor(pool_id='123', event_type='ACCEPTED', toloka_client=toloka_client)
        >>> current_events = list(it)
        >>> # ... new events may occur ...
        >>> new_events = list(it)  # Contains only new events, occured since the previous call.
        ...
    """
    ...

@typing.overload
def AssignmentCursor(
    toloka_client: typing.Union[toloka.client.TolokaClient, ...],
    event_type: typing.Any,
    *args,
    **kwargs
) -> None:
    """Iterator over Assignment objects of seleted AssignmentEventType.

    Args:
        toloka_client: TolokaClient object that is being used to search assignments.
        request: Base request to search assignments by.
        event_type: Assignments event's type to search.

    Examples:
        Iterate over assignment acceptances events.

        >>> it = AssignmentCursor(pool_id='123', event_type='ACCEPTED', toloka_client=toloka_client)
        >>> current_events = list(it)
        >>> # ... new events may occur ...
        >>> new_events = list(it)  # Contains only new events, occured since the previous call.
        ...
    """
    ...


@typing.overload
def TaskCursor(toloka_client: typing.Union[toloka.client.TolokaClient, ...], request: dict = ...) -> None:
    """Iterator over tasks by create time.

    Args:
        toloka_client: TolokaClient object that is being used to search tasks.
        request: Base request to search tasks by.

    Examples:
        Iterate over tasks.

        >>> it = TaskCursor(pool_id='123', toloka_client=toloka_client)
        >>> current_tasks = list(it)
        >>> # ... new tasks could appear ...
        >>> new_tasks = list(it)  # Contains only new tasks, appeared since the previous call.
        ...
    """
    ...

@typing.overload
def TaskCursor(
    toloka_client: typing.Union[toloka.client.TolokaClient, ...],
    *args,
    **kwargs
) -> None:
    """Iterator over tasks by create time.

    Args:
        toloka_client: TolokaClient object that is being used to search tasks.
        request: Base request to search tasks by.

    Examples:
        Iterate over tasks.

        >>> it = TaskCursor(pool_id='123', toloka_client=toloka_client)
        >>> current_tasks = list(it)
        >>> # ... new tasks could appear ...
        >>> new_tasks = list(it)  # Contains only new tasks, appeared since the previous call.
        ...
    """
    ...


@typing.overload
def UserBonusCursor(toloka_client: typing.Union[toloka.client.TolokaClient, ...], request: dict = ...) -> None:
    """Iterator over user bonuses by create time.

    Args:
        toloka_client: TolokaClient object that is being used to search user bonuses.
        request: Base request to search user bonuses by.

    Examples:
        Iterate over user bonuses.

        >>> it = UserBonusCursortoloka_client=toloka_client)
        >>> current_bonuses = list(it)
        >>> # ... new user bonuses could appear ...
        >>> new_bonuses = list(it)  # Contains only new user bonuses, appeared since the previous call.
        ...
    """
    ...

@typing.overload
def UserBonusCursor(
    toloka_client: typing.Union[toloka.client.TolokaClient, ...],
    *args,
    **kwargs
) -> None:
    """Iterator over user bonuses by create time.

    Args:
        toloka_client: TolokaClient object that is being used to search user bonuses.
        request: Base request to search user bonuses by.

    Examples:
        Iterate over user bonuses.

        >>> it = UserBonusCursortoloka_client=toloka_client)
        >>> current_bonuses = list(it)
        >>> # ... new user bonuses could appear ...
        >>> new_bonuses = list(it)  # Contains only new user bonuses, appeared since the previous call.
        ...
    """
    ...


@typing.overload
def UserSkillCursor(
    toloka_client: typing.Union[toloka.client.TolokaClient, ...],
    event_type: typing.Any,
    request: dict = ...
) -> None:
    """Iterator over UserSkillEvent objects of seleted event_type.

    Args:
        toloka_client: TolokaClient object that is being used to search user skills.
        request: Base request to search user skills by.
        event_type: User skill event's type to search.

    Examples:
        Iterate over user skills acceptances events.

        >>> it = UserSkillCursorevent_type='MODIFIED', toloka_client=toloka_client)
        >>> current_events = list(it)
        >>> # ... new user skills could be set ...
        >>> new_events = list(it)  # Contains only new events, occured since the previous call.
        ...
    """
    ...

@typing.overload
def UserSkillCursor(
    toloka_client: typing.Union[toloka.client.TolokaClient, ...],
    event_type: typing.Any,
    *args,
    **kwargs
) -> None:
    """Iterator over UserSkillEvent objects of seleted event_type.

    Args:
        toloka_client: TolokaClient object that is being used to search user skills.
        request: Base request to search user skills by.
        event_type: User skill event's type to search.

    Examples:
        Iterate over user skills acceptances events.

        >>> it = UserSkillCursorevent_type='MODIFIED', toloka_client=toloka_client)
        >>> current_events = list(it)
        >>> # ... new user skills could be set ...
        >>> new_events = list(it)  # Contains only new events, occured since the previous call.
        ...
    """
    ...
