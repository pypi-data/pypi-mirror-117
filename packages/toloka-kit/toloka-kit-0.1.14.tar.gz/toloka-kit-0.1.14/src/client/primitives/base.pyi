__all__ = [
    'VariantRegistry',
    'attribute',
    'BaseTolokaObjectMetaclass',
    'BaseTolokaObject',
]
import attr._make
import enum
import typing

E = typing.TypeVar('E', bound=enum.Enum)

class VariantRegistry:
    def __init__(
        self,
        field: str,
        enum: typing.Type[E]
    ): ...

    def register(
        self,
        type_: type,
        value: E
    ) -> type: ...


def attribute(
    *args,
    required: bool = False,
    origin: typing.Optional[str] = None,
    readonly: bool = False,
    **kwargs
):
    """Proxy for attr.attrib(...). Adds several keywords.

    Args:
        *args: All positional arguments from attr.attrib
        required: If True makes attribute not Optional. All other attributes are optional by default. Defaults to False.
        origin: Sets field name in dict for attribute, when structuring/unstructuring from dict. Defaults to None.
        readonly: Affects only when the class 'expanding' as a parameter in some function. If True, drops this attribute from expanded parameters. Defaults to None.
        **kwargs: All keyword arguments from attr.attrib
    """
    ...


class BaseTolokaObjectMetaclass(type):
    @staticmethod
    def transformer(type_: type, fields: typing.List[attr._make.Attribute]) -> typing.List[attr._make.Attribute]: ...


class BaseTolokaObject:
    """A base class for classes representing Toloka objects.



    Subclasses of BaseTolokaObject will:
    * Automatically convert annotated attributes attributes via attrs making them optional
      if not explicitly configured otherwise
    * Skip missing optional fields during unstructuring with client's cattr converter
    """

    @classmethod
    def is_variant_base(cls) -> bool: ...

    @classmethod
    def is_variant_incomplete(cls) -> bool: ...

    @classmethod
    def is_variant_spec(cls) -> bool: ...

    @classmethod
    def get_variant_specs(cls) -> dict: ...

    @classmethod
    def get_spec_subclass_for_value(cls, spec_value: typing.Union[str, E] = None) -> type: ...

    def unstructure(self) -> typing.Optional[dict]: ...

    @classmethod
    def structure(cls, data: dict): ...

    def __init__(self) -> None:
        """Method generated by attrs for class BaseTolokaObject.
        """
        ...

    _unexpected: typing.Optional[typing.Dict[str, typing.Any]]
