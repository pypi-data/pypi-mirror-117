/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpaper_admin"] = self["webpackChunkpaper_admin"] || []).push([["changelist"],{

/***/ 1016:
/*!*******************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-actions/paper-actions.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _paper_actions_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paper-actions.scss */ 5121);\n/*global gettext, interpolate, ngettext*/\n\nconst TOGGLE_ALL_ID = \"action-toggle\";\nconst CHECKBOX_CLASS = \"action-select\";\nconst CHECKBOX_LABEL_SELECTOR = \".action-checkbox .custom-control\";\nconst COUNTER_CLASS = \"paper-actions__counter\";\nconst QUESTION_CLASS = \"paper-actions__question\";\nconst ALL_CLASS = \"paper-actions__all\";\nconst ACROSS_CLASS = \"paper-actions__select-across\";\nconst CLEAR_CLASS = \"paper-actions__clear\";\n\nfunction initActions(inputs) {\n  let lastChecked = null;\n  const table = document.getElementById(\"result_list\");\n  const allToggleInput = document.getElementById(TOGGLE_ALL_ID); // клик на чекбокс \"выбрать все\"\n\n  allToggleInput.addEventListener(\"change\", function () {\n    const rows = inputs.map(input => input.closest(\"tr\"));\n    toggleRows(rows, this.checked);\n    updateCounter(inputs);\n  }); // пользовательское событие выделения ряда таблицы\n\n  table.addEventListener(\"select\", function (event) {\n    const target = event.target;\n\n    if (target.tagName !== \"TR\" || target.closest(\"table\") !== table) {\n      return;\n    }\n\n    const state = Boolean(event.detail.state);\n    const checkbox = target.querySelector(`.${CHECKBOX_CLASS}`);\n    checkbox.checked = state;\n    target.classList.toggle(\"selected\", state); // все ли чекбоксы выделены\n\n    allToggleInput.checked = inputs.find(input => !input.checked) == null;\n  });\n  table.addEventListener(\"click\", function (event) {\n    const target = event.target; // клик вне строк таблицы\n\n    const row = target.closest(\"tr\");\n\n    if (!row) {\n      return;\n    }\n\n    const checkbox_clicked = target.closest(CHECKBOX_LABEL_SELECTOR);\n    const checkbox = row.querySelector(`.${CHECKBOX_CLASS}`);\n\n    if (event.shiftKey && lastChecked) {\n      // массовое выделение (через Shift)\n      const lastIndex = inputs.indexOf(lastChecked);\n      const targetIndex = inputs.indexOf(checkbox);\n      const startIndex = Math.min(lastIndex, targetIndex);\n      const endIndex = Math.max(lastIndex, targetIndex);\n      const input_slice = inputs.slice(startIndex, endIndex + 1);\n      const rows = input_slice.map(input => input.closest(\"tr\"));\n      toggleRows(rows, lastChecked.checked);\n    } else if (checkbox_clicked || event.ctrlKey && !event.shiftKey) {\n      // клик на чекбокс или на строку через Ctrl\n      lastChecked = checkbox;\n      toggleRows([row], !checkbox.checked);\n    }\n\n    updateCounter(inputs);\n  }); // отмена выделения текста при клике с удержанным Shift\n\n  table.addEventListener(\"mousedown\", function (event) {\n    const target = event.target;\n\n    if (event.shiftKey && (target.tagName === \"TD\" || target.tagName === \"TH\")) {\n      event.preventDefault();\n    }\n  }); // выбор всех записей таблицы\n\n  document.addEventListener(\"click\", function (event) {\n    const target = event.target;\n\n    if (target.tagName === \"A\" && target.closest(`.${QUESTION_CLASS}`)) {\n      event.preventDefault();\n      selectAcross();\n    }\n  }); // очистка выбора\n\n  document.addEventListener(\"click\", function (event) {\n    const target = event.target;\n\n    if (target.tagName === \"A\" && target.closest(`.${CLEAR_CLASS}`)) {\n      event.preventDefault();\n      allToggleInput.checked = false;\n      const rows = inputs.map(input => input.closest(\"tr\"));\n      toggleRows(rows, false);\n      clearAcross(inputs);\n      updateCounter(inputs);\n    }\n  });\n  protectEditForm();\n}\n/**\n * Требование подтверждения выполнения действия, если в форме были изменения.\n */\n\n\nfunction protectEditForm() {\n  let list_editable_changed = false;\n  const form = document.getElementById(\"changelist-form\");\n  form.addEventListener(\"change\", function (event) {\n    const target = event.target;\n\n    if (target.tagName === \"INPUT\") {\n      if (target.closest(`.${CHECKBOX_CLASS}`) || target.id === TOGGLE_ALL_ID) {// nothing\n      } else {\n        list_editable_changed = true;\n      }\n    } else if (target.tagName === \"SELECT\") {\n      if (target.closest(\".action-action\")) {// nothing\n      } else {\n        list_editable_changed = true;\n      }\n    } else {\n      list_editable_changed = true;\n    }\n  });\n  document.addEventListener(\"click\", function (event) {\n    const target = event.target;\n    const action_button = target.closest(\"[name=\\\"index\\\"]\");\n\n    if (action_button && list_editable_changed) {\n      const agree = confirm(gettext(\"You have unsaved changes on individual editable fields. If you run an action, your unsaved changes will be lost.\"));\n\n      if (!agree) {\n        event.preventDefault();\n      }\n    }\n  });\n  document.addEventListener(\"click\", function (event) {\n    const target = event.target;\n    const save_button = target.closest(\"[name=\\\"_save\\\"]\");\n    const action_selects = document.querySelectorAll(\".actions select[name=\\\"action\\\"]\");\n    const action_changed = !Array.prototype.every.call(action_selects, function (select) {\n      return !select.value;\n    });\n\n    if (save_button && action_changed) {\n      let apply;\n\n      if (list_editable_changed) {\n        apply = confirm(gettext(\"You have selected an action, but you haven't saved your changes to individual fields yet. Please click OK to save. You'll need to re-run the action.\"));\n      } else {\n        apply = confirm(gettext(\"You have selected an action, and you haven't made any changes on individual fields. You're probably looking for the Go button rather than the Save button.\"));\n      }\n\n      if (!apply) {\n        event.preventDefault();\n      }\n    }\n  });\n}\n/**\n * Установка/сброс галочки в чекбоксах.\n * @param {HTMLTableRowElement[]} rows\n * @param {Boolean} checked\n */\n\n\nfunction toggleRows(rows, checked) {\n  rows.forEach(function (row) {\n    if (row && row.tagName === \"TR\") {\n      row.dispatchEvent(new CustomEvent(\"select\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          state: checked\n        }\n      }));\n    }\n  });\n}\n\nfunction updateCounter(inputs) {\n  const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n  const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n  counters.forEach(function (counter) {\n    counter.innerHTML = interpolate(ngettext(\"%(sel)s of %(cnt)s selected\", \"%(sel)s of %(cnt)s selected\", selected), {\n      sel: selected,\n      cnt: counter.dataset.actionsIcnt\n    }, true);\n  });\n\n  if (selected === inputs.length) {\n    showQuestion();\n  } else {\n    clearAcross(inputs);\n  }\n}\n/**\n * Показ ссылки \"выбрать всё\"\n */\n\n\nfunction showQuestion() {\n  const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n  questions.forEach(function (question) {\n    question.hidden = false;\n  });\n}\n/**\n * Установка значения input-элементу для выполнения действия над всеми элементами\n * @param {Boolean} value\n */\n\n\nfunction setAcrossInput(value) {\n  const acrossInput = document.querySelectorAll(`.${ACROSS_CLASS}`);\n  acrossInput.forEach(function (input) {\n    input.value = Number(value);\n  });\n}\n\nfunction selectAcross() {\n  setAcrossInput(true);\n  const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n  counters.forEach(function (counter) {\n    counter.hidden = true;\n  });\n  const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n  allContainers.forEach(function (container) {\n    container.hidden = false;\n  });\n  const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n  questions.forEach(function (question) {\n    question.hidden = true;\n  });\n  const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n  clear_buttons.forEach(function (clear_button) {\n    clear_button.hidden = false;\n  });\n}\n\nfunction clearAcross(inputs) {\n  setAcrossInput(false);\n  const counters = document.querySelectorAll(`.${COUNTER_CLASS}`);\n  counters.forEach(function (counter) {\n    counter.hidden = false;\n  });\n  const allContainers = document.querySelectorAll(`.${ALL_CLASS}`);\n  allContainers.forEach(function (container) {\n    container.hidden = true;\n  });\n  const selected = inputs.reduce((sum, input) => sum + (input.checked ? 1 : 0), 0);\n  const questions = document.querySelectorAll(`.${QUESTION_CLASS}`);\n  questions.forEach(function (question) {\n    question.hidden = selected !== inputs.length;\n  });\n  const clear_buttons = document.querySelectorAll(`.${CLEAR_CLASS}`);\n  clear_buttons.forEach(function (clear_button) {\n    clear_button.hidden = true;\n  });\n}\n\nconst checkboxes = document.querySelectorAll(`.${CHECKBOX_CLASS}`);\n\nif (checkboxes.length) {\n  initActions(Array.from(checkboxes));\n}\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-actions/paper-actions.js?");

/***/ }),

/***/ 7409:
/*!*****************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-filter/paper-filter.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _paper_filter_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paper-filter.scss */ 2866);\n\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-filter/paper-filter.js?");

/***/ }),

/***/ 7758:
/*!*************************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-pagination/paper-pagination.js ***!
  \*************************************************************************************/
/***/ (function() {

eval("// Ctrl + Arrows navigation\nwindow.addEventListener(\"keydown\", function (event) {\n  if (event.defaultPrevented) {\n    return; // Do nothing if the event was already processed\n  }\n\n  if (event.ctrlKey) {\n    const pagination = document.querySelector(\".paper-pagination\");\n\n    if (!pagination) {\n      return;\n    }\n\n    switch (event.key) {\n      case \"Left\":\n      case \"ArrowLeft\":\n        pagination.querySelector(\".page-link[aria-label=\\\"Previous\\\"]\").click();\n        break;\n\n      case \"Right\":\n      case \"ArrowRight\":\n        pagination.querySelector(\".page-link[aria-label=\\\"Next\\\"]\").click();\n        break;\n\n      default:\n        // Quit when this doesn't handle the key event.\n        return;\n    } // Cancel the default action to avoid it being handled twice\n\n\n    event.preventDefault();\n  }\n});\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-pagination/paper-pagination.js?");

/***/ }),

/***/ 4713:
/*!***************************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-search-form/paper-search-form.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _paper_search_form_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./paper-search-form.scss */ 3756);\n // Выделение текста в поле поиска при фокусе\n\nconst form = document.querySelector(\".paper-search-form\");\nconst input = form && form.querySelector(\".form-control\");\ninput && input.addEventListener(\"focus\", function () {\n  this.select();\n});\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-search-form/paper-search-form.js?");

/***/ }),

/***/ 7874:
/*!*******************************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/filters/date-range-filter/date-range-filter.js ***!
  \*******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var components_flatpickr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/flatpickr */ 1976);\n/* harmony import */ var js_utilities_locale__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js/utilities/locale */ 6410);\n/* harmony import */ var js_utilities_widget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! js/utilities/widget */ 5932);\n\n\n\n\nclass DateRangeFilter extends js_utilities_widget__WEBPACK_IMPORTED_MODULE_2__.default {\n  constructor(options) {\n    super();\n    this.opts = Object.assign({\n      altInput: true,\n      locale: this._getLocale(),\n      dateFormat: this._getDateFormat()\n    }, options);\n  }\n\n  _init(element) {\n    let dateStart = element.querySelector(\"[data-range-start]\");\n    let dateStartConfig = Object.assign({}, this.opts);\n    (0,components_flatpickr__WEBPACK_IMPORTED_MODULE_0__.flatpickr)(dateStart, dateStartConfig);\n    let dateEnd = element.querySelector(\"[data-range-end]\");\n    let dateEndConfig = Object.assign({}, this.opts);\n    (0,components_flatpickr__WEBPACK_IMPORTED_MODULE_0__.flatpickr)(dateEnd, dateEndConfig);\n    element.addEventListener(\"click\", function (event) {\n      const button = event.target.closest(\"[data-today]\");\n\n      if (button) {\n        const inputGroup = button.closest(\".input-group\");\n        const input = inputGroup && inputGroup.querySelector(\"input\");\n\n        if (input && input._flatpickr) {\n          input._flatpickr.setDate(\"today\");\n        }\n      }\n    });\n  }\n\n  _destroy(element) {\n    let dateStart = element.querySelector(\"[data-range-start]\");\n\n    if (dateStart._flatpickr) {\n      dateStart._flatpickr.destroy();\n    }\n\n    let dateEnd = element.querySelector(\"[data-range-end]\");\n\n    if (dateEnd._flatpickr) {\n      dateEnd._flatpickr.destroy();\n    }\n  }\n\n  _getLocale() {\n    for (let locale of (0,js_utilities_locale__WEBPACK_IMPORTED_MODULE_1__.default)()) {\n      if (components_flatpickr__WEBPACK_IMPORTED_MODULE_0__.flatpickr.l10ns[locale]) {\n        return locale;\n      }\n    }\n\n    return \"default\";\n  }\n\n  _getDateFormat() {\n    for (let locale of (0,js_utilities_locale__WEBPACK_IMPORTED_MODULE_1__.default)()) {\n      if (components_flatpickr__WEBPACK_IMPORTED_MODULE_0__.dateFormats[locale]) {\n        return components_flatpickr__WEBPACK_IMPORTED_MODULE_0__.dateFormats[locale];\n      }\n    }\n\n    return \"Y-m-d\";\n  }\n\n}\n\nconst widget = new DateRangeFilter();\nwidget.observe(\".paper-date-range-filter\");\nwidget.initAll(\".paper-date-range-filter\");\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/filters/date-range-filter/date-range-filter.js?");

/***/ }),

/***/ 7779:
/*!*************************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/filters/select2-filter/select2-filter.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var components_select2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! components/select2 */ 4027);\n\nconst widget = new components_select2__WEBPACK_IMPORTED_MODULE_0__.Select2Widget({\n  width: \"100%\",\n  allowClear: true,\n  containerCssClass: \"select2-container--small\"\n});\nwidget.observe(\".paper-select2-filter select\");\nwidget.initAll(\".paper-select2-filter select\");\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/filters/select2-filter/select2-filter.js?");

/***/ }),

/***/ 4544:
/*!*************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/js/changelist.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var js_components_sortable_table_SortableTable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js/components/sortable_table/SortableTable */ 3902);\n/* harmony import */ var components_select2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! components/select2 */ 4027);\n/* harmony import */ var bem_paper_actions_paper_actions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bem/paper-actions/paper-actions */ 1016);\n/* harmony import */ var bem_paper_filter_paper_filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bem/paper-filter/paper-filter */ 7409);\n/* harmony import */ var bem_paper_pagination_paper_pagination__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bem/paper-pagination/paper-pagination */ 7758);\n/* harmony import */ var bem_paper_pagination_paper_pagination__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bem_paper_pagination_paper_pagination__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var bem_paper_search_form_paper_search_form__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bem/paper-search-form/paper-search-form */ 4713);\n/* harmony import */ var filters_date_range_filter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! filters/date-range-filter */ 7874);\n/* harmony import */ var filters_select2_filter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! filters/select2-filter */ 7779);\n/* harmony import */ var css_changelist_scss__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! css/changelist.scss */ 7900);\n\n\n\n\n\n // -----------------\n//  Filters\n// -----------------\n\n\n // -----------------\n//  CSS\n// -----------------\n\n // Select2 для выпадающих списков\n\nconst select2_changelist = new components_select2__WEBPACK_IMPORTED_MODULE_1__.Select2Widget({\n  width: \"\",\n  allowClear: true,\n  containerCssClass: \"select2-container--small\"\n});\nselect2_changelist.observe(\".paper-table .select-field select\");\nselect2_changelist.initAll(\".paper-table .select-field select\");\nconst select2_action = new components_select2__WEBPACK_IMPORTED_MODULE_1__.Select2Widget({\n  allowClear: true,\n  containerCssClass: \"select2-container--small\",\n  minimumResultsForSearch: Infinity\n});\nselect2_action.observe(\".paper-actions select\");\nselect2_action.initAll(\".paper-actions select\"); // Сортируемые таблицы\n\nconst table = document.getElementById(\"result_list\");\n\nif (table && table.classList.contains(\"paper-table--sortable\")) {\n  new js_components_sortable_table_SortableTable__WEBPACK_IMPORTED_MODULE_0__.default(table, {\n    url: table.dataset.orderUrl,\n    tree: table.classList.contains(\"paper-table--mptt\"),\n    handler: \".paper-table__sort-handler\"\n  });\n}\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changelist.js?");

/***/ }),

/***/ 4102:
/*!*************************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/js/components/sortable_table/ListTree.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Представление списка DOM-элементов в виде дерева.\n * Каждый DOM-элемент должен иметь data-атрибуты: id, parent.\n * Каждый дочерний узел должен идти после родителя.\n * @module ListTree\n */\n\n/**\n * @typedef {Object} module:ListTree.ListTreeNode\n * @property {Number}       pk\n * @property {Number}       parent\n * @property {HTMLElement}  element\n * @property {Number[]}     childs\n */\n\n/**\n * Конструктор объектов ListTree.\n * @param {NodeList|Element[]} elements\n * @constructor\n */\nfunction ListTree(elements) {\n  this._buildTree(elements);\n}\n/**\n * Создание узла дерева.\n * @param {HTMLElement} child\n * @returns {module:ListTree.ListTreeNode}\n * @private\n */\n\n\nListTree.prototype._createNode = function (child) {\n  const dataset = child.dataset;\n  return {\n    pk: parseInt(dataset.id),\n    parent: parseInt(dataset.parent),\n    element: child,\n    childs: []\n  };\n};\n/**\n * Добавление узла дерева в карту, для быстрого поиска по ID.\n * @param {module:ListTree.ListTreeNode} node\n * @returns {Boolean}\n * @private\n */\n\n\nListTree.prototype._addNode = function (node) {\n  if (node && typeof node.pk === \"number\") {\n    this._nodes[node.pk] = node;\n\n    if (isNaN(node.parent)) {\n      this._roots.push(node);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n/**\n * Получение узла по ID.\n * @param {Number} pk\n * @returns {module:ListTree.ListTreeNode}\n */\n\n\nListTree.prototype.getNode = function (pk) {\n  if (this._nodes === null) {\n    throw new Error(\"tree is empty\");\n  }\n\n  if (!(pk in this._nodes)) {\n    throw new Error(`node ${pk} not found`);\n  }\n\n  return this._nodes[pk];\n};\n/**\n * Построение дерева из элементов.\n * @param {Element[]} elements\n * @private\n */\n\n\nListTree.prototype._buildTree = function (elements) {\n  const stack = [];\n  this._nodes = {};\n  this._roots = [];\n  elements.forEach(function (elem) {\n    let node = this._createNode(elem);\n\n    this._addNode(node);\n\n    while (stack.length) {\n      let stack_node = stack[0];\n\n      if (node.parent === stack_node.pk) {\n        stack_node.childs.push(node.pk);\n        stack.unshift(node);\n        return;\n      }\n\n      stack.shift();\n    }\n\n    stack.unshift(node);\n  }.bind(this));\n};\n/**\n * Получение корневых элементов.\n * @returns {Element[]}\n */\n\n\nListTree.prototype.getRoots = function () {\n  if (this._roots === null) {\n    throw new Error(\"tree is empty\");\n  }\n\n  return this._roots.map(function (root_node) {\n    return root_node.element;\n  }.bind(this));\n};\n/**\n * Получение всех потомков узла.\n * @param {Number} pk\n * @returns {Element[]}\n */\n\n\nListTree.prototype.getDescendants = function (pk) {\n  const node = this.getNode(pk);\n  return node.childs.reduce(function (result, child_pk) {\n    let child_node = this.getNode(child_pk);\n\n    if (child_node) {\n      result.push(child_node.element);\n      result = result.concat(this.getDescendants(child_pk));\n    }\n\n    return result;\n  }.bind(this), []);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ListTree);\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/ListTree.js?");

/***/ }),

/***/ 3902:
/*!******************************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/js/components/sortable_table/SortableTable.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sortablejs */ 1474);\n/* harmony import */ var js_components_sortable_table_ListTree__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js/components/sortable_table/ListTree */ 4102);\n/**\n * Таблица с возможностью сортировки строк.\n * Каждая строка должна иметь атрибуты data-id и data-order-value.\n * В случае, если строки представляют дерево, то еще необходим атрибут data-parent.\n * @module SortableTable\n */\n\n/**\n * @typedef {Object} module:SortableTable.SortableTableOptions\n * @property {String}  url\n * @property {Boolean} [tree]\n * @property {String}  [handler]\n * @property {String}  [disabledClass]\n */\n\n\n/**\n * Конструктор объектов SortableTable.\n * @param {Element} table\n * @param {module:SortableTable.SortableTableOptions} [options]\n * @constructor\n */\n\nfunction SortableTable(table, options) {\n  /** @type {module:SortableTable.SortableTableOptions} */\n  this.opts = Object.assign({\n    url: null,\n    tree: false,\n    handler: \".handler\",\n    disabledClass: \"disabled\"\n  }, options);\n  /** @type {Element} */\n\n  this.table = table;\n  /** @type {Element} */\n\n  this.tbody = table.querySelector(\"tbody\");\n\n  if (!this.tbody) {\n    throw new Error(\"table body not found\");\n  }\n  /** @type {?ListTree} */\n\n\n  this.tree = null;\n\n  this._createSortable();\n}\n/**\n * Инициализация плагина сортировки.\n * @private\n */\n\n\nSortableTable.prototype._createSortable = function () {\n  return sortablejs__WEBPACK_IMPORTED_MODULE_0__.default.create(this.tbody, {\n    animation: 0,\n    draggable: \"tr\",\n    handle: this.opts.handler,\n    filter: function (event, row, instance) {\n      if (row.classList.contains(this.opts.disabledClass)) {\n        return true;\n      }\n\n      const handler = row.querySelector(this.opts.handler);\n\n      if (handler && handler.classList.contains(this.opts.disabledClass)) {\n        return true;\n      }\n    }.bind(this),\n    ghostClass: \"sortable-ghost\",\n    onStart: this._onStart.bind(this),\n    onMove: this._onMove.bind(this),\n    onEnd: this._onEnd.bind(this)\n  });\n};\n/**\n * Обработчик события начала перетаскивания.\n * @param evt\n * @private\n */\n\n\nSortableTable.prototype._onStart = function (evt) {\n  const rows = this.tbody.querySelectorAll(\"tr\");\n\n  if (this.opts.tree) {\n    this.tree = new js_components_sortable_table_ListTree__WEBPACK_IMPORTED_MODULE_1__.default(rows);\n  } // блокируем все узлы, кроме соседних\n\n\n  const item_parentId = parseInt(evt.item.dataset.parent);\n  rows.forEach(function (row) {\n    const parentId = parseInt(row.dataset.parent);\n\n    if ((!isNaN(parentId) || !isNaN(item_parentId)) && parentId !== item_parentId) {\n      row.classList.add(this.opts.disabledClass);\n    }\n  }.bind(this));\n};\n/**\n * Обработчик события перетаскивания.\n * @param evt\n * @returns {Boolean}\n * @private\n */\n\n\nSortableTable.prototype._onMove = function (evt) {\n  return !evt.related.classList.contains(this.opts.disabledClass);\n};\n/**\n * Обработчик события завершения перетаскивания.\n * @param evt\n * @private\n */\n\n\nSortableTable.prototype._onEnd = function (evt) {\n  // снимаем блокировку со всех узлов\n  const rows = this.tbody.querySelectorAll(\"tr\");\n  rows.forEach(function (row) {\n    row.classList.remove(this.opts.disabledClass);\n  }.bind(this));\n\n  let moved = this._getMovedRows(evt);\n\n  if (!moved.length || moved.length === 1) {\n    return;\n  }\n\n  this._normalizeTable(evt, moved);\n\n  const map = this._createOrderMap(evt, moved); // блокировка областей сортировки на время выполнения запроса\n\n\n  const handlers = this.tbody.querySelectorAll(this.opts.handler);\n  handlers.forEach(function (handler) {\n    handler.classList.add(this.opts.disabledClass);\n  }.bind(this)); // отправка запроса на сервер\n\n  this._sendRequest(map).then(function () {\n    // снятие блокировки\n    handlers.forEach(function (handler) {\n      handler.classList.remove(this.opts.disabledClass);\n    }.bind(this));\n  }.bind(this));\n};\n/**\n * Получение строк, чей порядок изменился.\n * @param evt\n * @returns {Element[]}\n * @private\n */\n\n\nSortableTable.prototype._getMovedRows = function (evt) {\n  const sliceStart = Math.min(evt.oldIndex, evt.newIndex);\n  const sliceEnd = Math.max(evt.oldIndex, evt.newIndex);\n  const rows = this.tbody.querySelectorAll(\"tr\");\n  let slice = Array.prototype.slice.call(rows, sliceStart, sliceEnd + 1);\n\n  if (this.tree) {\n    // пропускаем узлы, не являющиеся соседними\n    const pk = parseInt(evt.item.dataset.id);\n    const node = this.tree.getNode(pk);\n    slice = slice.filter(function (row) {\n      return parseInt(row.dataset.parent) === node.parent;\n    });\n  }\n\n  return slice;\n};\n/**\n * Создание карты новых значений сортировки строк.\n * @param evt\n * @param {Element[]} rows\n * @returns {Object}\n * @private\n */\n\n\nSortableTable.prototype._createOrderMap = function (evt, rows) {\n  const pk_array = [];\n  const order_array = [];\n  rows.forEach(function (row) {\n    const handle = row.querySelector(this.opts.handler);\n\n    if (handle) {\n      pk_array.push(parseInt(row.dataset.id));\n      order_array.push(parseInt(row.dataset.orderValue));\n    }\n  }.bind(this)); // циклический сдвиг значений сортировки\n\n  const movedDown = evt.oldIndex < evt.newIndex;\n\n  if (movedDown) {\n    order_array.unshift(order_array.pop());\n  } else {\n    order_array.push(order_array.shift());\n  }\n\n  return pk_array.reduce(function (result, pk, i) {\n    result[pk] = order_array[i]; // обновляем атрибут data-order-value\n\n    const row = this.tbody.querySelector(\"tr[data-id='\" + pk + \"']\");\n    row.setAttribute(\"data-order-value\", order_array[i]);\n    return result;\n  }.bind(this), {});\n};\n/**\n * Нормализация таблицы.\n * Все дочерние строки перемещаются под своего родителя.\n * Без этого метода может случиться ситуация, когда элемент\n * был перемещен между своим соседом и его детьми.\n * @param evt\n * @param {Element[]} moved\n * @private\n */\n\n\nSortableTable.prototype._normalizeTable = function (evt, moved) {\n  if (this.tree) {\n    const pk = parseInt(evt.item.dataset.id);\n    const node = this.tree.getNode(pk);\n    const prev = evt.item.previousElementSibling;\n    const next = evt.item.nextElementSibling;\n    const parents = moved.slice();\n\n    if (prev && next) {\n      // если предыдущая строка - сосед, а следующая - ребенок соседа,\n      // то сосед должен быть в списке нормализации.\n      const isPrevSibling = parseInt(prev.dataset.parent) === node.parent;\n      const isNextChild = parseInt(next.dataset.parent) === parseInt(prev.dataset.id);\n\n      if (isPrevSibling && isNextChild && parents.indexOf(prev) < 0) {\n        parents.unshift(prev);\n      }\n    } // перенос детей под родителя\n\n\n    parents.forEach(function (parent) {\n      const pk = parseInt(parent.dataset.id);\n      const childs = this.tree.getDescendants(pk);\n      Element.prototype.after.apply(parent, childs);\n    }.bind(this));\n  }\n};\n/**\n * Отправка новых значений сортировки на сервер.\n * @param {Object} data\n * @returns {Promise<Response>}\n * @private\n */\n\n\nSortableTable.prototype._sendRequest = function (data) {\n  return fetch(this.opts.url, {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    if (!response.ok) {\n      const error = new Error(`${response.status} ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SortableTable);\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/js/components/sortable_table/SortableTable.js?");

/***/ })

}]);