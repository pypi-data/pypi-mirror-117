"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpaper_admin"] = self["webpackChunkpaper_admin"] || []).push([["changeform"],{

/***/ 7548:
/*!**************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-formset/_formset.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _management_form__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_management-form */ 3821);\n\n/**\n * Базовый класс для Django-формсетов.\n *\n * Основные приципы работы:\n * 1) Желательно задать корневому элементу форсета уникальный ID, чтобы иметь\n *    возможность указать зависимым элементам, с каким именно формсетом они будут работать.\n *\n * 2) Префикс формсета задается через атрибут \"data-formset-prefix\".\n *\n * 3) Контейнер для форм задается атрибутом \"data-formset-form-container\".\n *\n * 4) Селектор форм формсета задается атрибутом \"data-formset-form-selector\".\n *\n * 5) Шаблонный элемент для новых форм задается через атрибут \"data-formset-form-template\".\n *\n *      <div id=\"example-formset\"\n *           data-formset-prefix=\"example\"\n *           data-formset-form-container=\".example-forms\"\n *           data-formset-form-selector=\".example-form\"\n *           data-formset-form-template=\"example-form-template\">\n *        <div class=\"example-forms\">\n *          ...\n *        </div>\n *      </div>\n *\n *      <template id=\"example-form-template\">\n *        <div class=\"example-form\">\n *          ...\n *        </div>\n *      </template>\n *\n * 6) Кнопки добавления формы должна иметь атрибут data-formset-toggle=\"add\".\n *    Если кнопка находится за пределами корневого элемента формсета, необходимо\n *    добавить атрибут \"data-formset\" с ID формсета.\n *\n *      <button data-formset-toggle=\"add\" data-formset=\"example-formset\">\n *        Add form\n *      </button>\n *\n * 7) Кнопка удаления ещё не сохраненной формы должна иметь атрибут\n *    data-formset-toggle=\"delete\" и располагаться в пределах формы.\n *\n *      <button data-formset-toggle=\"delete\">\n *        Delete this form\n *      </button>\n *\n * 8) Кнопки сортировки форм должны иметь атрибут \"data-formset-toggle\" со\n *    значениями \"up\" либо \"down\" и располагаться в пределах формы.\n *\n */\n\nclass Formset {\n  constructor(root) {\n    this.root = root;\n    this.management_form = new _management_form__WEBPACK_IMPORTED_MODULE_0__.default(root);\n\n    this._initAddFormButtons();\n\n    this._initDeleteFormButtons();\n\n    this._initSortFormButtons();\n  }\n\n  get prefix() {\n    const prefix = this.root.dataset.formsetPrefix;\n\n    if (!prefix) {\n      throw new Error(\"formset prefix required\");\n    }\n\n    return prefix;\n  }\n\n  get formContainer() {\n    const selector = this.root.dataset.formsetFormContainer;\n\n    if (!selector) {\n      throw new Error(\"container selector required\");\n    }\n\n    const container = this.root.querySelector(selector);\n\n    if (!container) {\n      throw new Error(\"container not found\");\n    }\n\n    return container;\n  }\n\n  get formSelector() {\n    const formSelector = this.root.dataset.formsetFormSelector;\n\n    if (!formSelector) {\n      throw new Error(\"form selector required\");\n    }\n\n    return formSelector;\n  }\n\n  get templateId() {\n    const templateId = this.root.dataset.formsetFormTemplate;\n\n    if (!templateId) {\n      throw new Error(\"form template ID required\");\n    }\n\n    return templateId;\n  }\n\n  get formTemplate() {\n    const templateElement = document.getElementById(this.templateId);\n\n    if (!templateElement) {\n      throw new Error(\"form template element not found\");\n    }\n\n    return templateElement;\n  }\n  /**\n   * Возвращает текущие формы формсета.\n   * @returns {NodeListOf<HTMLElement>}\n   */\n\n\n  getForms() {\n    return this.formContainer.querySelectorAll(this.formSelector);\n  }\n  /**\n   * Возвращает порядковый номер формы в формсете.\n   * !! Внимание !! Это не тот же индекс, что передается в setFormIndex !!\n   * @param {HTMLElement} form\n   * @returns {number}\n   */\n\n\n  getFormIndex(form) {\n    return Array.from(this.getForms()).indexOf(form);\n  }\n  /**\n   * Возвращает массив кнопок добавления формы в формсет.\n   * @returns {HTMLElement[]}\n   */\n\n\n  getAddFormButtons() {\n    let buttons = [];\n    document.querySelectorAll(\"[data-formset-toggle=\\\"add\\\"]\").forEach(function (button) {\n      if (this.root.id && button.dataset.formset === this.root.id) {\n        buttons.push(button);\n      } else if (this.root.contains(button) && !button.dataset.formset) {\n        buttons.push(button);\n      }\n    }.bind(this));\n    return buttons;\n  }\n  /**\n   * Возвращает массив кнопок удаления форм.\n   * @returns {HTMLElement[]}\n   */\n\n\n  getDeleteFormButtons() {\n    let buttons = [];\n    this.getForms().forEach(function (form) {\n      let deleteFormButtons = form.querySelectorAll(\"[data-formset-toggle=\\\"delete\\\"]\");\n\n      if (deleteFormButtons.length) {\n        buttons = buttons.concat(Array.from(deleteFormButtons));\n      }\n    }.bind(this));\n    return buttons;\n  }\n  /**\n   * Возвращает массив кнопок сортировки форм.\n   * @returns {HTMLElement[]}\n   */\n\n\n  getSortFormButtons() {\n    let buttons = [];\n    this.getForms().forEach(function (form) {\n      let moveUpButtons = form.querySelectorAll(\"[data-formset-toggle=\\\"up\\\"]\");\n\n      if (moveUpButtons.length) {\n        buttons = buttons.concat(Array.from(moveUpButtons));\n      }\n\n      let moveDownButtons = form.querySelectorAll(\"[data-formset-toggle=\\\"down\\\"]\");\n\n      if (moveDownButtons.length) {\n        buttons = buttons.concat(Array.from(moveDownButtons));\n      }\n    }.bind(this));\n    return buttons;\n  }\n  /**\n   * Включение/выключение кнопки добавления формы.\n   * @param {HTMLElement} button\n   * @param {Boolean} state\n   */\n\n\n  setAddFormButtonState(button, state) {\n    button.disabled = !state;\n  }\n  /**\n   * Включение/выключение кнопки удаления формы.\n   * @param {HTMLElement} button\n   * @param {Boolean} state\n   */\n\n\n  setDeleteFormButtonState(button, state) {\n    button.disabled = !state;\n  }\n  /**\n   * Включение/выключение кнопки сортировки форм.\n   * @param {HTMLElement} button\n   * @param {Boolean} state\n   */\n\n\n  setSortFormButtonState(button, state) {\n    button.disabled = !state;\n  }\n\n  _initAddFormButtons() {\n    document.addEventListener(\"click\", function (event) {\n      let button = event.target.closest(\"[data-formset-toggle=\\\"add\\\"]\");\n\n      if (button) {\n        if (this.root.id && button.dataset.formset === this.root.id) {\n          this.addForm();\n        } else if (this.root.contains(button) && !button.dataset.formset) {\n          this.addForm();\n        }\n      }\n    }.bind(this));\n  }\n\n  _initDeleteFormButtons() {\n    document.addEventListener(\"click\", function (event) {\n      let button = event.target.closest(\"[data-formset-toggle=\\\"delete\\\"]\");\n\n      if (button && this.root.contains(button)) {\n        let form = button.closest(this.formSelector);\n\n        if (form) {\n          this.deleteForm(form);\n        }\n      }\n    }.bind(this));\n  }\n\n  _initSortFormButtons() {\n    document.addEventListener(\"click\", function (event) {\n      let moveUpButton = event.target.closest(\"[data-formset-toggle=\\\"up\\\"]\");\n      let moveDownButton = event.target.closest(\"[data-formset-toggle=\\\"down\\\"]\");\n\n      if (moveUpButton && this.root.contains(moveUpButton)) {\n        let form = moveUpButton.closest(this.formSelector);\n\n        if (form) {\n          this.moveFormUp(form);\n        }\n      } else if (moveDownButton && this.root.contains(moveDownButton)) {\n        let form = moveDownButton.closest(this.formSelector);\n\n        if (form) {\n          this.moveFormDown(form);\n        }\n      }\n    }.bind(this));\n  }\n\n  addForm() {\n    if (this.management_form.totalForms >= this.management_form.maxForms) {\n      throw new Error(\"Maximum number of forms is reached\");\n    }\n\n    let formFragment = this.formTemplate.content.cloneNode(true);\n    let form = formFragment.children[0];\n    this.formContainer.appendChild(formFragment);\n    this.management_form.totalForms++;\n    this.updateFormIndexes();\n    this.updateFormOrder();\n    this.updateButtonsState();\n    return form;\n  }\n\n  deleteForm(form) {\n    if (this.management_form.totalForms <= this.management_form.minForms) {\n      throw new Error(\"Minimum number of forms is reached\");\n    }\n\n    this.management_form.totalForms--;\n    form.remove();\n    this.updateFormIndexes();\n    this.updateFormOrder();\n    this.updateButtonsState();\n  }\n\n  moveFormUp(form) {\n    const formIndex = this.getFormIndex(form);\n\n    if (formIndex === 0) {\n      throw new Error(\"form is already first\");\n    }\n\n    const previousForm = this.getForms()[formIndex - 1];\n    form.after(previousForm);\n    this.updateFormIndexes();\n    this.updateFormOrder();\n    this.updateButtonsState();\n  }\n\n  moveFormDown(form) {\n    const formCount = this.getForms().length;\n    const formIndex = this.getFormIndex(form);\n\n    if (formIndex === formCount - 1) {\n      throw new Error(\"form is already last\");\n    }\n\n    const nextForm = this.getForms()[formIndex + 1];\n    form.before(nextForm);\n    this.updateFormIndexes();\n    this.updateFormOrder();\n    this.updateButtonsState();\n  }\n  /**\n   * Установка Django-индекса для всех форм в соответствии с их порядком в DOM.\n   * Можно указать форму, которую следует пропустить при обходе. Это позволит\n   * указать корректные Django-индексы при удалении, не дожидаясь физического\n   * удаления формы из DOM.\n   * @param {HTMLElement} skip\n   */\n\n\n  updateFormIndexes(skip = null) {\n    let index = 0;\n    this.getForms().forEach(function (form) {\n      if (form !== skip) {\n        this.setFormIndex(form, index++);\n      }\n    }.bind(this));\n  }\n  /**\n   * Установка Django-индекса формы для всех элементов в пределах формы.\n   * @param {HTMLElement} form\n   * @param {Number} index\n   */\n\n\n  setFormIndex(form, index) {\n    this._setElementIndex(form, index);\n\n    form.querySelectorAll(\"*\").forEach(function (element) {\n      this._setElementIndex(element, index);\n    }.bind(this));\n  }\n  /**\n   * Установка Django-индекса формы в атрибутах указанного элемента.\n   * @param {HTMLElement} element\n   * @param {Number} index\n   * @private\n   */\n\n\n  _setElementIndex(element, index) {\n    const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n    const replacement = this.prefix + \"-\" + index;\n\n    if (element.htmlFor) {\n      element.htmlFor = element.htmlFor.replace(regex, replacement);\n    }\n\n    if (element.id) {\n      element.id = element.id.replace(regex, replacement);\n    }\n\n    if (element.name) {\n      element.name = element.name.replace(regex, replacement);\n    }\n  }\n  /**\n   * Установка поля сортировки для всех форм в соответствии с их порядком в DOM.\n   * Можно указать форму, которую следует пропустить при обходе. Это позволит\n   * указать корректную сортировку при удалении, не дожидаясь физического\n   * удаления формы из DOM.\n   * @param {HTMLElement} skip\n   */\n\n\n  updateFormOrder(skip = null) {\n    let index = 0;\n    this.getForms().forEach(function (form) {\n      if (form !== skip) {\n        this.setFormOrder(form, index++);\n      }\n    }.bind(this));\n  }\n  /**\n   * Установка значения в поле сортровки формы.\n   * @param {HTMLElement} form\n   * @param {Number} value\n   */\n\n\n  setFormOrder(form, value) {}\n  /**\n   * Обновление стостояния всех кнопок формсета.\n   */\n\n\n  updateButtonsState() {\n    const disableAdd = this.management_form.totalForms >= this.management_form.maxForms;\n    this.getAddFormButtons().forEach(function (button) {\n      this.setAddFormButtonState(button, !disableAdd);\n    }.bind(this));\n    const disableDelete = this.management_form.totalForms <= this.management_form.minForms;\n    this.getDeleteFormButtons().forEach(function (button) {\n      this.setDeleteFormButtonState(button, !disableDelete);\n    }.bind(this));\n    const formCount = this.getForms().length;\n    this.getSortFormButtons().forEach(function (button) {\n      const form = button.closest(this.formSelector);\n      const formIndex = this.getFormIndex(form);\n      const direction = button.dataset.formsetToggle;\n      let state = true;\n\n      if (formIndex === 0 && direction === \"up\") {\n        state = false;\n      }\n\n      if (formIndex === formCount - 1 && direction === \"down\") {\n        state = false;\n      }\n\n      this.setSortFormButtonState(button, state);\n    }.bind(this));\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Formset);\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_formset.js?");

/***/ }),

/***/ 5273:
/*!*********************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-formset/_inline-formset.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var js_utilities_emitters__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js/utilities/emitters */ 2209);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap */ 2642);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap */ 5317);\n/* harmony import */ var gsap_ScrollToPlugin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gsap/ScrollToPlugin */ 9127);\n/* harmony import */ var _formset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_formset */ 7548);\n\n\n\n\ngsap__WEBPACK_IMPORTED_MODULE_2__.gsap.registerPlugin(gsap_ScrollToPlugin__WEBPACK_IMPORTED_MODULE_3__.ScrollToPlugin);\n\nclass InlineFormset extends _formset__WEBPACK_IMPORTED_MODULE_1__.default {\n  constructor(root) {\n    super(root);\n    this._isTransitioning = false;\n  }\n\n  setAddFormButtonState(button, state) {\n    // отключение кнопок во время анимации\n    let finalState = !this._isTransitioning && state;\n    super.setAddFormButtonState(button, finalState);\n    button.classList.toggle(\"disabled\", !finalState);\n  }\n\n  setDeleteFormButtonState(button, state) {\n    // отключение кнопок во время анимации\n    let finalState = !this._isTransitioning && state;\n    super.setDeleteFormButtonState(button, finalState);\n    button.classList.toggle(\"disabled\", !finalState);\n  }\n\n  setSortFormButtonState(button, state) {\n    // отключение кнопок во время анимации\n    let finalState = !this._isTransitioning && state;\n    super.setSortFormButtonState(button, finalState);\n    button.classList.toggle(\"disabled\", !finalState);\n  }\n\n  addForm() {\n    this._isTransitioning = true;\n    let form = super.addForm(); // Events\n\n    js_utilities_emitters__WEBPACK_IMPORTED_MODULE_0__.default.dom.trigger(\"mutate\", [form]);\n    js_utilities_emitters__WEBPACK_IMPORTED_MODULE_0__.default.inlines.trigger(\"add\", [form, this.prefix]); // Animation\n\n    const onAddCallback = function () {\n      this._isTransitioning = false;\n      this.updateButtonsState(); // Events\n\n      js_utilities_emitters__WEBPACK_IMPORTED_MODULE_0__.default.inlines.trigger(\"added\", [form, this.prefix]); // Django compatible\n\n      $(document).trigger(\"formset:added\", [$(form), this.prefix]);\n    }.bind(this);\n\n    const animationOptions = {\n      onComplete: onAddCallback\n    };\n\n    if (this.root.classList.contains(\"paper-formset--tabular\")) {\n      animationOptions.duration = 0.2;\n      animationOptions.opacity = 0;\n      animationOptions.clearProps = \"opacity\";\n    } else {\n      animationOptions.duration = 0.3;\n      animationOptions.height = 0;\n      animationOptions.clearProps = \"height\";\n    }\n\n    gsap__WEBPACK_IMPORTED_MODULE_2__.gsap.from(form, animationOptions);\n    return form;\n  }\n\n  deleteForm(form) {\n    if (this.management_form.totalForms <= this.management_form.minForms) {\n      throw new Error(\"Minimum number of forms is reached\");\n    }\n\n    this.management_form.totalForms--; // Устанавливаем корректные индексы форм, не дожидаясь анимаций.\n\n    this.setFormIndex(form, this.management_form.totalForms);\n    this.updateFormIndexes(form); // Устанавливаем коректную сортировку форм, не дожидаясь анимаций.\n\n    this.updateFormOrder(form); // Events\n\n    js_utilities_emitters__WEBPACK_IMPORTED_MODULE_0__.default.inlines.trigger(\"remove\", [form, this.prefix]); // Animation\n\n    this._isTransitioning = true;\n    this.updateButtonsState();\n\n    const onDeleteCallback = function () {\n      js_utilities_emitters__WEBPACK_IMPORTED_MODULE_0__.default.dom.trigger(\"release\", [form]);\n      form.remove();\n      this._isTransitioning = false;\n      this.updateButtonsState(); // Events\n\n      js_utilities_emitters__WEBPACK_IMPORTED_MODULE_0__.default.inlines.trigger(\"removed\", [form, this.prefix]); // Django compatible\n\n      $(document).trigger(\"formset:removed\", [$(form), this.prefix]);\n    }.bind(this);\n\n    const animationOptions = {\n      onComplete: onDeleteCallback\n    };\n\n    if (this.root.classList.contains(\"paper-formset--tabular\")) {\n      animationOptions.duration = 0.2;\n      animationOptions.opacity = 0;\n    } else {\n      animationOptions.duration = 0.3;\n      animationOptions.height = 0;\n    }\n\n    gsap__WEBPACK_IMPORTED_MODULE_2__.gsap.to(form, animationOptions);\n  }\n\n  moveFormUp(form) {\n    const formIndex = this.getFormIndex(form);\n\n    if (formIndex === 0) {\n      throw new Error(\"the form is first already\");\n    }\n\n    const previousForm = this.getForms()[formIndex - 1];\n\n    this._swapForms(previousForm, form, \"up\");\n  }\n\n  moveFormDown(form) {\n    const formCount = this.getForms().length;\n    const formIndex = this.getFormIndex(form);\n\n    if (formIndex === formCount - 1) {\n      throw new Error(\"the form is last already\");\n    }\n\n    const nextForm = this.getForms()[formIndex + 1];\n\n    this._swapForms(form, nextForm, \"down\");\n  }\n  /**\n   * Меняет местами формы form1 и form2.\n   * Порядок указания форм должен совпадать с их порядком в DOM, т.е. form1\n   * должна быть выше form2.\n   * @param {HTMLElement} form1\n   * @param {HTMLElement} form2\n   * @param {string} direction\n   * @private\n   */\n\n\n  _swapForms(form1, form2, direction) {\n    const initialRect1 = form1.getBoundingClientRect();\n    const initialRect2 = form2.getBoundingClientRect(); // TIP: при изменении форм местами может проскроллиться страница\n    // (возможно из-за фокуса). Это внесет ошибку в дальнейшие рассчеты.\n    // Поэтому фиксируем вертикальное расположение окна браузера.\n\n    const currentPageOffset = window.pageYOffset || document.documentElement.scrollTop;\n    form2.after(form1);\n    window.scrollTo(0, currentPageOffset);\n    const swappedRect1 = form1.getBoundingClientRect();\n    const swappedRect2 = form2.getBoundingClientRect();\n    this.updateFormIndexes();\n    this.updateFormOrder(); // Имитация начального расположения форм с помощью CSS-трансформаций.\n\n    this.formContainer.style.transformStyle = 'preserve-3d';\n\n    if (direction === \"up\") {\n      form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 0)`;\n      form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 1px)`;\n    } else {\n      form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 1px)`;\n      form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 0)`;\n    } // Animation\n\n\n    this._isTransitioning = true;\n    this.updateButtonsState();\n\n    const onSwapCallback = function () {\n      this._isTransitioning = false;\n      this.updateButtonsState();\n      this.formContainer.style.transformStyle = '';\n    }.bind(this);\n\n    const animationOptions = {\n      y: 0,\n      clearProps: \"transform\"\n    };\n\n    if (this.root.classList.contains(\"paper-formset--tabular\")) {\n      animationOptions.duration = 0.25;\n    } else {\n      animationOptions.duration = 0.5;\n    }\n\n    const tl = new gsap__WEBPACK_IMPORTED_MODULE_4__.TimelineLite({\n      onComplete: onSwapCallback\n    }).to(form1, animationOptions).to(form2, animationOptions, 0); // Перемещение окна вместе с формой.\n\n    let finalPageOffset;\n    let preventScroll;\n\n    if (direction === \"up\") {\n      finalPageOffset = currentPageOffset + (swappedRect2.top - initialRect2.top);\n      preventScroll = initialRect2.top > 0.5 * window.innerHeight && swappedRect2.top > 0.5 * window.innerHeight;\n    } else {\n      finalPageOffset = currentPageOffset + (swappedRect1.top - initialRect1.top);\n      preventScroll = initialRect1.top < 0.5 * window.innerHeight && swappedRect1.top < 0.5 * window.innerHeight;\n    }\n\n    if (!preventScroll) {\n      tl.to(window, {\n        duration: animationOptions.duration,\n        scrollTo: {\n          y: Math.max(0, finalPageOffset)\n        }\n      }, 0);\n    }\n  }\n\n  setFormOrder(form, value) {\n    super.setFormOrder(form, value);\n    const input = form.querySelector(\".paper-formset__order\");\n\n    if (input) {\n      input.value = value;\n    }\n  }\n\n  setFormIndex(form, index) {\n    super.setFormIndex(form, index); // Обновление индекса в заголовке stacked-формы.\n\n    let caption = form.querySelector(\".paper-formset__form-caption\");\n\n    if (caption) {\n      caption.innerHTML = caption.innerHTML.replace(/#(\\d+|__prefix__)/g, \"#\" + (index + 1));\n    } // Обновление кнопки удаления\n\n\n    let deleteFormButton = form.querySelector(\"[data-formset-toggle=\\\"delete\\\"]\");\n\n    if (deleteFormButton && deleteFormButton.dataset.formsetForm) {\n      const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n      const replacement = this.prefix + \"-\" + index;\n      const formId = deleteFormButton.dataset.formsetForm.replace(regex, replacement);\n      deleteFormButton.setAttribute(\"data-formset-form\", formId);\n    }\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (InlineFormset);\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_inline-formset.js?");

/***/ }),

/***/ 3821:
/*!**********************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-formset/_management-form.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\nconst TOTAL_FORMS_SELECTOR = \"input[name$=\\\"-TOTAL_FORMS\\\"]\";\nconst INITIAL_FORMS_SELECTOR = \"input[name$=\\\"-INITIAL_FORMS\\\"]\";\nconst MIN_NUM_FORMS_SELECTOR = \"input[name$=\\\"-MIN_NUM_FORMS\\\"]\";\nconst MAX_NUM_FORMS_SELECTOR = \"input[name$=\\\"-MAX_NUM_FORMS\\\"]\";\n\nclass ManagementForm {\n  constructor(root) {\n    this.root = root;\n  }\n\n  get totalForms() {\n    const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n    return parseInt(input.value.toString());\n  }\n\n  set totalForms(value) {\n    let intValue = parseInt(value);\n\n    if (isNaN(intValue) || intValue < 0) {\n      throw new Error(`Invalid value: ${value}`);\n    }\n\n    const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n    input.value = intValue;\n  }\n\n  get initialForms() {\n    const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n    return parseInt(input.value.toString());\n  }\n\n  set initialForms(value) {\n    let intValue = parseInt(value);\n\n    if (isNaN(intValue) || intValue < 0) {\n      throw new Error(`Invalid value: ${value}`);\n    }\n\n    const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n    input.value = intValue;\n  }\n\n  get minForms() {\n    const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n\n    if (input) {\n      return parseInt(input.value.toString());\n    } else {\n      return 0;\n    }\n  }\n\n  set minForms(value) {\n    let intValue = parseInt(value);\n\n    if (isNaN(intValue) || intValue < 0) {\n      throw new Error(`Invalid value: ${value}`);\n    }\n\n    const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n    input.value = intValue;\n  }\n\n  get maxForms() {\n    const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n\n    if (input) {\n      return parseInt(input.value.toString());\n    } else {\n      return Infinity;\n    }\n  }\n\n  set maxForms(value) {\n    let intValue = parseInt(value);\n\n    if (isNaN(intValue) || intValue < 0) {\n      throw new Error(`Invalid value: ${value}`);\n    }\n\n    const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n    input.value = intValue;\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ManagementForm);\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_management-form.js?");

/***/ }),

/***/ 6775:
/*!*******************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/paper-formset/paper-formset.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Formset\": function() { return /* reexport safe */ _formset__WEBPACK_IMPORTED_MODULE_0__.default; },\n/* harmony export */   \"InlineFormset\": function() { return /* reexport safe */ _inline_formset__WEBPACK_IMPORTED_MODULE_1__.default; }\n/* harmony export */ });\n/* harmony import */ var _formset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_formset */ 7548);\n/* harmony import */ var _inline_formset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./_inline-formset */ 5273);\n/* harmony import */ var _paper_formset_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paper-formset.scss */ 7946);\n\n\n\n\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/paper-formset.js?");

/***/ }),

/***/ 1788:
/*!***************************************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/bem/scroll-top-button/scroll-top-button.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gsap */ 2642);\n/* harmony import */ var gsap_ScrollToPlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! gsap/ScrollToPlugin */ 9127);\n/* harmony import */ var _scroll_top_button_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scroll-top-button.scss */ 2310);\n\n\n\ngsap__WEBPACK_IMPORTED_MODULE_1__.gsap.registerPlugin(gsap_ScrollToPlugin__WEBPACK_IMPORTED_MODULE_2__.ScrollToPlugin);\ndocument.addEventListener(\"click\", function (event) {\n  let button = event.target.closest(\".scroll-top-button\");\n\n  if (button) {\n    gsap__WEBPACK_IMPORTED_MODULE_1__.gsap.to(window, {\n      duration: 0.3,\n      scrollTo: {\n        y: 0\n      }\n    });\n  }\n});\nwindow.addEventListener(\"scroll\", function () {\n  let button = document.querySelector(\".scroll-top-button\");\n\n  if (button) {\n    button.classList.toggle(\"show\", window.pageYOffset >= document.documentElement.clientHeight * .75);\n  }\n});\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/scroll-top-button/scroll-top-button.js?");

/***/ }),

/***/ 4942:
/*!*************************************************************!*\
  !*** ./paper_admin/static/paper_admin/src/js/changeform.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var js_utilities_form_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js/utilities/form_utils */ 4827);\n/* harmony import */ var components_select2__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! components/select2 */ 4027);\n/* harmony import */ var bem_paper_formset_paper_formset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bem/paper-formset/paper-formset */ 6775);\n/* harmony import */ var bem_scroll_top_button_scroll_top_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bem/scroll-top-button/scroll-top-button */ 1788);\n\n\n\n // Select2 для выпадающих списков\n\nconst select2_changeform = new components_select2__WEBPACK_IMPORTED_MODULE_1__.Select2Widget({\n  width: \"\",\n  allowClear: true\n});\nselect2_changeform.observe(\".select-field select\");\nselect2_changeform.initAll(\".select-field select\"); // Инициализация inline-форм\n\nlet formsets = [];\ndocument.querySelectorAll(\".paper-formset\").forEach(function (element) {\n  let formset = new bem_paper_formset_paper_formset__WEBPACK_IMPORTED_MODULE_2__.InlineFormset(element);\n  formset.updateButtonsState();\n  formsets.push(formset);\n}); // Установка значения поля сортировки перед сохранением.\n// Назначить сортировку сразу нельзя из-за того, что extra-формы не должны меняться.\n\ndocument.addEventListener(\"submit\", function () {\n  formsets.forEach(function (formset) {\n    let index = 0;\n    formset.getForms().forEach(function (form) {\n      if (form.classList.contains(\"has_original\") || js_utilities_form_utils__WEBPACK_IMPORTED_MODULE_0__.default.containsChangedField(form)) {\n        this.setFormOrder(form, index++);\n      }\n    }.bind(formset));\n  });\n});\n\n//# sourceURL=webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changeform.js?");

/***/ })

}]);