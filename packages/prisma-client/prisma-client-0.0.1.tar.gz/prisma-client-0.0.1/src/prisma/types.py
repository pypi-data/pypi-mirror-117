# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pylint: disable=all
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
import sys
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)

if sys.version_info >= (3, 8):
    from typing import TypedDict, Literal
else:
    from typing_extensions import TypedDict, Literal

# -- template types.py.jinja --
from .utils import _NoneType



# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortOrder = Literal['asc', 'desc']


    

class StringFilter(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    NOT: Union[str, 'StringFilterRecursive1']


class StringFilterRecursive1(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    NOT: Union[str, 'StringFilterRecursive2']


class StringFilterRecursive2(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    NOT: Union[str, 'StringFilterRecursive3']


class StringFilterRecursive3(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    NOT: Union[str, 'StringFilterRecursive4']


class StringFilterRecursive4(TypedDict, total=False):
    equals: str
    not_in: List[str]
    lt: str
    lte: str
    gt: str
    gte: str
    contains: str
    startswith: str
    endswith: str
    IN: List[str]
    
    

class DateTimeFilter(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    NOT: 'DateTimeFilterRecursive1'


class DateTimeFilterRecursive1(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    NOT: 'DateTimeFilterRecursive2'


class DateTimeFilterRecursive2(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    NOT: 'DateTimeFilterRecursive3'


class DateTimeFilterRecursive3(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    NOT: 'DateTimeFilterRecursive4'


class DateTimeFilterRecursive4(TypedDict, total=False):
    equals: datetime.datetime
    not_in: List[datetime.datetime]
    lt: datetime.datetime
    lte: datetime.datetime
    gt: datetime.datetime
    gte: datetime.datetime
    IN: List[datetime.datetime]
    

    

class BooleanFilter(TypedDict, total=False):
    equals: bool
    NOT: Union[bool, 'BooleanFilterRecursive1']


class BooleanFilterRecursive1(TypedDict, total=False):
    equals: bool
    NOT: Union[bool, 'BooleanFilterRecursive2']


class BooleanFilterRecursive2(TypedDict, total=False):
    equals: bool
    NOT: Union[bool, 'BooleanFilterRecursive3']


class BooleanFilterRecursive3(TypedDict, total=False):
    equals: bool
    NOT: Union[bool, 'BooleanFilterRecursive4']


class BooleanFilterRecursive4(TypedDict, total=False):
    equals: bool
    

    

class IntFilter(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    NOT: Union[int, 'IntFilterRecursive1']


class IntFilterRecursive1(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    NOT: Union[int, 'IntFilterRecursive2']


class IntFilterRecursive2(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    NOT: Union[int, 'IntFilterRecursive3']


class IntFilterRecursive3(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    NOT: Union[int, 'IntFilterRecursive4']


class IntFilterRecursive4(TypedDict, total=False):
    equals: int
    IN: List[int]
    not_in: List[int]
    lt: int
    lte: int
    gt: int
    gte: int
    

    

class FloatFilter(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    NOT: Union[float, 'FloatFilterRecursive1']


class FloatFilterRecursive1(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    NOT: Union[float, 'FloatFilterRecursive2']


class FloatFilterRecursive2(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    NOT: Union[float, 'FloatFilterRecursive3']


class FloatFilterRecursive3(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    NOT: Union[float, 'FloatFilterRecursive4']


class FloatFilterRecursive4(TypedDict, total=False):
    equals: float
    IN: List[float]
    not_in: List[float]
    lt: float
    lte: float
    gt: float
    gte: float
    

# Post types

class PostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Post create method"""
    id: str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    views: int
    desc: Optional[str]
    author: 'UserCreateNestedWithoutRelationsInput'
    categories: 'CategoryCreateManyNestedWithoutRelationsInput'


class PostCreateInput(PostOptionalCreateInput):
    """Required arguments to the Post create method"""
    title: str
    published: bool


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Post create method, without relations"""
    id: str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    views: int
    desc: Optional[str]


class PostCreateWithoutRelationsInput(PostOptionalCreateWithoutRelationsInput):
    """Required arguments to the Post create method, without relations"""
    title: str
    published: bool


class PostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'


class PostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PostCreateWithoutRelationsInput', List['PostCreateWithoutRelationsInput']]
    connect: Union['PostWhereUniqueInput', List['PostWhereUniqueInput']]


class PostWhereUniqueInput(TypedDict, total=False):
    """Unique Post arguments for searching"""
    id: str


class PostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    created_at: datetime.datetime
    updated_at: datetime.datetime
    title: str
    published: Union['PostUpdatepublishedInput', bool]
    views: Union['PostUpdateviewsInput', int]
    desc: Optional[str]
    author: 'UserUpdateOneWithoutRelationsInput'
    categories: 'CategoryUpdateManyWithoutRelationsInput'


class PostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: str
    created_at: datetime.datetime
    updated_at: datetime.datetime
    title: str
    published: Union['PostUpdatepublishedInput', bool]
    views: Union['PostUpdateviewsInput', int]
    desc: Optional[str]
    author: 'UserUpdateOneWithoutRelationsInput'
    categories: 'CategoryUpdateManyWithoutRelationsInput'


class PostUpdatepublishedInput(TypedDict, total=False):
    set: bool


class PostUpdateviewsInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int


class PostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PostCreateWithoutRelationsInput']
    connect: List['PostWhereUniqueInput']
    set: List['PostWhereUniqueInput']
    disconnect: List['PostWhereUniqueInput']
    delete: List['PostWhereUniqueInput']

    # TODO
    # update: List['PostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PostScalarWhereInput']
    # upsert: List['PostUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['PostCreateOrConnectWithoutRelationsInput']


class PostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PostCreateWithoutRelationsInput'
    connect: 'PostWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PostUpdateInput'
    # upsert: 'PostUpsertWithoutRelationsInput'
    # connectOrCreate: 'PostCreateOrConnectWithoutRelationsInput'


class PostUpsertInput(TypedDict):
    create: 'PostCreateInput'
    update: 'PostUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class PostOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    created_at: 'SortOrder'
    updated_at: 'SortOrder'
    title: 'SortOrder'
    published: 'SortOrder'
    views: 'SortOrder'
    desc: 'SortOrder'
    author_id: 'SortOrder'


# recursive Post types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see docs/limitations.md

PostRelationFilter = TypedDict(
    'PostRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PostListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PostInclude(TypedDict, total=False):
    """Post relational arguments"""
    author: Union[bool, 'UserArgsFromPost']
    categories: Union[bool, 'FindManyCategoryArgsFromPost']


    

class PostIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive1']


class PostIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive2']


class PostIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive3']


class PostIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    author: Union[bool, 'UserArgsFromPostRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromPostRecursive4']


class PostIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class PostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyPostArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']
    profile: Union[bool, 'ProfileArgsFromPostRecursive1']


class UserIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']
    profile: Union[bool, 'ProfileArgsFromPostRecursive2']


class UserIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']
    profile: Union[bool, 'ProfileArgsFromPostRecursive3']


class UserIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']
    profile: Union[bool, 'ProfileArgsFromPostRecursive4']


class UserIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class UserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyUserArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive1']


class CategoryIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive2']


class CategoryIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive3']


class CategoryIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    posts: Union[bool, 'FindManyPostArgsFromPostRecursive4']


class CategoryIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class CategoryArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyCategoryArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromPost(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive1']


class ProfileIncludeFromPostRecursive1(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive2']


class ProfileIncludeFromPostRecursive2(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive3']


class ProfileIncludeFromPostRecursive3(TypedDict, total=False):
    """Relational arguments for Post"""
    user: Union[bool, 'UserArgsFromPostRecursive4']


class ProfileIncludeFromPostRecursive4(TypedDict, total=False):
    """Relational arguments for Post"""

    

class ProfileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    
    

class FindManyProfileArgsFromPost(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromPostRecursive1(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromPostRecursive2(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromPostRecursive3(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromPostRecursive4(TypedDict, total=False):
    """Arguments for Post"""
    take: int
    skip: int
    order_by: Union['PostOrderByInput', List['PostOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    


FindManyPostArgs = FindManyPostArgsFromPost
FindFirstPostArgs = FindManyPostArgsFromPost


    

class PostWhereInput(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    AND: List['PostWhereInputRecursive1']
    OR: List['PostWhereInputRecursive1']
    NOT: List['PostWhereInputRecursive1']


class PostWhereInputRecursive1(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    AND: List['PostWhereInputRecursive2']
    OR: List['PostWhereInputRecursive2']
    NOT: List['PostWhereInputRecursive2']


class PostWhereInputRecursive2(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    AND: List['PostWhereInputRecursive3']
    OR: List['PostWhereInputRecursive3']
    NOT: List['PostWhereInputRecursive3']


class PostWhereInputRecursive3(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'

    AND: List['PostWhereInputRecursive4']
    OR: List['PostWhereInputRecursive4']
    NOT: List['PostWhereInputRecursive4']


class PostWhereInputRecursive4(TypedDict, total=False):
    """Post arguments for searching"""
    id: Union[str, 'types.StringFilter']
    created_at: Union[datetime.datetime, 'types.DateTimeFilter']
    updated_at: Union[datetime.datetime, 'types.DateTimeFilter']
    title: Union[str, 'types.StringFilter']
    published: Union[bool, 'types.BooleanFilter']
    views: Union[int, 'types.IntFilter']
    desc: Union[str, 'types.StringFilter']
    author: 'UserRelationFilter'
    author_id: Union[str, 'types.StringFilter']
    categories: 'CategoryListRelationFilter'



PostKeys = Literal[
    'id',
    'created_at',
    'updated_at',
    'title',
    'published',
    'views',
    'desc',
    'author',
    'author_id',
    'categories',
]

PostRelationalFieldKeys = Literal[
        'author',
        'categories',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: str
    posts: 'PostCreateManyNestedWithoutRelationsInput'
    profile: 'ProfileCreateNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    name: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: str


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    name: str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


class UserWhereUniqueInput(TypedDict, total=False):
    """Unique User arguments for searching"""
    id: str


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    name: str
    posts: 'PostUpdateManyWithoutRelationsInput'
    profile: 'ProfileUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: str
    name: str
    posts: 'PostUpdateManyWithoutRelationsInput'
    profile: 'ProfileUpdateOneWithoutRelationsInput'


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class UserOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    name: 'SortOrder'


# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see docs/limitations.md

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromUser']
    profile: Union[bool, 'ProfileArgsFromUser']


    

class PostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive1']


class PostIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive2']


class PostIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive3']


class PostIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUserRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromUserRecursive4']


class PostIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']
    profile: Union[bool, 'ProfileArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']
    profile: Union[bool, 'ProfileArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']
    profile: Union[bool, 'ProfileArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']
    profile: Union[bool, 'ProfileArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive1']


class CategoryIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive2']


class CategoryIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive3']


class CategoryIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    posts: Union[bool, 'FindManyPostArgsFromUserRecursive4']


class CategoryIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCategoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class ProfileIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class ProfileIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class ProfileIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class ProfileIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'

    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[str, 'types.StringFilter']
    name: Union[str, 'types.StringFilter']
    posts: 'PostListRelationFilter'
    profile: 'ProfileRelationFilter'



UserKeys = Literal[
    'id',
    'name',
    'posts',
    'profile',
]

UserRelationalFieldKeys = Literal[
        'posts',
        'profile',
    ]

# Category types

class CategoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Category create method"""
    id: int
    posts: 'PostCreateManyNestedWithoutRelationsInput'


class CategoryCreateInput(CategoryOptionalCreateInput):
    """Required arguments to the Category create method"""
    name: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CategoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Category create method, without relations"""
    id: int


class CategoryCreateWithoutRelationsInput(CategoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the Category create method, without relations"""
    name: str


class CategoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'


class CategoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CategoryCreateWithoutRelationsInput', List['CategoryCreateWithoutRelationsInput']]
    connect: Union['CategoryWhereUniqueInput', List['CategoryWhereUniqueInput']]


class CategoryWhereUniqueInput(TypedDict, total=False):
    """Unique Category arguments for searching"""
    id: int


class CategoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    posts: 'PostUpdateManyWithoutRelationsInput'
    name: str


class CategoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union['CategoryUpdateidInput', int]
    posts: 'PostUpdateManyWithoutRelationsInput'
    name: str


class CategoryUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int


class CategoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CategoryCreateWithoutRelationsInput']
    connect: List['CategoryWhereUniqueInput']
    set: List['CategoryWhereUniqueInput']
    disconnect: List['CategoryWhereUniqueInput']
    delete: List['CategoryWhereUniqueInput']

    # TODO
    # update: List['CategoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CategoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CategoryScalarWhereInput']
    # upsert: List['CategoryUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['CategoryCreateOrConnectWithoutRelationsInput']


class CategoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CategoryCreateWithoutRelationsInput'
    connect: 'CategoryWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CategoryUpdateInput'
    # upsert: 'CategoryUpsertWithoutRelationsInput'
    # connectOrCreate: 'CategoryCreateOrConnectWithoutRelationsInput'


class CategoryUpsertInput(TypedDict):
    create: 'CategoryCreateInput'
    update: 'CategoryUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class CategoryOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    name: 'SortOrder'


# recursive Category types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see docs/limitations.md

CategoryRelationFilter = TypedDict(
    'CategoryRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CategoryListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CategoryInclude(TypedDict, total=False):
    """Category relational arguments"""
    posts: Union[bool, 'FindManyPostArgsFromCategory']


    

class PostIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive1']


class PostIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive2']


class PostIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive3']


class PostIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    author: Union[bool, 'UserArgsFromCategoryRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromCategoryRecursive4']


class PostIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class PostArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyPostArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive1']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive1']


class UserIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive2']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive2']


class UserIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive3']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive3']


class UserIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive4']
    profile: Union[bool, 'ProfileArgsFromCategoryRecursive4']


class UserIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class UserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyUserArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive1']


class CategoryIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive2']


class CategoryIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive3']


class CategoryIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    posts: Union[bool, 'FindManyPostArgsFromCategoryRecursive4']


class CategoryIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class CategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyCategoryArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromCategory(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive1']


class ProfileIncludeFromCategoryRecursive1(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive2']


class ProfileIncludeFromCategoryRecursive2(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive3']


class ProfileIncludeFromCategoryRecursive3(TypedDict, total=False):
    """Relational arguments for Category"""
    user: Union[bool, 'UserArgsFromCategoryRecursive4']


class ProfileIncludeFromCategoryRecursive4(TypedDict, total=False):
    """Relational arguments for Category"""

    

class ProfileArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    
    

class FindManyProfileArgsFromCategory(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromCategoryRecursive1(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromCategoryRecursive2(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromCategoryRecursive3(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromCategoryRecursive4(TypedDict, total=False):
    """Arguments for Category"""
    take: int
    skip: int
    order_by: Union['CategoryOrderByInput', List['CategoryOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    


FindManyCategoryArgs = FindManyCategoryArgsFromCategory
FindFirstCategoryArgs = FindManyCategoryArgsFromCategory


    

class CategoryWhereInput(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    AND: List['CategoryWhereInputRecursive1']
    OR: List['CategoryWhereInputRecursive1']
    NOT: List['CategoryWhereInputRecursive1']


class CategoryWhereInputRecursive1(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    AND: List['CategoryWhereInputRecursive2']
    OR: List['CategoryWhereInputRecursive2']
    NOT: List['CategoryWhereInputRecursive2']


class CategoryWhereInputRecursive2(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    AND: List['CategoryWhereInputRecursive3']
    OR: List['CategoryWhereInputRecursive3']
    NOT: List['CategoryWhereInputRecursive3']


class CategoryWhereInputRecursive3(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']

    AND: List['CategoryWhereInputRecursive4']
    OR: List['CategoryWhereInputRecursive4']
    NOT: List['CategoryWhereInputRecursive4']


class CategoryWhereInputRecursive4(TypedDict, total=False):
    """Category arguments for searching"""
    id: Union[int, 'types.IntFilter']
    posts: 'PostListRelationFilter'
    name: Union[str, 'types.StringFilter']



CategoryKeys = Literal[
    'id',
    'posts',
    'name',
]

CategoryRelationalFieldKeys = Literal[
        'posts',
    ]

# Profile types

class ProfileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Profile create method"""
    id: int
    user: 'UserCreateNestedWithoutRelationsInput'


class ProfileCreateInput(ProfileOptionalCreateInput):
    """Required arguments to the Profile create method"""
    bio: str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ProfileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Profile create method, without relations"""
    id: int


class ProfileCreateWithoutRelationsInput(ProfileOptionalCreateWithoutRelationsInput):
    """Required arguments to the Profile create method, without relations"""
    bio: str


class ProfileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'


class ProfileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ProfileCreateWithoutRelationsInput', List['ProfileCreateWithoutRelationsInput']]
    connect: Union['ProfileWhereUniqueInput', List['ProfileWhereUniqueInput']]


class ProfileWhereUniqueInput(TypedDict, total=False):
    """Unique Profile arguments for searching"""
    id: int


class ProfileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    user: 'UserUpdateOneWithoutRelationsInput'
    bio: str


class ProfileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union['ProfileUpdateidInput', int]
    user: 'UserUpdateOneWithoutRelationsInput'
    bio: str


class ProfileUpdateidInput(TypedDict, total=False):
    set: int
    increment: int
    decrement: int
    multiply: int
    divide: int


class ProfileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ProfileCreateWithoutRelationsInput']
    connect: List['ProfileWhereUniqueInput']
    set: List['ProfileWhereUniqueInput']
    disconnect: List['ProfileWhereUniqueInput']
    delete: List['ProfileWhereUniqueInput']

    # TODO
    # update: List['ProfileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ProfileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ProfileScalarWhereInput']
    # upsert: List['ProfileUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['ProfileCreateOrConnectWithoutRelationsInput']


class ProfileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ProfileCreateWithoutRelationsInput'
    connect: 'ProfileWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ProfileUpdateInput'
    # upsert: 'ProfileUpsertWithoutRelationsInput'
    # connectOrCreate: 'ProfileCreateOrConnectWithoutRelationsInput'


class ProfileUpsertInput(TypedDict):
    create: 'ProfileCreateInput'
    update: 'ProfileUpdateInput'  # pyright: reportIncompatibleMethodOverride=false


class ProfileOrderByInput(TypedDict, total=False):
    id: 'SortOrder'
    user_id: 'SortOrder'
    bio: 'SortOrder'


# recursive Profile types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see docs/limitations.md

ProfileRelationFilter = TypedDict(
    'ProfileRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ProfileListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ProfileInclude(TypedDict, total=False):
    """Profile relational arguments"""
    user: Union[bool, 'UserArgsFromProfile']


    

class PostIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive1']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive1']


class PostIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive2']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive2']


class PostIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive3']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive3']


class PostIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    author: Union[bool, 'UserArgsFromProfileRecursive4']
    categories: Union[bool, 'FindManyCategoryArgsFromProfileRecursive4']


class PostIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class PostArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive1'


class PostArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive2'


class PostArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive3'


class PostArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'PostIncludeFromPostRecursive4'


class PostArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyPostArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive1'


class FindManyPostArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive2'


class FindManyPostArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive3'


class FindManyPostArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    include: 'PostIncludeFromPostRecursive4'


class FindManyPostArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'PostWhereInput'
    cursor: 'PostWhereUniqueInput'
    
    

class UserIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive1']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive1']


class UserIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive2']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive2']


class UserIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive3']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive3']


class UserIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive4']
    profile: Union[bool, 'ProfileArgsFromProfileRecursive4']


class UserIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class UserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyUserArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    
    

class CategoryIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive1']


class CategoryIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive2']


class CategoryIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive3']


class CategoryIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    posts: Union[bool, 'FindManyPostArgsFromProfileRecursive4']


class CategoryIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class CategoryArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive1'


class CategoryArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive2'


class CategoryArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive3'


class CategoryArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'CategoryIncludeFromCategoryRecursive4'


class CategoryArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyCategoryArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive1'


class FindManyCategoryArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive2'


class FindManyCategoryArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive3'


class FindManyCategoryArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    include: 'CategoryIncludeFromCategoryRecursive4'


class FindManyCategoryArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'CategoryWhereInput'
    cursor: 'CategoryWhereUniqueInput'
    
    

class ProfileIncludeFromProfile(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive1']


class ProfileIncludeFromProfileRecursive1(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive2']


class ProfileIncludeFromProfileRecursive2(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive3']


class ProfileIncludeFromProfileRecursive3(TypedDict, total=False):
    """Relational arguments for Profile"""
    user: Union[bool, 'UserArgsFromProfileRecursive4']


class ProfileIncludeFromProfileRecursive4(TypedDict, total=False):
    """Relational arguments for Profile"""

    

class ProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive1'


class ProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive2'


class ProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive3'


class ProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    include: 'ProfileIncludeFromProfileRecursive4'


class ProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    
    

class FindManyProfileArgsFromProfile(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive1'


class FindManyProfileArgsFromProfileRecursive1(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive2'


class FindManyProfileArgsFromProfileRecursive2(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive3'


class FindManyProfileArgsFromProfileRecursive3(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    include: 'ProfileIncludeFromProfileRecursive4'


class FindManyProfileArgsFromProfileRecursive4(TypedDict, total=False):
    """Arguments for Profile"""
    take: int
    skip: int
    order_by: Union['ProfileOrderByInput', List['ProfileOrderByInput']]
    where: 'ProfileWhereInput'
    cursor: 'ProfileWhereUniqueInput'
    


FindManyProfileArgs = FindManyProfileArgsFromProfile
FindFirstProfileArgs = FindManyProfileArgsFromProfile


    

class ProfileWhereInput(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    AND: List['ProfileWhereInputRecursive1']
    OR: List['ProfileWhereInputRecursive1']
    NOT: List['ProfileWhereInputRecursive1']


class ProfileWhereInputRecursive1(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    AND: List['ProfileWhereInputRecursive2']
    OR: List['ProfileWhereInputRecursive2']
    NOT: List['ProfileWhereInputRecursive2']


class ProfileWhereInputRecursive2(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    AND: List['ProfileWhereInputRecursive3']
    OR: List['ProfileWhereInputRecursive3']
    NOT: List['ProfileWhereInputRecursive3']


class ProfileWhereInputRecursive3(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']

    AND: List['ProfileWhereInputRecursive4']
    OR: List['ProfileWhereInputRecursive4']
    NOT: List['ProfileWhereInputRecursive4']


class ProfileWhereInputRecursive4(TypedDict, total=False):
    """Profile arguments for searching"""
    id: Union[int, 'types.IntFilter']
    user: 'UserRelationFilter'
    user_id: Union[str, 'types.StringFilter']
    bio: Union[str, 'types.StringFilter']



ProfileKeys = Literal[
    'id',
    'user',
    'user_id',
    'bio',
]

ProfileRelationalFieldKeys = Literal[
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models