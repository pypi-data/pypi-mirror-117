{"version":"NotebookV1","origId":2064366854103185,"name":"BatchTransformation","language":"python","commands":[{"version":"CommandV1","origId":2064366854103186,"guid":"b323cb69-1e1e-4785-a9a6-4817e1fb581d","subtype":"command","commandType":"auto","position":2.0,"command":"%md\n<img align=\"left\" src=\"https://global.hitachi-solutions.com/-/media/Images/Logos/hitachi-solutions-logo.svg\" alt=\"Hitachi Logo\" width=\"300\"/>\n### Notebook Info\nDescription | Comment\n-------------- | -----------\nName | BatchTransformation\nPurpose | This notebook BATCH transforms tables from one schema to another, using a config-based set of transformations.\n|The primary use case for the **Transformation Engine** is to convert the \"rawW _Base Tables_ into a more\n|business-friendly schema at the Operator level (_Operator_Stage_ schema).\n|This notebook also performs **Code Mapping**, which adds additional columns for translating non-standard codes into standardized descriptions.\n|&nbsp; &nbsp; &nbsp; _{column}__RAW (Original code-mapped column is renamed to RAW)_\n|&nbsp; &nbsp; &nbsp; _{column}__PC  (Portfolio Company description)_\n|&nbsp; &nbsp; &nbsp; _{column}__AC  (Asset Class description)_\n|&nbsp; &nbsp; &nbsp; _{column}__ENT (Enterprise description)_\nAuthor |  Larry Edlin, ledlin@hitachisolutions.com<br>\nLast Updated| 3/30/2021<br>\nLast Updated By | LE\n\n### Input Parameters\nParameter Name | Description\n-------------- | -----------\nAdhoc Mode | Optional - Used for Testing transformations without writing tables (default=FALSE)<br>\nExecute Query | Optional - used for testing purposes. (default=TRUE)<br>\nFileParams   | Required - Path to config file containing tables to process, transformations and code mappings.<br>\n|Optionally, a key-value pair JSON config of same can be used in lieu of a file, however, there are<br> \n|limitations on the size that can be passed in (10,000 bytes for all parameters combined).<br>\n\n### Output Parameters\nOutputs path to file containing the following structure:\n\nColumn Name | Description\n----------- | -----------\nSchema|Name of Target Schema\nTable| Name of Target Table\nStartTimeUtc| Object Processing Start Time\nEndTimeUtc| Object Processing End Time\nAdditionalOutput|Path to Unmapped Codes\nSuccess| 0 (failure) or 1 (success)\nError| Error message \n\n###TO DO:\nNr|Description\n----|----\n1|\n2|","commandVersion":3,"state":"finished","results":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"221e8684-03c8-4cd3-a52e-36bf1612ac3c"},{"version":"CommandV1","origId":2064366854103187,"guid":"bc431314-b047-4e9e-ac3d-e74add796e92","subtype":"command","commandType":"auto","position":3.0,"command":"from datetime import datetime\nimport time\n#from pyspark.sql import Row\n#from pyspark.sql.types import *\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.window import * #import Window\nfrom builtins import max as py_max  ## Alias the Python MAX function due to collision with pyspark MAX function\n#import os #for adding filename to dataframe\nimport json #Optionally supports JSON-formatted parameter vs CSV file\nimport pandas as pd #Used to greatly simplify converting JSON payload into a dataframe\nfrom concurrent.futures import ThreadPoolExecutor\n#import random\nimport ast\n\n# Necessary SESSION-level setting for automatic schema update\nspark.conf.set(\"spark.databricks.delta.schema.autoMerge\", \"true\")\n\n# Necessary SESSION-level setting due to changes in Spark 3.0 date/time parsing\n# The alternative is fixing all transformations with string->date parsing\nspark.conf.set(\"spark.sql.legacy.timeParserPolicy\", \"legacy\")\n\n# Set column display width for Pandas dataframe\npd.set_option('display.max_colwidth', 60)\n\n# Initialize global lists\nbatch_errors  = [] # list of generated errors\nbatch_queries = [] # list of TE generated queries\nexecution_log = []\ntables = [] #list of TE class instances\noutFile = \"\"\noutfile_schema = ['Schema','Table','StartTimeUtc','EndTimeUtc','AdditionalOutput','Success','ErrorMessage']\n\n#dbutils.widgets.removeAll()\ndbutils.widgets.text(\"FileParams\",\"\")\ndbutils.widgets.dropdown(\"Adhoc Mode\", \"FALSE\", [\"TRUE\", \"FALSE\"])\ndbutils.widgets.dropdown(\"Execute Query\", \"TRUE\", [\"TRUE\", \"FALSE\"])\n\nADHOC_MODE = eval(dbutils.widgets.get(\"Adhoc Mode\").title())\nEXECUTE_QUERY = eval(dbutils.widgets.get(\"Execute Query\").title())\nfp = dbutils.widgets.get(\"FileParams\")\n\nprint('Adhoc Mode:\\t', ADHOC_MODE)\nprint('Execute query:\\t', EXECUTE_QUERY)\nprint('Parameter file:\\t', fp)","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Adhoc Mode:\t False\nExecute query:\t True\nParameter file:\t TE/te_batch_cortex.csv\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{"Execute Query":"TRUE","Adhoc Mode":"FALSE","FileParams":"TE/te_batch_cortex.csv"},"addedWidgets":{"Execute Query":{"widgetType":"dropdown","name":"Execute Query","defaultValue":"TRUE","label":null,"options":{"widgetType":"dropdown","choices":["TRUE","FALSE"]}},"Adhoc Mode":{"widgetType":"dropdown","name":"Adhoc Mode","defaultValue":"FALSE","label":null,"options":{"widgetType":"dropdown","choices":["TRUE","FALSE"]}},"FileParams":{"widgetType":"text","name":"FileParams","defaultValue":"","label":null,"options":{"widgetType":"text","validationRegex":null}}},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067436908,"submitTime":1625067436469,"finishTime":1625067436983,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Libraries, Constants, Widgets and Settings","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b96a8e5b-6724-4858-b79f-ae83f88861eb"},{"version":"CommandV1","origId":2064366854103188,"guid":"fa90e1d0-c477-417a-aeb8-82acede6ffe8","subtype":"command","commandType":"auto","position":4.0,"command":"%run /DataEngineering/ClassModules/cls_transformation_engine","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067436473,"submitTime":1625067436473,"finishTime":1625067437600,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Load Transformation Engine Class","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a38ce852-c5e1-46b9-bddb-19be7467bc61"},{"version":"CommandV1","origId":2064366854103189,"guid":"60aa289f-3759-4c1a-932b-658778a28588","subtype":"command","commandType":"auto","position":5.0,"command":"%run /DataEngineering/ClassModules/cls_utils","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067436490,"submitTime":1625067436490,"finishTime":1625067437622,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Load Shared Utilities Class","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"72c598eb-0e4b-4590-b028-736edcdee3b6"},{"version":"CommandV1","origId":2064366854103190,"guid":"9acd993e-c8b8-4f52-a723-fa1788230333","subtype":"command","commandType":"auto","position":6.0,"command":"# Instantiate the Utils library\nutilsLib = Utils()","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437579,"submitTime":1625067436498,"finishTime":1625067437595,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ffcb07f6-7963-40da-8681-aa0cb6fc3860"},{"version":"CommandV1","origId":2064366854103191,"guid":"21e75ed1-41d8-48ab-9b5f-9dfe56e621e6","subtype":"command","commandType":"auto","position":7.0,"command":"cores_per_node        = utilsLib.get_cores_per_node()\ncluster_cores         = utilsLib.get_cluster_cores()\ncluster_memory        = utilsLib.get_cluster_memory()\ncluster_workers       = py_max(utilsLib.get_number_of_workers(), 1)\nmemory_per_node_bytes = utilsLib.get_executor_memory() * 1024 * 1024 # bytes\ntotal_worker_memory   = cluster_workers * memory_per_node_bytes\n\n# Set Shuffle Partitions based on number of CPUs in worker nodes\nshuffle_partitions = (cluster_workers * cores_per_node) * 4\nspark.conf.set(\"spark.sql.shuffle.partitions\", shuffle_partitions)\n\n\n###########################################################\n# calculate_batch_processing_parameters\n###########################################################\ndef calculate_batch_processing_parameters():\n\n    sourcefilecount = batch_cfg_df.count()\n    parallel_execs = int((cluster_workers * cores_per_node))\n\n    print(\"\\n***********BATCH PROCESSING METRICS************\")\n    print(\"    Number of Transformations in Batch\\t:\", sourcefilecount)\n    print(\"    Executor Memory Available Bytes\\t:\", memory_per_node_bytes)\n    print(\"    Total Cluster CPUs Available\\t:\", (cluster_workers * cores_per_node))\n    print(\"    Parallel processes\\t\\t\\t:\", parallel_execs)\n    print(\"*********END BATCH PROCESSING METRICS**********\\n\")\n    \n    return parallel_execs\n","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437597,"submitTime":1625067436503,"finishTime":1625067437938,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Calculate Metrics for Parallelization","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b01c6133-399e-422e-a07f-ae10cf2e2a06"},{"version":"CommandV1","origId":2064366854103192,"guid":"c0e5716c-6f4f-4877-9ad8-27ccb619a0ac","subtype":"command","commandType":"auto","position":8.0,"command":"###########################################################\n# load_batch_config\n# Parse the FileParams parameter to determine if it is JSON \n# or a reference to a CSV file, then load into dictionary\n###########################################################\ndef load_batch_config (config):\n    batch_cfg_df = None\n    \n    # Try to parse FileParams to see if it's JSON, if not, assume it's a file path\n    if config:\n        try:\n            file_params = json.loads(config)\n        except:\n            file_params = config\n            pass\n    else:\n        #raise ValueError(\"The fileParams parameter must be provided!\") \n        print(\"The fileParams parameter must be provided!\")\n        return None\n\n    if file_params:\n        # First let's see if this parses as JSON\n        try:\n            # Use Pandas for easy conversion of JSON to dataframe\n            pdf = pd.DataFrame(file_params)\n            # Then convert to Spark Dataframe\n            batch_cfg_df = spark.createDataFrame(pdf)\n\n        #Not JSON, so assuming a file reference\n        except:\n            if \"filestore\" in file_params.lower():\n                params_file = file_params\n            else:\n                #Add Databricks/dbfs root mount point to file name\n                args = [\"mnt\", file_params]\n                theFile = utilsLib.slash_join(args, True)  # handles existing leading slash (or not)\n                params_file = theFile\n\n            if not utilsLib.file_exists(params_file):\n                return None\n\n            print(f\"{datetime.now():%Y-%m-%d %H:%M:%S}::Loading BATCH configuration file from {file_params}...\")\n\n            # Read the file\n            if params_file.endswith(\".csv\"):\n                batch_cfg_df = (spark \n                            .read \n                            .format('csv') \n                            .option(\"header\", \"true\") \n                            .option(\"inferSchema\", \"true\") \n                            .load(params_file)\n                          )\n\n            if batch_cfg_df.count() == 0:\n                return None\n\n        batch_cfg_df = batch_cfg_df.withColumn(\"rownum\", row_number().over(Window.orderBy(monotonically_increasing_id())))\n\n        # Convert column names to lower case so that's not an issue\n        batch_cfg_df = batch_cfg_df.select([col(x).alias(x.lower()) for x in batch_cfg_df.columns])\n\n        if \"codemaptable\" not in batch_cfg_df.columns:\n            batch_cfg_df = batch_cfg_df.withColumn(\"codemaptable\", lit(None))\n\n    return batch_cfg_df\n\n###########################################################\n# transform_table\n###########################################################\ndef process_transformation(table):\n    \"\"\"\n    ***Used by parallel_transformation function for parallelizing loads***\n    \n    Processes the base table with transformations.\n    Performs code mapping (if exists)\n    Writes data to 3nfstage\n     - Creates schema if it does not exist\n     - Creates or overwrites table in Delta format (managed table)\n    \"\"\"\n    \n    # Perform transformation\n    table.transform_table(EXECUTE_QUERY)\n    \n    return\n  \n###########################################################\n# write_output_file\n###########################################################\ndef write_output_file(source_file):\n    \"\"\"\n    Generate the output file with an entry for each file processed\n    \"\"\"\n    # Quoting constant for writing CSV with Pandas \n    QUOTE_NONNUMERIC = 2\n\n    #col_list = ['DeltaSchema','DeltaTable','DeltaStartTimeUtc','DeltaEndTimeUtc','DeltaAdditionalOutput','DeltaSuccess','DeltaError']\n    # Return batch errors as JSON \n    if batch_errors:\n        pdf = pd.DataFrame(batch_errors, columns = outfile_schema).reindex()\n\n        # Convert column to Int\n        pdf['Success'] = pdf['Success'].astype(int)\n\n        # Generate error log file name, based on input file\n        output_file = source_file.replace(\".csv\", \"_OUTPUTLOG.csv\")\n        \n        # Add dbfs/mnt/ to file path\n        saveLocationParts = [\"dbfs\", \"mnt\", output_file]\n        saveLocation = utilsLib.slash_join(saveLocationParts, True) \n\n        # Write out file using Pandas for a single CSV file (without extra Spark metadata folder/files)\n        if not pdf.empty:\n            pdf[outfile_schema].to_csv(saveLocation, sep=\"|\", index=False, quotechar='\"', quoting=QUOTE_NONNUMERIC)\n            output_file = output_file.replace(\"/dbfs/mnt/\", \"\")\n    else:\n        output_file = \"\"\n\n    return output_file\n  \n###########################################################\n# parallel_transformation\n###########################################################\ndef parallelize_transformation(tables, parallel_processes):\n    \"\"\"\n    Main logic for parallel execution of transformations\n    Ref:  https://docs.python.org/3/library/concurrent.futures.html\n    \"\"\"\n    # This code limits the number of parallel executions.\n    # For each file (class) object, execute \"transform_table\" function in parallel\n    with ThreadPoolExecutor(max_workers=parallel_processes) as executor:\n      return [executor.submit(process_transformation, table) for table in tables] # if file not in process_queue]\n\n###########################################################\n# process_transformations\n###########################################################\ndef process_transformations(params_dict, fp):\n  \n    print(f\"{datetime.now():%Y-%m-%d %H:%M:%S}::Batch transformation starting...\")\n\n    # Create empty list that will contain class instances of each table to be transformed\n    #tables = []\n\n    file_count = len(params_dict[\"configtable\"])\n    \n    # Create class instances for each file in the dictionary\n    for i in range(0, file_count):\n        tables.append(\n                TransformationEngine(\n                  configTable = params_dict[\"configtable\"][i],\n                  codemapTable = params_dict[\"codemaptable\"][i],\n                  operator = params_dict[\"operator\"][i],\n                  deltaObjectName = params_dict[\"targetobject\"][i],\n                  deltaSchemaName = params_dict[\"targetschema\"][i],\n                  rowNum = params_dict[\"rownum\"][i]\n                )\n        )\n        \n    # Parallel execution\n    res = parallelize_transformation(tables, parallel_processes)\n    result = [f.result(timeout=3600) for f in res] # This is a blocking call.\n    \n    # Create empty list to accumulate run times per object\n    run_times = []\n    \n    for table in tables:\n\n        #Clear cached dataframes \n        try:\n            table.transformedDf.unpersist()\n        except:\n            pass\n        try:\n            table.configTableDf.unpersist()\n        except:\n            pass\n        try:\n            table.codemapTableDf.unpersist()\n        except:\n            pass\n        \n        if table.transformationQuery:\n            batch_queries.append(table.transformationQuery)\n            \n        if table.errorLog:\n            for err in table.errorLog:\n                batch_errors.append(err.split(\"|\"))\n\n        if not table.endTimeUtc:\n            table.endTimeUtc = datetime.utcnow()\n        \n        if hasattr(table, 'rowCount'):\n            row_count = table.rowCount\n        else:\n            row_count = 0\n        run_times.append(f\"  {table.deltaSchemaName.upper()}.{table.deltaObjectName.upper().ljust(40,'.')} :: {row_count:>10,} records :: {((table.endTimeUtc-table.startTimeUtc).total_seconds()):>6.1f} seconds\")\n\n    print(f\"{datetime.now():%Y-%m-%d %H:%M:%S}::Batch transformation completed!\")\n\n    print(\"\")\n\n    # Print execution times per table\n    run_times = sorted(run_times)\n    print(\"Execution times per target object:\")\n    print(\"----------------------------------\")\n    for rt in run_times:\n        print(rt)\n    print(\"----------------------------------\")\n\n    print(\"\")\n    # Print out batch log\n    print(\"\\nBatch Output:\")\n    print(\"----------------------------------\")\n    try:\n        # Print dataframe with headers, and no row indexes\n        print(pd.DataFrame(batch_errors, None, outfile_schema).to_string(index=False))\n    except:\n        pass\n    print(\"----------------------------------\")\n    \n    # If file passed in as param, assume running in pipeline\n    if not ADHOC_MODE:\n        # Generate output file\n        out = write_output_file(fp)\n        print(\"\")\n        print(f\"Batch Transformation Output file has been written to: {out}\")\n    # Otherwise this is Adhoc mode - just return log and query\n    else: \n        \n        # Build JSON string for output    \n        out = f\"\"\"{{\"SQLQuery\":{batch_queries}, \"Log\":{execution_log}}}\"\"\"\n\n    return out\n","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437941,"submitTime":1625067436507,"finishTime":1625067438017,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Notebook functions","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"121f12d2-c10b-4d79-98b4-3091c08e3bc9"},{"version":"CommandV1","origId":2064366854103193,"guid":"c89ea74e-06ec-49cf-bc63-ac9d11fdd06e","subtype":"command","commandType":"auto","position":9.0,"command":"%md\n### Execute Notebook","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"db3b74c6-5984-40a1-8073-e202fb28fb4c"},{"version":"CommandV1","origId":2064366854103194,"guid":"26f6564f-6fa5-478a-bcba-06652314a8b0","subtype":"command","commandType":"auto","position":10.0,"command":"batch_cfg_df = None\nparams_dict = None\n\nif __name__ == '__main__':\n \n    # Get widget/param value\n    fp = dbutils.widgets.get(\"FileParams\")\n    \n    # Load config file\n    batch_cfg_df = load_batch_config(fp)\n    \n    \n    if batch_cfg_df:\n        # Create a dictionary object from dataframe to iterate though\n        params_dict = utilsLib.dict_from_dataframe(batch_cfg_df.sort(\"rownum\"))\n\n        # Calculate number of parallel executions\n        parallel_processes = calculate_batch_processing_parameters()\n    \n    print(params_dict)\n    # If we successfully loaded config, process transformationi\n    if params_dict:\n        outFile = process_transformations(params_dict, fp)\n    else:\n        execution_log.append(\"Missing or unable to read BATCH configuration/parameters!\")\n        outFile = f\"\"\"{{\"SQLQuery\":{batch_queries}, \"Log\":{execution_log}}}\"\"\"\n","commandVersion":15,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">2021-06-30 15:37:18::Loading BATCH configuration file from TE/te_batch_cortex.csv...\n\n***********BATCH PROCESSING METRICS************\n    Number of Transformations in Batch\t: 2\n    Executor Memory Available Bytes\t: 89293586432\n    Total Cluster CPUs Available\t: 16\n    Parallel processes\t\t\t: 16\n*********END BATCH PROCESSING METRICS**********\n\n{&#39;operator&#39;: (&#39;TestTE&#39;, &#39;TestTE&#39;), &#39;targetschema&#39;: (&#39;empower_stage&#39;, &#39;empower_stage&#39;), &#39;targetobject&#39;: (&#39;tmp_dim_dim_legal_entity&#39;, &#39;tmp_dim_dim_product&#39;), &#39;codemaptable&#39;: (None, None), &#39;configtable&#39;: (&#39;TE/empower_supplychain_transformation_rule.csv&#39;, &#39;TE/empower_supplychain_transformation_rule.csv&#39;), &#39;rownum&#39;: (1, 2)}\n2021-06-30 15:37:19::Batch transformation starting...\n2021-06-30 15:37:19::Loading configuration file from TE/empower_supplychain_transformation_rule.csv for table EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT...\n2021-06-30 15:37:19::Loading configuration file from TE/empower_supplychain_transformation_rule.csv for table EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY...\n2021-06-30 15:37:20::10 configuration records were found for target table: EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY\n2021-06-30 15:37:20::33 configuration records were found for target table: EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT\n2021-06-30 15:37:20::Processing transformations for target table: EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT\n2021-06-30 15:37:20::Processing transformations for target table: EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY\n2021-06-30 15:37:29::Testing query for table EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY...\n2021-06-30 15:37:29::Testing query for table EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT...\n2021-06-30 15:37:29::Query tested successfully for table EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY!\n2021-06-30 15:37:29::Creating table: EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY\n2021-06-30 15:37:29::Query tested successfully for table EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT!\n2021-06-30 15:37:29::Creating table: EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT\n2021-06-30 15:37:33::Created table: EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY\n2021-06-30 15:37:34::Created table: EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT\n2021-06-30 15:37:34::Batch transformation completed!\n\nExecution times per target object:\n----------------------------------\n  EMPOWER_STAGE.TMP_DIM_DIM_LEGAL_ENTITY................ ::          2 records ::   14.2 seconds\n  EMPOWER_STAGE.TMP_DIM_DIM_PRODUCT..................... ::      8,328 records ::   15.0 seconds\n----------------------------------\n\n\nBatch Output:\n----------------------------------\n        Schema                     Table         StartTimeUtc           EndTimeUtc AdditionalOutput Success ErrorMessage\n empower_stage  tmp_dim_dim_legal_entity  2021-06-30 15:37:19  2021-06-30 15:37:33                        1             \n empower_stage       tmp_dim_dim_product  2021-06-30 15:37:19  2021-06-30 15:37:34                        1             \n----------------------------------\n\nBatch Transformation Output file has been written to: TE/te_batch_cortex_OUTPUTLOG.csv\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{"FileParams":"TE/te_batch_cortex.csv"},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"batch_cfg_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"operator","nullable":true,"type":"string"},{"metadata":{},"name":"targetschema","nullable":true,"type":"string"},{"metadata":{},"name":"targetobject","nullable":true,"type":"string"},{"metadata":{},"name":"codemaptable","nullable":true,"type":"string"},{"metadata":{},"name":"configtable","nullable":true,"type":"string"},{"metadata":{},"name":"rownum","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null}],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067438020,"submitTime":1625067436525,"finishTime":1625067454473,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f415dc99-719c-4017-a52b-921ded4b0f31"},{"version":"CommandV1","origId":2064366854103195,"guid":"52f9b6b5-7d4a-4a3d-b363-9f77157b98fd","subtype":"command","commandType":"auto","position":11.0,"command":"%md\n### Clean Up temporary views","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"0a741b7f-7cc3-4bf5-9fa3-9cdd6e99b377"},{"version":"CommandV1","origId":2064366854103196,"guid":"a0f56a30-ea66-41e1-b420-5ba4dbfa80f3","subtype":"command","commandType":"auto","position":12.0,"command":"print(\"Dropping temporary views...\")\ntry:\n    for table in tables:\n        try:\n            # Clear cached dataframe \n            table.transformedDf.unpersist()\n        except:\n            pass\n      \n        # Get list of temporary views\n        vwdf = spark.sql(f\"show tables in {table.deltaSchemaName}\").filter(\"isTemporary = true\")\n        view_list = vwdf.filter(vwdf[\"tableName\"].startswith(f\"vw_{table.deltaObjectName.lower()}\")).select(\"tableName\").collect()\n        for vw in view_list:\n            vw_name = vw[\"tableName\"].lower()\n            sql = f\"DROP VIEW {vw_name}\"\n            print(f\"   > DROPPING VIEW {vw_name}...\")\n            try:\n                spark.sql(sql)\n            except:\n                pass        \nexcept:\n    pass","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">Dropping temporary views...\n   &gt; DROPPING VIEW vw_tmp_dim_dim_legal_entity_545564...\n   &gt; DROPPING VIEW vw_tmp_dim_dim_product_800658...\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"vwdf","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"database","nullable":false,"type":"string"},{"metadata":{},"name":"tableName","nullable":false,"type":"string"},{"metadata":{},"name":"isTemporary","nullable":false,"type":"boolean"}],"type":"struct"},"tableIdentifier":null}],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067454476,"submitTime":1625067436542,"finishTime":1625067454949,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7fa166fa-3680-4946-bcbb-96acfebf3aa5"},{"version":"CommandV1","origId":2064366854103197,"guid":"d88875ce-356d-48bd-be36-375aba4cc96a","subtype":"command","commandType":"auto","position":13.0,"command":"try:\n    pdf = pd.DataFrame(params_dict)\n    display(pdf)\nexcept:\n    print(params_dict)","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\">/databricks/spark/python/pyspark/sql/pandas/conversion.py:300: UserWarning: createDataFrame attempted Arrow optimization because &#39;spark.sql.execution.arrow.pyspark.enabled&#39; is set to true; however, failed by the reason below:\n  Unable to convert the field codemaptable. If this column is not necessary, you may consider dropping it or converting to primitive type before the conversion.\nContext: Unsupported type in conversion from Arrow: null\nAttempting non-optimization as &#39;spark.sql.execution.arrow.pyspark.fallback.enabled&#39; is set to true.\n  warnings.warn(msg)\n{&#39;operator&#39;: (&#39;TestTE&#39;, &#39;TestTE&#39;), &#39;targetschema&#39;: (&#39;empower_stage&#39;, &#39;empower_stage&#39;), &#39;targetobject&#39;: (&#39;tmp_dim_dim_legal_entity&#39;, &#39;tmp_dim_dim_product&#39;), &#39;codemaptable&#39;: (None, None), &#39;configtable&#39;: (&#39;TE/empower_supplychain_transformation_rule.csv&#39;, &#39;TE/empower_supplychain_transformation_rule.csv&#39;), &#39;rownum&#39;: (1, 2)}\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067454952,"submitTime":1625067436546,"finishTime":1625067454998,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"(Debug) Display Batch Config","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e24d41ff-40fb-4fc9-8bdc-b203ef31bb7f"},{"version":"CommandV1","origId":2064366854103198,"guid":"17d06734-baed-43ee-9659-5e9fdcfa2c1b","subtype":"command","commandType":"auto","position":14.0,"command":"%md\n### Exit and Return Output","commandVersion":1,"state":"finished","results":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8fdee732-8e9f-4382-bbdb-2181816cbf30"},{"version":"CommandV1","origId":2064366854103199,"guid":"21fd1bc6-4d89-4f5f-85bd-b32cce94a92c","subtype":"command","commandType":"auto","position":15.0,"command":"dbutils.notebook.exit(outFile)","commandVersion":1,"state":"finished","results":{"type":"exit","data":"TE/te_batch_cortex_OUTPUTLOG.csv","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067455001,"submitTime":1625067436564,"finishTime":1625067455035,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"ffd90c88-c449-4657-a0ac-a128967cf448"},{"version":"CommandV1","origId":2064366854103200,"guid":"6839bfb0-6186-4d95-b7cb-bc9af5842782","subtype":"command","commandType":"auto","position":16.0,"command":"#\n# Use this to dump Transformation Queries\n#\nquery_output = []\n#for query in batch_queries:\nfor table in tables:\n    if table.transformationQuery:\n        query_output.append(\"/**********************************************\")\n        query_output.append(f\"   Target Table: {table.deltaSchemaName.upper()}.{table.deltaObjectName.upper()}\")\n        query_output.append(\"***********************************************/\")\n        query_output.append(f\"{table.transformationQuery};\\n\")\n        \nfor q in query_output:\n    print(q)","commandVersion":1,"state":"finished","results":{"type":"raw","data":"Command skipped","arguments":{},"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067455035,"submitTime":1625067436568,"finishTime":1625067455035,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"201db424-70f0-4511-9b96-233bf5f419d8"},{"version":"CommandV1","origId":3512696835281183,"guid":"a89e6f29-a16f-4767-b1e7-3c00c44570c2","subtype":"script","commandType":"auto","position":4.142857142857143,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067436987,"submitTime":0,"finishTime":1625067437008,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["fa90e1d0-c477-417a-aeb8-82acede6ffe8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"bdc8450c-a093-42ca-ada7-ecd9c6ea30f7"},{"version":"CommandV1","origId":3512696835281184,"guid":"d2285b2d-c52d-4699-b4d7-57d7f3990262","subtype":"script","commandType":"auto","position":4.285714285714286,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437010,"submitTime":0,"finishTime":1625067437034,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["fa90e1d0-c477-417a-aeb8-82acede6ffe8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"e1b5c593-2872-4ac0-b48b-aa1d5b17e705"},{"version":"CommandV1","origId":3512696835281185,"guid":"6236c55e-4b7f-4c77-b5bb-5d995d380567","subtype":"script","commandType":"auto","position":4.428571428571429,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437036,"submitTime":0,"finishTime":1625067437061,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["fa90e1d0-c477-417a-aeb8-82acede6ffe8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"bb06a14e-7771-42bf-bd6e-8ed907d79187"},{"version":"CommandV1","origId":3512696835281186,"guid":"a8220ec9-f451-48ea-a286-b4d082f732ce","subtype":"script","commandType":"auto","position":4.571428571428571,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437064,"submitTime":0,"finishTime":1625067437203,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["fa90e1d0-c477-417a-aeb8-82acede6ffe8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Utils Class","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a6e9e02a-80b4-45e7-a73b-27e587ca0621"},{"version":"CommandV1","origId":3512696835281187,"guid":"bdcb90c7-4add-4f9f-aeeb-f52949ff6769","subtype":"script","commandType":"auto","position":4.714285714285714,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437206,"submitTime":0,"finishTime":1625067437230,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["fa90e1d0-c477-417a-aeb8-82acede6ffe8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"bb970fe8-9a77-42b6-88a9-060ef7beac82"},{"version":"CommandV1","origId":3512696835281188,"guid":"c1882e05-d1a4-4afc-a6fe-10b8b05af656","subtype":"script","commandType":"auto","position":4.857142857142857,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437233,"submitTime":0,"finishTime":1625067437423,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["fa90e1d0-c477-417a-aeb8-82acede6ffe8"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Transformation Engine Class","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2fd0b807-b01d-4b16-872d-b6575bb023d2"},{"version":"CommandV1","origId":3512696835281189,"guid":"a16a688f-fe13-4944-8f1e-ef33c61ad594","subtype":"script","commandType":"auto","position":5.333333333333333,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437426,"submitTime":0,"finishTime":1625067437444,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["60aa289f-3759-4c1a-932b-658778a28588"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"bb06a14e-7771-42bf-bd6e-8ed907d79187"},{"version":"CommandV1","origId":3512696835281190,"guid":"f68e4a28-7ab9-4719-8310-0dced893efb4","subtype":"script","commandType":"auto","position":5.666666666666667,"command":"","commandVersion":1,"state":"finished","results":{"type":"listResults","data":[{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}}],"arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[],"metadata":{}},"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":1625067437447,"submitTime":0,"finishTime":1625067437576,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":[],"yColumns":[],"pivotColumns":[],"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":["60aa289f-3759-4c1a-932b-658778a28588"],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"Utils Class","showCommandTitle":true,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a6e9e02a-80b4-45e7-a73b-27e587ca0621"}],"dashboards":[],"guid":"66d1deee-8b31-4986-b1ab-4af9d054714f","globalVars":{},"iPythonMetadata":null,"inputWidgets":{"Execute Query":{"nuid":"24d8e179-24d6-4c67-8804-9a25a8408357","currentValue":"TRUE","widgetInfo":{"widgetType":"dropdown","name":"Execute Query","defaultValue":"TRUE","label":null,"options":{"widgetType":"dropdown","choices":["TRUE","FALSE"]}}},"Adhoc Mode":{"nuid":"5b4a343e-4555-4991-bfac-f22933fb410a","currentValue":"FALSE","widgetInfo":{"widgetType":"dropdown","name":"Adhoc Mode","defaultValue":"FALSE","label":null,"options":{"widgetType":"dropdown","choices":["TRUE","FALSE"]}}},"FileParams":{"nuid":"aa16bcfa-1099-4f6e-9f46-f7ce8c0ea006","currentValue":"TE/te_batch_cortex.csv","widgetInfo":{"widgetType":"text","name":"FileParams","defaultValue":"","label":null,"options":{"widgetType":"text","validationRegex":null}}}},"notebookMetadata":{"pythonIndentUnit":2}}