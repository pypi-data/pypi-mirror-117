{"version":3,"sources":["webpack://WebComponents/./runestone/common/js/runestonebase.js","webpack://WebComponents/./runestone/poll/js/poll.js"],"names":["RunestoneBase","constructor","opts","this","component_ready_promise","Promise","resolve","_component_ready_resolve_fn","optional","window","allComponents","push","sid","graderactive","showfeedback","timed","isTimed","enforceDeadline","deadline","$","orig","data","selector_id","assessmentTaken","timedWrapper","location","href","indexOf","text","question_label","jsonHeaders","Headers","Accept","eventInfo","post_return","course","eBookConfig","clientLoginStatus","isLoggedIn","timezoneoffset","Date","getTimezoneOffset","percent","useRunestoneServices","logLevel","request","Request","ajaxURL","method","headers","body","JSON","stringify","response","fetch","ok","Error","json","e","alert","console","log","debug","act","div_id","post_promise","forceSave","save_code","will_be_ready","self","checkServerComplete","reject","csresolver","divid","event","rawdeadline","tzoff","practice_mode","repopulateFromStorage","err","checkLocalStorage","loadData","indicate_component_ready","containerDiv","classList","add","shouldUseServer","restoreAnswers","setLocalStorage","correct","localStorage","length","storedData","ex","getItem","localStorageKey","parse","message","removeItem","answer","storageDate","timestamp","email","addCaption","elType","capDiv","document","createElement","caption","html","addClass","appendChild","hasUserActivity","isAnswered","checkCurrentAnswer","renderFeedback","disableInteraction","toString","name","pollList","Poll","super","origElem","id","children","childNodes","optionList","optsArray","comment","is","resultsViewer","getQuestionText","getOptionText","renderPoll","checkPollStorage","firstAnswer","i","tagName","delimiter","outerHTML","temp","split","question","_this","pollForm","resultsDiv","getAttribute","attr","action","onsubmit","radio","tmpid","type","value","click","submitPoll","bind","label","renderTextField","replaceWith","textfield","style","width","placeholder","poll_val","checked","comment_val","logBookEvent","setItem","getElementById","append","jQuery","get","showPollResults","results","eval","total","opt_list","count_list","my_vote","isInstructor","list","count","Math","round","el","disableOptions","fail","each","index","stack","component_factory","poll"],"mappings":"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","file":"350.bundle.js?v=987ef1e79f7939e135ea","sourcesContent":["/* ********************************\n * |docname| - Runestone Base Class\n * ********************************\n * All runestone components should inherit from RunestoneBase. In addition all runestone components should do the following things:\n *\n * 1.   Ensure that they are wrapped in a div with the class runestone\n * 2.   Write their source AND their generated html to the database if the database is configured\n * 3.   Properly save and restore their answers using the checkServer mechanism in this base class. Each component must provide an implementation of:\n *\n *      -    checkLocalStorage\n *      -    setLocalStorage\n *      -    restoreAnswers\n *      -    disableInteraction\n *\n * 4.   provide a Selenium based unit test\n */\n\nimport { pageProgressTracker } from \"./bookfuncs.js\";\n//import \"./../styles/runestone-custom-sphinx-bootstrap.css\";\n\nexport default class RunestoneBase {\n    constructor(opts) {\n        this.component_ready_promise = new Promise(resolve => this._component_ready_resolve_fn = resolve)\n        this.optional = false;\n        if (typeof window.allComponents === \"undefined\") {\n            window.allComponents = [];\n        }\n        window.allComponents.push(this);\n        if (opts) {\n            this.sid = opts.sid;\n            this.graderactive = opts.graderactive;\n            this.showfeedback = true;\n            if (opts.timed) {\n                this.isTimed = true;\n            }\n            if (opts.enforceDeadline) {\n                this.deadline = opts.deadline;\n            }\n            if ($(opts.orig).data(\"optional\")) {\n                this.optional = true;\n            } else {\n                this.optional = false;\n            }\n            if (opts.selector_id) {\n                this.selector_id = opts.selector_id;\n            }\n            if (typeof opts.assessmentTaken !== \"undefined\") {\n                this.assessmentTaken = opts.assessmentTaken;\n            } else {\n                // default to true as this opt is only provided from a timedAssessment\n                this.assessmentTaken = true;\n            }\n            // This is for the selectquestion points\n            // If a selectquestion is part of a timed exam it will get\n            // the timedWrapper options.\n            if (typeof opts.timedWrapper !== \"undefined\") {\n                this.timedWrapper = opts.timedWrapper;\n            } else {\n                // However sometimes selectquestions\n                // are used in regular assignments.  The hacky way to detect this\n                // is to look for doAssignment in the URL and then grab\n                // the assignment name from the heading.\n                if (location.href.indexOf(\"doAssignment\") >= 0) {\n                    this.timedWrapper = $(\"h1#assignment_name\").text()\n                } else {\n                    this.timedWrapper = null;\n                }\n            }\n            if ($(opts.orig).data(\"question_label\")) {\n                this.question_label = $(opts.orig).data(\"question_label\");\n            }\n        }\n        this.jsonHeaders = new Headers({\n            \"Content-type\": \"application/json; charset=utf-8\",\n            Accept: \"application/json\",\n        });\n    }\n\n    // .. _logBookEvent:\n    //\n    // logBookEvent\n    // ------------\n    // This function sends the provided ``eventInfo`` to the `hsblog endpoint` of the server. Awaiting this function returns either ``undefined`` (if Runestone services are not available) or the data returned by the server as a JavaScript object (already JSON-decoded).\n    async logBookEvent(eventInfo) {\n        if (this.graderactive) {\n            return;\n        }\n        let post_return;\n        eventInfo.course = eBookConfig.course;\n        eventInfo.clientLoginStatus = eBookConfig.isLoggedIn;\n        eventInfo.timezoneoffset = new Date().getTimezoneOffset() / 60;\n        if (this.percent) {\n            eventInfo.percent = this.percent;\n        }\n        if (eBookConfig.useRunestoneServices && eBookConfig.logLevel > 0) {\n            let request = new Request(eBookConfig.ajaxURL + \"hsblog\", {\n                method: \"POST\",\n                headers: this.jsonHeaders,\n                body: JSON.stringify(eventInfo),\n            });\n            try {\n                let response = await fetch(request);\n                if (!response.ok) {\n                    throw new Error(\"Failed to save the log entry\");\n                }\n                post_return = response.json();\n            } catch (e) {\n                if (this.isTimed) {\n                    alert(`Error: Your action was not saved! The error was ${e}`);\n                }\n                console.log(`Error: ${e}`);\n            }\n        }\n        if (!this.isTimed || eBookConfig.debug) {\n            console.log(\"logging event \" + JSON.stringify(eventInfo));\n        }\n        if (\n            typeof pageProgressTracker.updateProgress === \"function\" &&\n            eventInfo.act != \"edit\" &&\n            this.optional == false\n        ) {\n            pageProgressTracker.updateProgress(eventInfo.div_id);\n        }\n        return post_return;\n    }\n\n    // .. _logRunEvent:\n    //\n    // logRunEvent\n    // -----------\n    // This function sends the provided ``eventInfo`` to the `runlog endpoint`. When awaited, this function returns the data (decoded from JSON) the server sent back.\n    async logRunEvent(eventInfo) {\n        let post_promise = \"done\";\n        if (this.graderactive) {\n            return;\n        }\n        eventInfo.course = eBookConfig.course;\n        eventInfo.clientLoginStatus = eBookConfig.isLoggedIn;\n        eventInfo.timezoneoffset = new Date().getTimezoneOffset() / 60;\n        if (this.forceSave || \"to_save\" in eventInfo === false) {\n            eventInfo.save_code = \"True\";\n        }\n        if (eBookConfig.useRunestoneServices && eBookConfig.logLevel > 0) {\n            let request = new Request(eBookConfig.ajaxURL + \"runlog.json\", {\n                method: \"POST\",\n                headers: this.jsonHeaders,\n                body: JSON.stringify(eventInfo),\n            });\n            let response = await fetch(request);\n            if (!response.ok) {\n                throw new Error(\"Failed to log the run\");\n            }\n            post_promise = await response.json();\n        }\n        if (!this.isTimed || eBookConfig.debug) {\n            console.log(\"running \" + JSON.stringify(eventInfo));\n        }\n        if (\n            typeof pageProgressTracker.updateProgress === \"function\" &&\n            this.optional == false\n        ) {\n            pageProgressTracker.updateProgress(eventInfo.div_id);\n        }\n        return post_promise;\n    }\n    /* Checking/loading from storage\n    **WARNING:**  DO NOT `await` this function!\n    This function, although async, does not explicitly resolve its promise by returning a value.  The reason for this is because it is called by the constructor for nearly every component.  In Javascript constructors cannot be async!\n\n    One of the recommended ways to handle the async requirements from within a constructor is to use an attribute as a promise and resolve that attribute at the appropriate time.\n    */\n    async checkServer(\n        // A string specifying the event name to use for querying the :ref:`getAssessResults` endpoint.\n        eventInfo,\n        // If true, this function will invoke ``indicate_component_ready()`` just before it returns. This is provided since most components are ready after this function completes its work.\n        //\n        // TODO: This defaults to false, to avoid causing problems with any components that haven't been updated and tested. After all Runestone components have been updated, default this to true and remove the extra parameter from most calls to this function.\n        will_be_ready = false\n    ) {\n        // Check if the server has stored answer\n        let self = this;\n        this.checkServerComplete = new Promise(function (resolve, reject) {\n            self.csresolver = resolve;\n        });\n        if (this.useRunestoneServices || this.graderactive) {\n            let data = {};\n            data.div_id = this.divid;\n            data.course = eBookConfig.course;\n            data.event = eventInfo;\n            if (this.graderactive && this.deadline) {\n                data.deadline = this.deadline;\n                data.rawdeadline = this.rawdeadline;\n                data.tzoff = this.tzoff;\n            }\n            if (this.sid) {\n                data.sid = this.sid;\n            }\n            if (!eBookConfig.practice_mode && this.assessmentTaken) {\n                let request = new Request(\n                    eBookConfig.ajaxURL + \"getAssessResults\",\n                    {\n                        method: \"POST\",\n                        body: JSON.stringify(data),\n                        headers: this.jsonHeaders,\n                    }\n                );\n                try {\n                    let response = await fetch(request);\n                    data = await response.json();\n                    this.repopulateFromStorage(data);\n                    this.csresolver(\"server\");\n                } catch (err) {\n                    try {\n                        this.checkLocalStorage();\n                    } catch (err) {\n                        console.log(err);\n                    }\n                }\n            } else {\n                this.loadData({});\n                this.csresolver(\"not taken\");\n            }\n        } else {\n            this.checkLocalStorage(); // just go right to local storage\n            this.csresolver(\"local\");\n        }\n\n        if (will_be_ready) {\n            this.indicate_component_ready();\n        }\n    }\n\n    // This method assumes that ``this.componentDiv`` refers to the ``div`` containing the component, and that this component's ID is set.\n    indicate_component_ready() {\n        // Add a class to indicate the component is now ready.\n        this.containerDiv.classList.add(\"runestone-component-ready\");\n        // Resolve the ``this.component_ready_promise``.\n        this._component_ready_resolve_fn();\n    }\n\n    loadData(data) {\n        // for most classes, loadData doesn't do anything. But for Parsons, and perhaps others in the future,\n        // initialization can happen even when there's no history to be loaded\n        return null;\n    }\n\n    /**\n     * repopulateFromStorage is called after a successful API call is made to ``getAssessResults`` in\n     * the checkServer method in this class\n     *\n     * ``restoreAnswers,`` ``setLocalStorage`` and ``checkLocalStorage`` are defined in the child classes.\n     *\n     * @param {*} data - a JSON object representing the data needed to restore a previous answer for a component\n     * @param {*} status - the http status\n     * @param {*} whatever - ignored\n     */\n    repopulateFromStorage(data) {\n        // decide whether to use the server's answer (if there is one) or to load from storage\n        if (data !== null && this.shouldUseServer(data)) {\n            this.restoreAnswers(data);\n            this.setLocalStorage(data);\n        } else {\n            this.checkLocalStorage();\n        }\n    }\n    shouldUseServer(data) {\n        // returns true if server data is more recent than local storage or if server storage is correct\n        if (\n            data.correct === \"T\" ||\n            localStorage.length === 0 ||\n            this.graderactive === true ||\n            this.isTimed\n        ) {\n            return true;\n        }\n        let ex = localStorage.getItem(this.localStorageKey());\n        if (ex === null) {\n            return true;\n        }\n        let storedData;\n        try {\n            storedData = JSON.parse(ex);\n        } catch (err) {\n            // error while parsing; likely due to bad value stored in storage\n            console.log(err.message);\n            localStorage.removeItem(this.localStorageKey());\n            // definitely don't want to use local storage here\n            return true;\n        }\n        if (data.answer == storedData.answer) return true;\n        let storageDate = new Date(storedData.timestamp);\n        let serverDate = new Date(data.timestamp);\n        return serverDate >= storageDate;\n    }\n    // Return the key which to be used when accessing local storage.\n    localStorageKey() {\n        return (\n            eBookConfig.email +\n            \":\" +\n            eBookConfig.course +\n            \":\" +\n            this.divid +\n            \"-given\"\n        );\n    }\n    addCaption(elType) {\n        //someElement.parentNode.insertBefore(newElement, someElement.nextSibling);\n        if (!this.isTimed) {\n            var capDiv = document.createElement(\"p\");\n            if (this.question_label) {\n                this.caption = `Activity: ${this.question_label} ${this.caption}  <span class=\"runestone_caption_divid\">(${this.divid})</span>`;\n                $(capDiv).html(this.caption);\n                $(capDiv).addClass(`${elType}_caption`);\n            } else {\n                $(capDiv).html(this.caption + \" (\" + this.divid + \")\");\n                $(capDiv).addClass(`${elType}_caption`);\n                $(capDiv).addClass(`${elType}_caption_text`);\n            }\n            this.capDiv = capDiv;\n            //this.outerDiv.parentNode.insertBefore(capDiv, this.outerDiv.nextSibling);\n            this.containerDiv.appendChild(capDiv);\n        }\n    }\n\n    hasUserActivity() {\n        return this.isAnswered;\n    }\n\n    checkCurrentAnswer() {\n        console.log(\n            \"Each component should provide an implementation of checkCurrentAnswer\"\n        );\n    }\n\n    async logCurrentAnswer() {\n        console.log(\n            \"Each component should provide an implementation of logCurrentAnswer\"\n        );\n    }\n    renderFeedback() {\n        console.log(\n            \"Each component should provide an implementation of renderFeedback\"\n        );\n    }\n    disableInteraction() {\n        console.log(\n            \"Each component should provide an implementation of disableInteraction\"\n        );\n    }\n\n    toString() {\n        return `${this.constructor.name}: ${this.divid}`\n    }\n\n}\n\nwindow.RunestoneBase = RunestoneBase;\n","/*\n__author__ = Kirby Olson\n__date__ = 6/12/2015  */\n\"use strict\";\n\nimport RunestoneBase from \"../../common/js/runestonebase\";\nimport \"../css/poll.css\";\n\nexport var pollList = {};\n\nexport default class Poll extends RunestoneBase {\n    constructor(opts) {\n        super(opts);\n        var orig = opts.orig; //entire <p> element\n        this.origElem = orig;\n        this.divid = orig.id;\n        this.children = this.origElem.childNodes;\n        this.optionList = [];\n        this.optsArray = [];\n        this.comment = false;\n        if ($(this.origElem).is(\"[data-comment]\")) {\n            this.comment = true;\n        }\n        this.resultsViewer = $(orig).data(\"results\");\n        this.getQuestionText();\n        this.getOptionText(); //populates optionList\n        this.renderPoll(); //generates HTML\n        // Checks localStorage to see if this poll has already been completed by this user.\n        this.checkPollStorage();\n        this.caption = \"Poll\";\n        this.addCaption(\"runestone\");\n    }\n    getQuestionText() {\n        //finds the text inside the parent tag, but before the first <li> tag and sets it as the question\n        var _this = this;\n        var firstAnswer;\n        for (var i = 0; i < this.children.length; i++) {\n            if (this.children[i].tagName == \"LI\") {\n                firstAnswer = _this.children[i];\n                break;\n            }\n        }\n        var delimiter = firstAnswer.outerHTML;\n        var fulltext = $(this.origElem).html();\n        var temp = fulltext.split(delimiter);\n        this.question = temp[0];\n    }\n    getOptionText() {\n        //Gets the text from each <li> tag and places it in this.optionList\n        var _this = this;\n        for (var i = 0; i < this.children.length; i++) {\n            if (_this.children[i].tagName == \"LI\") {\n                _this.optionList.push($(_this.children[i]).text());\n            }\n        }\n    }\n    renderPoll() {\n        //generates the HTML that the user interacts with\n        var _this = this;\n        this.containerDiv = document.createElement(\"div\");\n        this.pollForm = document.createElement(\"form\");\n        this.resultsDiv = document.createElement(\"div\");\n        this.containerDiv.id = this.divid;\n        $(this.containerDiv).addClass(this.origElem.getAttribute(\"class\"));\n        $(this.pollForm).html(\n            `<span style='font-size: Large'>${this.question}</span>`\n        );\n        $(this.pollForm).attr({\n            id: this.divid + \"_form\",\n            method: \"get\",\n            action: \"\",\n            onsubmit: \"return false;\",\n        });\n        this.pollForm.appendChild(document.createElement(\"br\"));\n        for (var i = 0; i < this.optionList.length; i++) {\n            var radio = document.createElement(\"input\");\n            var tmpid = _this.divid + \"_opt_\" + i;\n            $(radio).attr({\n                id: tmpid,\n                name: this.divid + \"_group1\",\n                type: \"radio\",\n                value: i,\n            });\n            $(radio).click(this.submitPoll.bind(this));\n            var label = document.createElement(\"label\");\n            $(label).attr(\"for\", tmpid);\n            $(label).text(this.optionList[i]);\n            this.pollForm.appendChild(radio);\n            this.optsArray.push(radio);\n            this.pollForm.appendChild(label);\n            this.pollForm.appendChild(document.createElement(\"br\"));\n        }\n        if (this.comment) {\n            this.renderTextField();\n        }\n        this.resultsDiv.id = this.divid + \"_results\";\n        this.containerDiv.appendChild(this.pollForm);\n        this.containerDiv.appendChild(this.resultsDiv);\n        $(this.origElem).replaceWith(this.containerDiv);\n    }\n    renderTextField() {\n        this.textfield = document.createElement(\"input\");\n        this.textfield.type = \"text\";\n        $(this.textfield).addClass(\"form-control\");\n        this.textfield.style.width = \"300px\";\n        this.textfield.name = this.divid + \"_comment\";\n        this.textfield.placeholder = \"Any comments?\";\n        this.pollForm.appendChild(this.textfield);\n        this.pollForm.appendChild(document.createElement(\"br\"));\n    }\n    submitPoll() {\n        //checks the poll, sets localstorage and submits to the server\n        var poll_val = null;\n        for (var i = 0; i < this.optsArray.length; i++) {\n            if (this.optsArray[i].checked) {\n                poll_val = this.optsArray[i].value;\n                break;\n            }\n        }\n        if (poll_val === null) return;\n        var comment_val = \"\";\n        if (this.comment) {\n            comment_val = this.textfield.value;\n        }\n        var act = \"\";\n        if (comment_val !== \"\") {\n            act = poll_val + \":\" + comment_val;\n        } else {\n            act = poll_val;\n        }\n        var eventInfo = { event: \"poll\", act: act, div_id: this.divid };\n        // log the response to the database\n        this.logBookEvent(eventInfo); // in bookfuncs.js\n        // log the fact that the user has answered the poll to local storage\n        localStorage.setItem(this.divid, \"true\");\n        if (!document.getElementById(`${this.divid}_sent`)) {\n            $(this.pollForm).append(\n                `<span id=${this.divid}_sent><strong>Thanks, your response has been recorded</strong></span>`\n            );\n        } else {\n            $(`#${this.divid}_sent`).html(\n                \"<strong>Only Your last reponse is recorded</strong>\"\n            );\n        }\n        // show the results of the poll\n        if (this.resultsViewer === \"all\") {\n            var data = {};\n            data.div_id = this.divid;\n            data.course = eBookConfig.course;\n            jQuery.get(\n                eBookConfig.ajaxURL + \"getpollresults\",\n                data,\n                this.showPollResults\n            );\n        }\n    }\n    showPollResults(data) {\n        //displays the results returned by the server\n        var results = eval(data);\n        var total = results[0];\n        var opt_list = results[1];\n        var count_list = results[2];\n        var div_id = results[3];\n        var my_vote = results[4];\n        // resture current users vote\n        if (my_vote > -1) {\n            this.optsArray[my_vote].checked = \"checked\";\n        }\n        // show results summary if appropriate\n        if (\n            (this.resultsViewer === \"all\" &&\n                localStorage.getItem(this.divid === \"true\")) ||\n            eBookConfig.isInstructor\n        ) {\n            $(this.resultsDiv).html(\n                `<b>Results:</b> ${total} responses <br><br>`\n            );\n            var list = $(document.createElement(\"div\"));\n            $(list).addClass(\"results-container\");\n            for (var i = 0; i < this.optionList.length; i++) {\n                var count;\n                var percent;\n                if (count_list[i]) {\n                    count = count_list[i];\n                    percent = (count / total) * 100;\n                } else {\n                    count = 0;\n                    percent = 0;\n                }\n                var text = count + \" (\" + Math.round(10 * percent) / 10 + \"%)\"; // round percent to 10ths\n                var html;\n                if (percent > 10) {\n                    html =\n                        `<div class=\"progresscounter\">${i + 1}. </div>` +\n                        \"<div class='progress'>\" +\n                        \"<div class='progress-bar progress-bar-success'\" +\n                        `style=\"width: ${percent}%; min-width: 2em;\">` +\n                        \"<span class='poll-text'>\" +\n                        text +\n                        \"</span></div></div>\";\n                } else {\n                    html =\n                        `<div class=\"progresscounter\">${i + 1}. </div>` +\n                        \"<div class='progress'>\" +\n                        \"<div class='progress-bar progress-bar-success'\" +\n                        `style=\"width: ${percent}%; min-width: 2em;\"></div>` +\n                        \"<span class='poll-text' style='margin: 0 0 0 10px;'>\" +\n                        text +\n                        \"</span></div>\";\n                }\n                var el = $(html);\n                list.append(el);\n            }\n            $(this.resultsDiv).append(list);\n        }\n        this.indicate_component_ready();\n    }\n    disableOptions() {}\n    checkPollStorage() {\n        //checks the localstorage to see if the poll has been completed already\n        var _this = this;\n        var len = localStorage.length;\n        if (len > 0) {\n            //If the poll has already been completed, show the results\n            var data = {};\n            data.div_id = this.divid;\n            data.course = eBookConfig.course;\n            jQuery.get(\n                eBookConfig.ajaxURL + \"getpollresults\",\n                data,\n                this.showPollResults.bind(this)\n            ).fail(this.indicate_component_ready.bind(this));\n        } else {\n            this.indicate_component_ready();\n        }\n    }\n}\n\n// Do not render poll data until login-complete event so we know instructor status\n$(document).bind(\"runestone:login-complete\", function () {\n    $(\"[data-component=poll]\").each(function (index) {\n        try {\n            pollList[this.id] = new Poll({ orig: this });\n        } catch (err) {\n            console.log(`Error rendering Poll Problem ${this.id}\n                         Details: ${err}`);\n            console.log(err.stack);\n        }\n    });\n});\n\nif (typeof window.component_factory === \"undefined\") {\n    window.component_factory = {};\n}\nwindow.component_factory.poll = function (opts) {\n    return new Poll(opts);\n};\n"],"sourceRoot":""}