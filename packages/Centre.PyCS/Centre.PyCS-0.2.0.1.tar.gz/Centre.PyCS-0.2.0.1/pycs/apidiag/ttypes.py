#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import general.ttypes

from thrift.transport import TTransport
all_structs = []


class TransactionType(object):
    TT_Transfer = 0
    TT_ContractDeploy = 1
    TT_ContractCall = 2
    TT_ContractState = 3
    TT_ContractReplenish = 4
    TT_TokenDeploy = 5
    TT_TokenTransfer = 6
    TT_Delegation = 7
    TT_RevokeDelegation = 8
    TT_Hold = 9
    TT_Release = 10
    TT_CancelHold = 11
    TT_DelayedTransfer = 12
    TT_UpdateBootstrapList = 13
    TT_UpdateSettings = 14
    TT_Malformed = 15
    TT_ContractEmitted = 16
    TT_Utility = 17
    TT_Other = 18

    _VALUES_TO_NAMES = {
        0: "TT_Transfer",
        1: "TT_ContractDeploy",
        2: "TT_ContractCall",
        3: "TT_ContractState",
        4: "TT_ContractReplenish",
        5: "TT_TokenDeploy",
        6: "TT_TokenTransfer",
        7: "TT_Delegation",
        8: "TT_RevokeDelegation",
        9: "TT_Hold",
        10: "TT_Release",
        11: "TT_CancelHold",
        12: "TT_DelayedTransfer",
        13: "TT_UpdateBootstrapList",
        14: "TT_UpdateSettings",
        15: "TT_Malformed",
        16: "TT_ContractEmitted",
        17: "TT_Utility",
        18: "TT_Other",
    }

    _NAMES_TO_VALUES = {
        "TT_Transfer": 0,
        "TT_ContractDeploy": 1,
        "TT_ContractCall": 2,
        "TT_ContractState": 3,
        "TT_ContractReplenish": 4,
        "TT_TokenDeploy": 5,
        "TT_TokenTransfer": 6,
        "TT_Delegation": 7,
        "TT_RevokeDelegation": 8,
        "TT_Hold": 9,
        "TT_Release": 10,
        "TT_CancelHold": 11,
        "TT_DelayedTransfer": 12,
        "TT_UpdateBootstrapList": 13,
        "TT_UpdateSettings": 14,
        "TT_Malformed": 15,
        "TT_ContractEmitted": 16,
        "TT_Utility": 17,
        "TT_Other": 18,
    }


class Platform(object):
    OS_Linux = 0
    OS_MacOS = 1
    OS_Windows = 2

    _VALUES_TO_NAMES = {
        0: "OS_Linux",
        1: "OS_MacOS",
        2: "OS_Windows",
    }

    _NAMES_TO_VALUES = {
        "OS_Linux": 0,
        "OS_MacOS": 1,
        "OS_Windows": 2,
    }


class TransactionId(object):
    """
    Attributes:
     - sequence
     - index

    """


    def __init__(self, sequence=None, index=None,):
        self.sequence = sequence
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.sequence = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I16:
                    self.index = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionId')
        if self.sequence is not None:
            oprot.writeFieldBegin('sequence', TType.I64, 1)
            oprot.writeI64(self.sequence)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I16, 2)
            oprot.writeI16(self.index)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AmountCommission(object):
    """
    Attributes:
     - bits
     - value

    """


    def __init__(self, bits=None, value=None,):
        self.bits = bits
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.bits = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AmountCommission')
        if self.bits is not None:
            oprot.writeFieldBegin('bits', TType.I16, 1)
            oprot.writeI16(self.bits)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 2)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.bits is None:
            raise TProtocolException(message='Required field bits is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Money(object):
    """
    Attributes:
     - amount
     - value

    """


    def __init__(self, amount=None, value=None,):
        self.amount = amount
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.amount = general.ttypes.Amount()
                    self.amount.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Money')
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRUCT, 1)
            self.amount.write(oprot)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 2)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContractDeploy(object):
    """
    Attributes:
     - sourceCode
     - byteCodeObjects
     - tokenStandard

    """


    def __init__(self, sourceCode=None, byteCodeObjects=None, tokenStandard=None,):
        self.sourceCode = sourceCode
        self.byteCodeObjects = byteCodeObjects
        self.tokenStandard = tokenStandard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = general.ttypes.ByteCodeObject()
                        _elem5.read(iprot)
                        self.byteCodeObjects.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tokenStandard = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContractDeploy')
        if self.sourceCode is not None:
            oprot.writeFieldBegin('sourceCode', TType.STRING, 1)
            oprot.writeString(self.sourceCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceCode)
            oprot.writeFieldEnd()
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter6 in self.byteCodeObjects:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tokenStandard is not None:
            oprot.writeFieldBegin('tokenStandard', TType.I32, 3)
            oprot.writeI32(self.tokenStandard)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContractCall(object):
    """
    Attributes:
     - getter
     - method
     - params
     - uses

    """


    def __init__(self, getter=None, method=None, params=None, uses=None,):
        self.getter = getter
        self.method = method
        self.params = params
        self.uses = uses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.getter = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = general.ttypes.Variant()
                        _elem12.read(iprot)
                        self.params.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.uses = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readBinary()
                        self.uses.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContractCall')
        if self.getter is not None:
            oprot.writeFieldBegin('getter', TType.BOOL, 1)
            oprot.writeBool(self.getter)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 2)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter19 in self.params:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.uses is not None:
            oprot.writeFieldBegin('uses', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.uses))
            for iter20 in self.uses:
                oprot.writeBinary(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContractState(object):
    """
    Attributes:
     - hashed
     - content
     - call
     - fee
     - returned

    """


    def __init__(self, hashed=None, content=None, call=None, fee=None, returned=None,):
        self.hashed = hashed
        self.content = content
        self.call = call
        self.fee = fee
        self.returned = returned

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.hashed = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.content = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.call = TransactionId()
                    self.call.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.fee = Money()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.returned = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContractState')
        if self.hashed is not None:
            oprot.writeFieldBegin('hashed', TType.BOOL, 1)
            oprot.writeBool(self.hashed)
            oprot.writeFieldEnd()
        if self.content is not None:
            oprot.writeFieldBegin('content', TType.STRING, 2)
            oprot.writeString(self.content.encode('utf-8') if sys.version_info[0] == 2 else self.content)
            oprot.writeFieldEnd()
        if self.call is not None:
            oprot.writeFieldBegin('call', TType.STRUCT, 3)
            self.call.write(oprot)
            oprot.writeFieldEnd()
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 4)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        if self.returned is not None:
            oprot.writeFieldBegin('returned', TType.STRING, 5)
            oprot.writeString(self.returned.encode('utf-8') if sys.version_info[0] == 2 else self.returned)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Contract(object):
    """
    Attributes:
     - deploy
     - call
     - state

    """


    def __init__(self, deploy=None, call=None, state=None,):
        self.deploy = deploy
        self.call = call
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.deploy = ContractDeploy()
                    self.deploy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.call = ContractCall()
                    self.call.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.state = ContractState()
                    self.state.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Contract')
        if self.deploy is not None:
            oprot.writeFieldBegin('deploy', TType.STRUCT, 1)
            self.deploy.write(oprot)
            oprot.writeFieldEnd()
        if self.call is not None:
            oprot.writeFieldBegin('call', TType.STRUCT, 2)
            self.call.write(oprot)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRUCT, 3)
            self.state.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserFielData(object):
    """
    Attributes:
     - integer
     - bytes
     - amount

    """


    def __init__(self, integer=None, bytes=None, amount=None,):
        self.integer = integer
        self.bytes = bytes
        self.amount = amount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.integer = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.bytes = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.amount = general.ttypes.Amount()
                    self.amount.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserFielData')
        if self.integer is not None:
            oprot.writeFieldBegin('integer', TType.I64, 1)
            oprot.writeI64(self.integer)
            oprot.writeFieldEnd()
        if self.bytes is not None:
            oprot.writeFieldBegin('bytes', TType.STRING, 2)
            oprot.writeString(self.bytes.encode('utf-8') if sys.version_info[0] == 2 else self.bytes)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRUCT, 3)
            self.amount.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UserField(object):
    """
    Attributes:
     - id
     - data

    """


    def __init__(self, id=None, data=None,):
        self.id = id
        self.data = data

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.id = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.data = UserFielData()
                    self.data.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UserField')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.BYTE, 1)
            oprot.writeByte(self.id)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRUCT, 2)
            self.data.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionData(object):
    """
    Attributes:
     - id
     - source
     - target
     - sum
     - max_fee
     - actual_fee
     - signature
     - timestamp
     - type
     - userFields
     - contract

    """


    def __init__(self, id=None, source=None, target=None, sum=None, max_fee=None, actual_fee=None, signature=None, timestamp=None, type=None, userFields=None, contract=None,):
        self.id = id
        self.source = source
        self.target = target
        self.sum = sum
        self.max_fee = max_fee
        self.actual_fee = actual_fee
        self.signature = signature
        self.timestamp = timestamp
        self.type = type
        self.userFields = userFields
        self.contract = contract

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.target = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.sum = Money()
                    self.sum.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.max_fee = AmountCommission()
                    self.max_fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.actual_fee = AmountCommission()
                    self.actual_fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.signature = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.timestamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.userFields = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = UserField()
                        _elem26.read(iprot)
                        self.userFields.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.contract = Contract()
                    self.contract.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionData')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 2)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.STRING, 3)
            oprot.writeBinary(self.target)
            oprot.writeFieldEnd()
        if self.sum is not None:
            oprot.writeFieldBegin('sum', TType.STRUCT, 4)
            self.sum.write(oprot)
            oprot.writeFieldEnd()
        if self.max_fee is not None:
            oprot.writeFieldBegin('max_fee', TType.STRUCT, 6)
            self.max_fee.write(oprot)
            oprot.writeFieldEnd()
        if self.actual_fee is not None:
            oprot.writeFieldBegin('actual_fee', TType.STRUCT, 7)
            self.actual_fee.write(oprot)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 8)
            oprot.writeBinary(self.signature)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.I64, 9)
            oprot.writeI64(self.timestamp)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 10)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.userFields is not None:
            oprot.writeFieldBegin('userFields', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.userFields))
            for iter27 in self.userFields:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.contract is not None:
            oprot.writeFieldBegin('contract', TType.STRUCT, 12)
            self.contract.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeData(object):
    """
    Attributes:
     - short_value
     - ulong_value
     - publicKey

    """


    def __init__(self, short_value=None, ulong_value=None, publicKey=None,):
        self.short_value = short_value
        self.ulong_value = ulong_value
        self.publicKey = publicKey

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.short_value = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.ulong_value = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeData')
        if self.short_value is not None:
            oprot.writeFieldBegin('short_value', TType.I16, 1)
            oprot.writeI16(self.short_value)
            oprot.writeFieldEnd()
        if self.ulong_value is not None:
            oprot.writeFieldBegin('ulong_value', TType.I64, 2)
            oprot.writeI64(self.ulong_value)
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 3)
            oprot.writeBinary(self.publicKey)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GetTransactionResponse(object):
    """
    Attributes:
     - status
     - transaction

    """


    def __init__(self, status=None, transaction=None,):
        self.status = status
        self.transaction = transaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = general.ttypes.APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.transaction = TransactionData()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('GetTransactionResponse')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 2)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerNode(object):
    """
    Attributes:
     - ip
     - port
     - version
     - hash
     - publicKey
     - platform
     - countTrust
     - timeRegistration
     - timeActive

    """


    def __init__(self, ip=None, port=None, version=None, hash=None, publicKey=None, platform=None, countTrust=None, timeRegistration=None, timeActive=None,):
        self.ip = ip
        self.port = port
        self.version = version
        self.hash = hash
        self.publicKey = publicKey
        self.platform = platform
        self.countTrust = countTrust
        self.timeRegistration = timeRegistration
        self.timeActive = timeActive

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ip = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.port = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.hash = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.publicKey = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.platform = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.countTrust = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.timeRegistration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.timeActive = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServerNode')
        if self.ip is not None:
            oprot.writeFieldBegin('ip', TType.STRING, 1)
            oprot.writeString(self.ip.encode('utf-8') if sys.version_info[0] == 2 else self.ip)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.STRING, 2)
            oprot.writeString(self.port.encode('utf-8') if sys.version_info[0] == 2 else self.port)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 3)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.hash is not None:
            oprot.writeFieldBegin('hash', TType.STRING, 4)
            oprot.writeString(self.hash.encode('utf-8') if sys.version_info[0] == 2 else self.hash)
            oprot.writeFieldEnd()
        if self.publicKey is not None:
            oprot.writeFieldBegin('publicKey', TType.STRING, 5)
            oprot.writeString(self.publicKey.encode('utf-8') if sys.version_info[0] == 2 else self.publicKey)
            oprot.writeFieldEnd()
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.STRING, 6)
            oprot.writeString(self.platform.encode('utf-8') if sys.version_info[0] == 2 else self.platform)
            oprot.writeFieldEnd()
        if self.countTrust is not None:
            oprot.writeFieldBegin('countTrust', TType.I32, 7)
            oprot.writeI32(self.countTrust)
            oprot.writeFieldEnd()
        if self.timeRegistration is not None:
            oprot.writeFieldBegin('timeRegistration', TType.I64, 8)
            oprot.writeI64(self.timeRegistration)
            oprot.writeFieldEnd()
        if self.timeActive is not None:
            oprot.writeFieldBegin('timeActive', TType.I64, 9)
            oprot.writeI64(self.timeActive)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ActiveNodesResult(object):
    """
    Attributes:
     - result
     - nodes

    """


    def __init__(self, result=None, nodes=None,):
        self.result = result
        self.nodes = nodes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = general.ttypes.APIResponse()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ServerNode()
                        _elem33.read(iprot)
                        self.nodes.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ActiveNodesResult')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter34 in self.nodes:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ActiveTransactionsResult(object):
    """
    Attributes:
     - result
     - count

    """


    def __init__(self, result=None, count=None,):
        self.result = result
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = general.ttypes.APIResponse()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.count = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ActiveTransactionsResult')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.STRING, 2)
            oprot.writeString(self.count.encode('utf-8') if sys.version_info[0] == 2 else self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SessionInfo(object):
    """
    Attributes:
     - startRound
     - curRound
     - lastBlock
     - uptimeMs
     - aveRoundMs

    """


    def __init__(self, startRound=None, curRound=None, lastBlock=None, uptimeMs=None, aveRoundMs=None,):
        self.startRound = startRound
        self.curRound = curRound
        self.lastBlock = lastBlock
        self.uptimeMs = uptimeMs
        self.aveRoundMs = aveRoundMs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.startRound = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.curRound = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastBlock = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.uptimeMs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.aveRoundMs = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SessionInfo')
        if self.startRound is not None:
            oprot.writeFieldBegin('startRound', TType.I64, 1)
            oprot.writeI64(self.startRound)
            oprot.writeFieldEnd()
        if self.curRound is not None:
            oprot.writeFieldBegin('curRound', TType.I64, 2)
            oprot.writeI64(self.curRound)
            oprot.writeFieldEnd()
        if self.lastBlock is not None:
            oprot.writeFieldBegin('lastBlock', TType.I64, 3)
            oprot.writeI64(self.lastBlock)
            oprot.writeFieldEnd()
        if self.uptimeMs is not None:
            oprot.writeFieldBegin('uptimeMs', TType.I64, 4)
            oprot.writeI64(self.uptimeMs)
            oprot.writeFieldEnd()
        if self.aveRoundMs is not None:
            oprot.writeFieldBegin('aveRoundMs', TType.I64, 5)
            oprot.writeI64(self.aveRoundMs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StageCacheSize(object):
    """
    Attributes:
     - stage1
     - stage2
     - stage3

    """


    def __init__(self, stage1=None, stage2=None, stage3=None,):
        self.stage1 = stage1
        self.stage2 = stage2
        self.stage3 = stage3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.stage1 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.stage2 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.stage3 = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StageCacheSize')
        if self.stage1 is not None:
            oprot.writeFieldBegin('stage1', TType.I64, 1)
            oprot.writeI64(self.stage1)
            oprot.writeFieldEnd()
        if self.stage2 is not None:
            oprot.writeFieldBegin('stage2', TType.I64, 2)
            oprot.writeI64(self.stage2)
            oprot.writeFieldEnd()
        if self.stage3 is not None:
            oprot.writeFieldBegin('stage3', TType.I64, 3)
            oprot.writeI64(self.stage3)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StateInfo(object):
    """
    Attributes:
     - transactionsCount
     - totalWalletsCount
     - aliveWalletsCount
     - contractsCount
     - contractsQueueSize
     - grayListSize
     - blackListSize
     - blockCacheSize
     - consensusMessage
     - contractsMessage
     - contractsStorage

    """


    def __init__(self, transactionsCount=None, totalWalletsCount=None, aliveWalletsCount=None, contractsCount=None, contractsQueueSize=None, grayListSize=None, blackListSize=None, blockCacheSize=None, consensusMessage=None, contractsMessage=None, contractsStorage=None,):
        self.transactionsCount = transactionsCount
        self.totalWalletsCount = totalWalletsCount
        self.aliveWalletsCount = aliveWalletsCount
        self.contractsCount = contractsCount
        self.contractsQueueSize = contractsQueueSize
        self.grayListSize = grayListSize
        self.blackListSize = blackListSize
        self.blockCacheSize = blockCacheSize
        self.consensusMessage = consensusMessage
        self.contractsMessage = contractsMessage
        self.contractsStorage = contractsStorage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.transactionsCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.totalWalletsCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.aliveWalletsCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.contractsCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.contractsQueueSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.grayListSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.blackListSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.blockCacheSize = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.consensusMessage = StageCacheSize()
                    self.consensusMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRUCT:
                    self.contractsMessage = StageCacheSize()
                    self.contractsMessage.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.contractsStorage = StageCacheSize()
                    self.contractsStorage.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StateInfo')
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I64, 1)
            oprot.writeI64(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.totalWalletsCount is not None:
            oprot.writeFieldBegin('totalWalletsCount', TType.I64, 2)
            oprot.writeI64(self.totalWalletsCount)
            oprot.writeFieldEnd()
        if self.aliveWalletsCount is not None:
            oprot.writeFieldBegin('aliveWalletsCount', TType.I64, 3)
            oprot.writeI64(self.aliveWalletsCount)
            oprot.writeFieldEnd()
        if self.contractsCount is not None:
            oprot.writeFieldBegin('contractsCount', TType.I64, 4)
            oprot.writeI64(self.contractsCount)
            oprot.writeFieldEnd()
        if self.contractsQueueSize is not None:
            oprot.writeFieldBegin('contractsQueueSize', TType.I64, 5)
            oprot.writeI64(self.contractsQueueSize)
            oprot.writeFieldEnd()
        if self.grayListSize is not None:
            oprot.writeFieldBegin('grayListSize', TType.I64, 6)
            oprot.writeI64(self.grayListSize)
            oprot.writeFieldEnd()
        if self.blackListSize is not None:
            oprot.writeFieldBegin('blackListSize', TType.I64, 7)
            oprot.writeI64(self.blackListSize)
            oprot.writeFieldEnd()
        if self.blockCacheSize is not None:
            oprot.writeFieldBegin('blockCacheSize', TType.I64, 8)
            oprot.writeI64(self.blockCacheSize)
            oprot.writeFieldEnd()
        if self.consensusMessage is not None:
            oprot.writeFieldBegin('consensusMessage', TType.STRUCT, 9)
            self.consensusMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.contractsMessage is not None:
            oprot.writeFieldBegin('contractsMessage', TType.STRUCT, 10)
            self.contractsMessage.write(oprot)
            oprot.writeFieldEnd()
        if self.contractsStorage is not None:
            oprot.writeFieldBegin('contractsStorage', TType.STRUCT, 11)
            self.contractsStorage.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BootstrapNode(object):
    """
    Attributes:
     - id
     - alive
     - sequence

    """


    def __init__(self, id=None, alive=None, sequence=None,):
        self.id = id
        self.alive = alive
        self.sequence = sequence

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.alive = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sequence = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('BootstrapNode')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.alive is not None:
            oprot.writeFieldBegin('alive', TType.BOOL, 2)
            oprot.writeBool(self.alive)
            oprot.writeFieldEnd()
        if self.sequence is not None:
            oprot.writeFieldBegin('sequence', TType.I64, 3)
            oprot.writeI64(self.sequence)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeInfo(object):
    """
    Attributes:
     - id
     - version
     - platform
     - session
     - state
     - grayListContent
     - blackListContent
     - bootstrap

    """


    def __init__(self, id=None, version=None, platform=None, session=None, state=None, grayListContent=None, blackListContent=None, bootstrap=None,):
        self.id = id
        self.version = version
        self.platform = platform
        self.session = session
        self.state = state
        self.grayListContent = grayListContent
        self.blackListContent = blackListContent
        self.bootstrap = bootstrap

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.version = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.platform = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.session = SessionInfo()
                    self.session.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.state = StateInfo()
                    self.state.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.grayListContent = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.grayListContent.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.blackListContent = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.blackListContent.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.bootstrap = []
                    (_etype50, _size47) = iprot.readListBegin()
                    for _i51 in range(_size47):
                        _elem52 = BootstrapNode()
                        _elem52.read(iprot)
                        self.bootstrap.append(_elem52)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfo')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.STRING, 2)
            oprot.writeString(self.version.encode('utf-8') if sys.version_info[0] == 2 else self.version)
            oprot.writeFieldEnd()
        if self.platform is not None:
            oprot.writeFieldBegin('platform', TType.I32, 3)
            oprot.writeI32(self.platform)
            oprot.writeFieldEnd()
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.STRUCT, 4)
            self.session.write(oprot)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.STRUCT, 5)
            self.state.write(oprot)
            oprot.writeFieldEnd()
        if self.grayListContent is not None:
            oprot.writeFieldBegin('grayListContent', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.grayListContent))
            for iter53 in self.grayListContent:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.blackListContent is not None:
            oprot.writeFieldBegin('blackListContent', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.blackListContent))
            for iter54 in self.blackListContent:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.bootstrap is not None:
            oprot.writeFieldBegin('bootstrap', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.bootstrap))
            for iter55 in self.bootstrap:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeInfoRequest(object):
    """
    Attributes:
     - session
     - state
     - grayListContent
     - blackListContent

    """


    def __init__(self, session=None, state=None, grayListContent=None, blackListContent=None,):
        self.session = session
        self.state = state
        self.grayListContent = grayListContent
        self.blackListContent = blackListContent

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.session = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.state = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.grayListContent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.blackListContent = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfoRequest')
        if self.session is not None:
            oprot.writeFieldBegin('session', TType.BOOL, 1)
            oprot.writeBool(self.session)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.BOOL, 2)
            oprot.writeBool(self.state)
            oprot.writeFieldEnd()
        if self.grayListContent is not None:
            oprot.writeFieldBegin('grayListContent', TType.BOOL, 3)
            oprot.writeBool(self.grayListContent)
            oprot.writeFieldEnd()
        if self.blackListContent is not None:
            oprot.writeFieldBegin('blackListContent', TType.BOOL, 4)
            oprot.writeBool(self.blackListContent)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeInfoRespone(object):
    """
    Attributes:
     - result
     - info

    """


    def __init__(self, result=None, info=None,):
        self.result = result
        self.info = info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.result = general.ttypes.APIResponse()
                    self.result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.info = NodeInfo()
                    self.info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfoRespone')
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.STRUCT, 1)
            self.result.write(oprot)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.STRUCT, 2)
            self.info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(TransactionId)
TransactionId.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'sequence', None, None, ),  # 1
    (2, TType.I16, 'index', None, None, ),  # 2
)
all_structs.append(AmountCommission)
AmountCommission.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'bits', None, None, ),  # 1
    (2, TType.DOUBLE, 'value', None, None, ),  # 2
)
all_structs.append(Money)
Money.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'amount', [general.ttypes.Amount, None], None, ),  # 1
    (2, TType.DOUBLE, 'value', None, None, ),  # 2
)
all_structs.append(ContractDeploy)
ContractDeploy.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceCode', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [general.ttypes.ByteCodeObject, None], False), None, ),  # 2
    (3, TType.I32, 'tokenStandard', None, None, ),  # 3
)
all_structs.append(ContractCall)
ContractCall.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'getter', None, None, ),  # 1
    (2, TType.STRING, 'method', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'params', (TType.STRUCT, [general.ttypes.Variant, None], False), None, ),  # 3
    (4, TType.LIST, 'uses', (TType.STRING, 'BINARY', False), None, ),  # 4
)
all_structs.append(ContractState)
ContractState.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'hashed', None, None, ),  # 1
    (2, TType.STRING, 'content', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'call', [TransactionId, None], None, ),  # 3
    (4, TType.STRUCT, 'fee', [Money, None], None, ),  # 4
    (5, TType.STRING, 'returned', 'UTF8', None, ),  # 5
)
all_structs.append(Contract)
Contract.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'deploy', [ContractDeploy, None], None, ),  # 1
    (2, TType.STRUCT, 'call', [ContractCall, None], None, ),  # 2
    (3, TType.STRUCT, 'state', [ContractState, None], None, ),  # 3
)
all_structs.append(UserFielData)
UserFielData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'integer', None, None, ),  # 1
    (2, TType.STRING, 'bytes', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'amount', [general.ttypes.Amount, None], None, ),  # 3
)
all_structs.append(UserField)
UserField.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'id', None, None, ),  # 1
    (2, TType.STRUCT, 'data', [UserFielData, None], None, ),  # 2
)
all_structs.append(TransactionData)
TransactionData.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'source', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'target', 'BINARY', None, ),  # 3
    (4, TType.STRUCT, 'sum', [Money, None], None, ),  # 4
    None,  # 5
    (6, TType.STRUCT, 'max_fee', [AmountCommission, None], None, ),  # 6
    (7, TType.STRUCT, 'actual_fee', [AmountCommission, None], None, ),  # 7
    (8, TType.STRING, 'signature', 'BINARY', None, ),  # 8
    (9, TType.I64, 'timestamp', None, None, ),  # 9
    (10, TType.I32, 'type', None, None, ),  # 10
    (11, TType.LIST, 'userFields', (TType.STRUCT, [UserField, None], False), None, ),  # 11
    (12, TType.STRUCT, 'contract', [Contract, None], None, ),  # 12
)
all_structs.append(NodeData)
NodeData.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'short_value', None, None, ),  # 1
    (2, TType.I64, 'ulong_value', None, None, ),  # 2
    (3, TType.STRING, 'publicKey', 'BINARY', None, ),  # 3
)
all_structs.append(GetTransactionResponse)
GetTransactionResponse.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'transaction', [TransactionData, None], None, ),  # 2
)
all_structs.append(ServerNode)
ServerNode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ip', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'port', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'version', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'hash', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'publicKey', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'platform', 'UTF8', None, ),  # 6
    (7, TType.I32, 'countTrust', None, None, ),  # 7
    (8, TType.I64, 'timeRegistration', None, None, ),  # 8
    (9, TType.I64, 'timeActive', None, None, ),  # 9
)
all_structs.append(ActiveNodesResult)
ActiveNodesResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'nodes', (TType.STRUCT, [ServerNode, None], False), None, ),  # 2
)
all_structs.append(ActiveTransactionsResult)
ActiveTransactionsResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRING, 'count', 'UTF8', None, ),  # 2
)
all_structs.append(SessionInfo)
SessionInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'startRound', None, None, ),  # 1
    (2, TType.I64, 'curRound', None, None, ),  # 2
    (3, TType.I64, 'lastBlock', None, None, ),  # 3
    (4, TType.I64, 'uptimeMs', None, None, ),  # 4
    (5, TType.I64, 'aveRoundMs', None, None, ),  # 5
)
all_structs.append(StageCacheSize)
StageCacheSize.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'stage1', None, None, ),  # 1
    (2, TType.I64, 'stage2', None, None, ),  # 2
    (3, TType.I64, 'stage3', None, None, ),  # 3
)
all_structs.append(StateInfo)
StateInfo.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'transactionsCount', None, None, ),  # 1
    (2, TType.I64, 'totalWalletsCount', None, None, ),  # 2
    (3, TType.I64, 'aliveWalletsCount', None, None, ),  # 3
    (4, TType.I64, 'contractsCount', None, None, ),  # 4
    (5, TType.I64, 'contractsQueueSize', None, None, ),  # 5
    (6, TType.I64, 'grayListSize', None, None, ),  # 6
    (7, TType.I64, 'blackListSize', None, None, ),  # 7
    (8, TType.I64, 'blockCacheSize', None, None, ),  # 8
    (9, TType.STRUCT, 'consensusMessage', [StageCacheSize, None], None, ),  # 9
    (10, TType.STRUCT, 'contractsMessage', [StageCacheSize, None], None, ),  # 10
    (11, TType.STRUCT, 'contractsStorage', [StageCacheSize, None], None, ),  # 11
)
all_structs.append(BootstrapNode)
BootstrapNode.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'alive', None, None, ),  # 2
    (3, TType.I64, 'sequence', None, None, ),  # 3
)
all_structs.append(NodeInfo)
NodeInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'version', 'UTF8', None, ),  # 2
    (3, TType.I32, 'platform', None, None, ),  # 3
    (4, TType.STRUCT, 'session', [SessionInfo, None], None, ),  # 4
    (5, TType.STRUCT, 'state', [StateInfo, None], None, ),  # 5
    (6, TType.LIST, 'grayListContent', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.LIST, 'blackListContent', (TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.LIST, 'bootstrap', (TType.STRUCT, [BootstrapNode, None], False), None, ),  # 8
)
all_structs.append(NodeInfoRequest)
NodeInfoRequest.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'session', None, None, ),  # 1
    (2, TType.BOOL, 'state', None, None, ),  # 2
    (3, TType.BOOL, 'grayListContent', None, None, ),  # 3
    (4, TType.BOOL, 'blackListContent', None, None, ),  # 4
)
all_structs.append(NodeInfoRespone)
NodeInfoRespone.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'result', [general.ttypes.APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'info', [NodeInfo, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs
