#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
#from pycs import general
#import general.ttypes
#from pycs import general
from pycs.general.ttypes import *
from thrift.transport import TTransport
all_structs = []


class TransactionType(object):
    TT_Transfer = 0
    TT_ContractDeploy = 1
    TT_ContractCall = 2
    TT_ContractState = 3
    TT_ContractReplenish = 4
    TT_TokenDeploy = 5
    TT_TokenTransfer = 6
    TT_Delegation = 7
    TT_RevokeDelegation = 8
    TT_Hold = 9
    TT_Release = 10
    TT_CancelHold = 11
    TT_DelayedTransfer = 12
    TT_UpdateBootstrapList = 13
    TT_UpdateSettings = 14
    TT_Malformed = 15
    TT_ContractEmitted = 16
    TT_Utility = 17
    TT_Other = 18

    _VALUES_TO_NAMES = {
        0: "TT_Transfer",
        1: "TT_ContractDeploy",
        2: "TT_ContractCall",
        3: "TT_ContractState",
        4: "TT_ContractReplenish",
        5: "TT_TokenDeploy",
        6: "TT_TokenTransfer",
        7: "TT_Delegation",
        8: "TT_RevokeDelegation",
        9: "TT_Hold",
        10: "TT_Release",
        11: "TT_CancelHold",
        12: "TT_DelayedTransfer",
        13: "TT_UpdateBootstrapList",
        14: "TT_UpdateSettings",
        15: "TT_Malformed",
        16: "TT_ContractEmitted",
        17: "TT_Utility",
        18: "TT_Other",
    }

    _NAMES_TO_VALUES = {
        "TT_Transfer": 0,
        "TT_ContractDeploy": 1,
        "TT_ContractCall": 2,
        "TT_ContractState": 3,
        "TT_ContractReplenish": 4,
        "TT_TokenDeploy": 5,
        "TT_TokenTransfer": 6,
        "TT_Delegation": 7,
        "TT_RevokeDelegation": 8,
        "TT_Hold": 9,
        "TT_Release": 10,
        "TT_CancelHold": 11,
        "TT_DelayedTransfer": 12,
        "TT_UpdateBootstrapList": 13,
        "TT_UpdateSettings": 14,
        "TT_Malformed": 15,
        "TT_ContractEmitted": 16,
        "TT_Utility": 17,
        "TT_Other": 18,
    }


class SmartOperationState(object):
    SOS_Pending = 0
    SOS_Success = 1
    SOS_Failed = 2

    _VALUES_TO_NAMES = {
        0: "SOS_Pending",
        1: "SOS_Success",
        2: "SOS_Failed",
    }

    _NAMES_TO_VALUES = {
        "SOS_Pending": 0,
        "SOS_Success": 1,
        "SOS_Failed": 2,
    }


class TransactionState(object):
    INVALID = 0
    VALID = 1
    INPROGRESS = 2

    _VALUES_TO_NAMES = {
        0: "INVALID",
        1: "VALID",
        2: "INPROGRESS",
    }

    _NAMES_TO_VALUES = {
        "INVALID": 0,
        "VALID": 1,
        "INPROGRESS": 2,
    }


class TokensListSortField(object):
    TL_Code = 0
    TL_Name = 1
    TL_Address = 2
    TL_TotalSupply = 3
    TL_HoldersCount = 4
    TL_TransfersCount = 5
    TL_TransactionsCount = 6

    _VALUES_TO_NAMES = {
        0: "TL_Code",
        1: "TL_Name",
        2: "TL_Address",
        3: "TL_TotalSupply",
        4: "TL_HoldersCount",
        5: "TL_TransfersCount",
        6: "TL_TransactionsCount",
    }

    _NAMES_TO_VALUES = {
        "TL_Code": 0,
        "TL_Name": 1,
        "TL_Address": 2,
        "TL_TotalSupply": 3,
        "TL_HoldersCount": 4,
        "TL_TransfersCount": 5,
        "TL_TransactionsCount": 6,
    }


class TokenHoldersSortField(object):
    TH_Balance = 0
    TH_TransfersCount = 1

    _VALUES_TO_NAMES = {
        0: "TH_Balance",
        1: "TH_TransfersCount",
    }

    _NAMES_TO_VALUES = {
        "TH_Balance": 0,
        "TH_TransfersCount": 1,
    }


class WalletsListSort(object):
    WL_CurrentSum = 0
    WL_CreationTime = 1
    WL_TransactionsCount = 2

    _VALUES_TO_NAMES = {
        0: "WL_CurrentSum",
        1: "WL_CreationTime",
        2: "WL_TransactionsCount",
    }

    _NAMES_TO_VALUES = {
        "WL_CurrentSum": 0,
        "WL_CreationTime": 1,
        "WL_TransactionsCount": 2,
    }


class AmountCommission(object):
    """
    Attributes:
     - commission

    """


    def __init__(self, commission=0,):
        self.commission = commission

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.commission = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AmountCommission')
        if self.commission is not None:
            oprot.writeFieldBegin('commission', TType.I16, 1)
            oprot.writeI16(self.commission)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.commission is None:
            raise TProtocolException(message='Required field commission is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CumulativeAmount(object):
    """
    Attributes:
     - integral
     - fraction

    """


    def __init__(self, integral=0, fraction=0,):
        self.integral = integral
        self.fraction = fraction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.integral = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.fraction = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CumulativeAmount')
        if self.integral is not None:
            oprot.writeFieldBegin('integral', TType.I64, 1)
            oprot.writeI64(self.integral)
            oprot.writeFieldEnd()
        if self.fraction is not None:
            oprot.writeFieldBegin('fraction', TType.I64, 2)
            oprot.writeI64(self.fraction)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.integral is None:
            raise TProtocolException(message='Required field integral is unset!')
        if self.fraction is None:
            raise TProtocolException(message='Required field fraction is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractDeploy(object):
    """
    Attributes:
     - sourceCode
     - byteCodeObjects
     - hashState
     - tokenStandard

    """


    def __init__(self, sourceCode=None, byteCodeObjects=None, hashState=None, tokenStandard=None,):
        self.sourceCode = sourceCode
        self.byteCodeObjects = byteCodeObjects
        self.hashState = hashState
        self.tokenStandard = tokenStandard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.sourceCode = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ByteCodeObject()
                        _elem5.read(iprot)
                        self.byteCodeObjects.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hashState = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.tokenStandard = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractDeploy')
        if self.sourceCode is not None:
            oprot.writeFieldBegin('sourceCode', TType.STRING, 1)
            oprot.writeString(self.sourceCode.encode('utf-8') if sys.version_info[0] == 2 else self.sourceCode)
            oprot.writeFieldEnd()
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter6 in self.byteCodeObjects:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.hashState is not None:
            oprot.writeFieldBegin('hashState', TType.STRING, 3)
            oprot.writeString(self.hashState.encode('utf-8') if sys.version_info[0] == 2 else self.hashState)
            oprot.writeFieldEnd()
        if self.tokenStandard is not None:
            oprot.writeFieldBegin('tokenStandard', TType.I32, 4)
            oprot.writeI32(self.tokenStandard)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContract(object):
    """
    Attributes:
     - address
     - deployer
     - smartContractDeploy
     - objectState
     - createTime
     - transactionsCount

    """


    def __init__(self, address=None, deployer=None, smartContractDeploy=None, objectState=None, createTime=None, transactionsCount=None,):
        self.address = address
        self.deployer = deployer
        self.smartContractDeploy = smartContractDeploy
        self.objectState = objectState
        self.createTime = createTime
        self.transactionsCount = transactionsCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.deployer = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.smartContractDeploy = SmartContractDeploy()
                    self.smartContractDeploy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.objectState = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContract')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.deployer is not None:
            oprot.writeFieldBegin('deployer', TType.STRING, 2)
            oprot.writeBinary(self.deployer)
            oprot.writeFieldEnd()
        if self.smartContractDeploy is not None:
            oprot.writeFieldBegin('smartContractDeploy', TType.STRUCT, 3)
            self.smartContractDeploy.write(oprot)
            oprot.writeFieldEnd()
        if self.objectState is not None:
            oprot.writeFieldBegin('objectState', TType.STRING, 4)
            oprot.writeBinary(self.objectState)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 5)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 6)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.address is None:
            raise TProtocolException(message='Required field address is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractInvocation(object):
    """
    Attributes:
     - method
     - params
     - usedContracts
     - forgetNewState
     - smartContractDeploy
     - version

    """


    def __init__(self, method=None, params=None, usedContracts=None, forgetNewState=None, smartContractDeploy=None, version=1,):
        self.method = method
        self.params = params
        self.usedContracts = usedContracts
        self.forgetNewState = forgetNewState
        self.smartContractDeploy = smartContractDeploy
        self.version = version

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = Variant()
                        _elem12.read(iprot)
                        self.params.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.usedContracts = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readBinary()
                        self.usedContracts.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.forgetNewState = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.smartContractDeploy = SmartContractDeploy()
                    self.smartContractDeploy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I16:
                    self.version = iprot.readI16()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractInvocation')
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 1)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter19 in self.params:
                iter19.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.usedContracts is not None:
            oprot.writeFieldBegin('usedContracts', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.usedContracts))
            for iter20 in self.usedContracts:
                oprot.writeBinary(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.forgetNewState is not None:
            oprot.writeFieldBegin('forgetNewState', TType.BOOL, 4)
            oprot.writeBool(self.forgetNewState)
            oprot.writeFieldEnd()
        if self.smartContractDeploy is not None:
            oprot.writeFieldBegin('smartContractDeploy', TType.STRUCT, 5)
            self.smartContractDeploy.write(oprot)
            oprot.writeFieldEnd()
        if self.version is not None:
            oprot.writeFieldBegin('version', TType.I16, 6)
            oprot.writeI16(self.version)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionId(object):
    """
    Attributes:
     - poolSeq
     - index

    """


    def __init__(self, poolSeq=None, index=None,):
        self.poolSeq = poolSeq
        self.index = index

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.poolSeq = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.index = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionId')
        if self.poolSeq is not None:
            oprot.writeFieldBegin('poolSeq', TType.I64, 1)
            oprot.writeI64(self.poolSeq)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I32, 2)
            oprot.writeI32(self.index)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenDeployTransInfo(object):
    """
    Attributes:
     - name
     - code
     - tokenStandard
     - state
     - stateTransaction

    """


    def __init__(self, name=None, code=None, tokenStandard=None, state=None, stateTransaction=None,):
        self.name = name
        self.code = code
        self.tokenStandard = tokenStandard
        self.state = state
        self.stateTransaction = stateTransaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tokenStandard = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.stateTransaction = TransactionId()
                    self.stateTransaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenDeployTransInfo')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.tokenStandard is not None:
            oprot.writeFieldBegin('tokenStandard', TType.I32, 3)
            oprot.writeI32(self.tokenStandard)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 4)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.stateTransaction is not None:
            oprot.writeFieldBegin('stateTransaction', TType.STRUCT, 5)
            self.stateTransaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransferTransInfo(object):
    """
    Attributes:
     - code
     - sender
     - receiver
     - amount
     - state
     - stateTransaction
     - transferSuccess

    """


    def __init__(self, code=None, sender=None, receiver=None, amount=None, state=None, stateTransaction=None, transferSuccess=None,):
        self.code = code
        self.sender = sender
        self.receiver = receiver
        self.amount = amount
        self.state = state
        self.stateTransaction = stateTransaction
        self.transferSuccess = transferSuccess

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.sender = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.receiver = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.amount = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.stateTransaction = TransactionId()
                    self.stateTransaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.transferSuccess = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransferTransInfo')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 1)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.sender is not None:
            oprot.writeFieldBegin('sender', TType.STRING, 2)
            oprot.writeBinary(self.sender)
            oprot.writeFieldEnd()
        if self.receiver is not None:
            oprot.writeFieldBegin('receiver', TType.STRING, 3)
            oprot.writeBinary(self.receiver)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRING, 4)
            oprot.writeString(self.amount.encode('utf-8') if sys.version_info[0] == 2 else self.amount)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 5)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.stateTransaction is not None:
            oprot.writeFieldBegin('stateTransaction', TType.STRUCT, 6)
            self.stateTransaction.write(oprot)
            oprot.writeFieldEnd()
        if self.transferSuccess is not None:
            oprot.writeFieldBegin('transferSuccess', TType.BOOL, 7)
            oprot.writeBool(self.transferSuccess)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartDeployTransInfo(object):
    """
    Attributes:
     - state
     - stateTransaction

    """


    def __init__(self, state=None, stateTransaction=None,):
        self.state = state
        self.stateTransaction = stateTransaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.stateTransaction = TransactionId()
                    self.stateTransaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartDeployTransInfo')
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 1)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.stateTransaction is not None:
            oprot.writeFieldBegin('stateTransaction', TType.STRUCT, 2)
            self.stateTransaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartExecutionTransInfo(object):
    """
    Attributes:
     - method
     - params
     - state
     - stateTransaction

    """


    def __init__(self, method=None, params=None, state=None, stateTransaction=None,):
        self.method = method
        self.params = params
        self.state = state
        self.stateTransaction = stateTransaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = Variant()
                        _elem26.read(iprot)
                        self.params.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.stateTransaction = TransactionId()
                    self.stateTransaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartExecutionTransInfo')
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 1)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter27 in self.params:
                iter27.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.stateTransaction is not None:
            oprot.writeFieldBegin('stateTransaction', TType.STRUCT, 4)
            self.stateTransaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExtraFee(object):
    """
    Attributes:
     - sum
     - comment
     - transactionId

    """


    def __init__(self, sum=None, comment=None, transactionId=None,):
        self.sum = sum
        self.comment = comment
        self.transactionId = transactionId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.sum = Amount()
                    self.sum.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.comment = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.transactionId = TransactionId()
                    self.transactionId.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExtraFee')
        if self.sum is not None:
            oprot.writeFieldBegin('sum', TType.STRUCT, 1)
            self.sum.write(oprot)
            oprot.writeFieldEnd()
        if self.comment is not None:
            oprot.writeFieldBegin('comment', TType.STRING, 2)
            oprot.writeString(self.comment.encode('utf-8') if sys.version_info[0] == 2 else self.comment)
            oprot.writeFieldEnd()
        if self.transactionId is not None:
            oprot.writeFieldBegin('transactionId', TType.STRUCT, 3)
            self.transactionId.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartStateTransInfo(object):
    """
    Attributes:
     - success
     - executionFee
     - returnValue
     - startTransaction

    """


    def __init__(self, success=None, executionFee=None, returnValue=None, startTransaction=None,):
        self.success = success
        self.executionFee = executionFee
        self.returnValue = returnValue
        self.startTransaction = startTransaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.executionFee = Amount()
                    self.executionFee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.returnValue = Variant()
                    self.returnValue.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.startTransaction = TransactionId()
                    self.startTransaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartStateTransInfo')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.executionFee is not None:
            oprot.writeFieldBegin('executionFee', TType.STRUCT, 2)
            self.executionFee.write(oprot)
            oprot.writeFieldEnd()
        if self.returnValue is not None:
            oprot.writeFieldBegin('returnValue', TType.STRUCT, 3)
            self.returnValue.write(oprot)
            oprot.writeFieldEnd()
        if self.startTransaction is not None:
            oprot.writeFieldBegin('startTransaction', TType.STRUCT, 4)
            self.startTransaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartTransInfo(object):
    """
    Attributes:
     - v_tokenDeploy
     - v_tokenTransfer
     - v_smartDeploy
     - v_smartExecution
     - v_smartState

    """


    def __init__(self, v_tokenDeploy=None, v_tokenTransfer=None, v_smartDeploy=None, v_smartExecution=None, v_smartState=None,):
        self.v_tokenDeploy = v_tokenDeploy
        self.v_tokenTransfer = v_tokenTransfer
        self.v_smartDeploy = v_smartDeploy
        self.v_smartExecution = v_smartExecution
        self.v_smartState = v_smartState

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.v_tokenDeploy = TokenDeployTransInfo()
                    self.v_tokenDeploy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.v_tokenTransfer = TokenTransferTransInfo()
                    self.v_tokenTransfer.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.v_smartDeploy = SmartDeployTransInfo()
                    self.v_smartDeploy.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.v_smartExecution = SmartExecutionTransInfo()
                    self.v_smartExecution.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.v_smartState = SmartStateTransInfo()
                    self.v_smartState.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartTransInfo')
        if self.v_tokenDeploy is not None:
            oprot.writeFieldBegin('v_tokenDeploy', TType.STRUCT, 1)
            self.v_tokenDeploy.write(oprot)
            oprot.writeFieldEnd()
        if self.v_tokenTransfer is not None:
            oprot.writeFieldBegin('v_tokenTransfer', TType.STRUCT, 2)
            self.v_tokenTransfer.write(oprot)
            oprot.writeFieldEnd()
        if self.v_smartDeploy is not None:
            oprot.writeFieldBegin('v_smartDeploy', TType.STRUCT, 3)
            self.v_smartDeploy.write(oprot)
            oprot.writeFieldEnd()
        if self.v_smartExecution is not None:
            oprot.writeFieldBegin('v_smartExecution', TType.STRUCT, 4)
            self.v_smartExecution.write(oprot)
            oprot.writeFieldEnd()
        if self.v_smartState is not None:
            oprot.writeFieldBegin('v_smartState', TType.STRUCT, 5)
            self.v_smartState.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transaction(object):
    """
    Attributes:
     - id
     - source
     - target
     - amount
     - balance
     - currency
     - signature
     - smartContract
     - fee
     - timeCreation
     - userFields
     - type
     - smartInfo
     - extraFee
     - poolNumber
     - usedContracts

    """


    def __init__(self, id=None, source=None, target=None, amount=None, balance=None, currency=None, signature=None, smartContract=None, fee=None, timeCreation=None, userFields=None, type=None, smartInfo=None, extraFee=None, poolNumber=None, usedContracts=None,):
        self.id = id
        self.source = source
        self.target = target
        self.amount = amount
        self.balance = balance
        self.currency = currency
        self.signature = signature
        self.smartContract = smartContract
        self.fee = fee
        self.timeCreation = timeCreation
        self.userFields = userFields
        self.type = type
        self.smartInfo = smartInfo
        self.extraFee = extraFee
        self.poolNumber = poolNumber
        self.usedContracts = usedContracts

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.target = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.amount = Amount()
                    self.amount.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.currency = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.signature = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRUCT:
                    self.smartContract = SmartContractInvocation()
                    self.smartContract.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.fee = AmountCommission()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.timeCreation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.userFields = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRUCT:
                    self.smartInfo = SmartTransInfo()
                    self.smartInfo.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.extraFee = []
                    (_etype31, _size28) = iprot.readListBegin()
                    for _i32 in range(_size28):
                        _elem33 = ExtraFee()
                        _elem33.read(iprot)
                        self.extraFee.append(_elem33)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.I64:
                    self.poolNumber = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.LIST:
                    self.usedContracts = []
                    (_etype37, _size34) = iprot.readListBegin()
                    for _i38 in range(_size34):
                        _elem39 = iprot.readBinary()
                        self.usedContracts.append(_elem39)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Transaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 2)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.STRING, 3)
            oprot.writeBinary(self.target)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRUCT, 4)
            self.amount.write(oprot)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 5)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.BYTE, 6)
            oprot.writeByte(self.currency)
            oprot.writeFieldEnd()
        if self.signature is not None:
            oprot.writeFieldBegin('signature', TType.STRING, 7)
            oprot.writeBinary(self.signature)
            oprot.writeFieldEnd()
        if self.smartContract is not None:
            oprot.writeFieldBegin('smartContract', TType.STRUCT, 8)
            self.smartContract.write(oprot)
            oprot.writeFieldEnd()
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 9)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        if self.timeCreation is not None:
            oprot.writeFieldBegin('timeCreation', TType.I64, 10)
            oprot.writeI64(self.timeCreation)
            oprot.writeFieldEnd()
        if self.userFields is not None:
            oprot.writeFieldBegin('userFields', TType.STRING, 11)
            oprot.writeBinary(self.userFields)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 12)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.smartInfo is not None:
            oprot.writeFieldBegin('smartInfo', TType.STRUCT, 13)
            self.smartInfo.write(oprot)
            oprot.writeFieldEnd()
        if self.extraFee is not None:
            oprot.writeFieldBegin('extraFee', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.extraFee))
            for iter40 in self.extraFee:
                iter40.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.poolNumber is not None:
            oprot.writeFieldBegin('poolNumber', TType.I64, 15)
            oprot.writeI64(self.poolNumber)
            oprot.writeFieldEnd()
        if self.usedContracts is not None:
            oprot.writeFieldBegin('usedContracts', TType.LIST, 16)
            oprot.writeListBegin(TType.STRING, len(self.usedContracts))
            for iter41 in self.usedContracts:
                oprot.writeBinary(iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SealedTransaction(object):
    """
    Attributes:
     - id
     - trxn

    """


    def __init__(self, id=None, trxn=None,):
        self.id = id
        self.trxn = trxn

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.id = TransactionId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.trxn = Transaction()
                    self.trxn.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SealedTransaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 1)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.trxn is not None:
            oprot.writeFieldBegin('trxn', TType.STRUCT, 2)
            self.trxn.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ShortTransaction(object):
    """
    Attributes:
     - id
     - source
     - target
     - amount
     - fee
     - timeCreation
     - currency
     - type
     - userFields

    """


    def __init__(self, id=None, source=None, target=None, amount=None, fee=None, timeCreation=None, currency=None, type=None, userFields=None,):
        self.id = id
        self.source = source
        self.target = target
        self.amount = amount
        self.fee = fee
        self.timeCreation = timeCreation
        self.currency = currency
        self.type = type
        self.userFields = userFields

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.id = TransactionId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.source = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.target = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.amount = Amount()
                    self.amount.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.fee = AmountCommission()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.timeCreation = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BYTE:
                    self.currency = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.userFields = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ShortTransaction')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 1)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.source is not None:
            oprot.writeFieldBegin('source', TType.STRING, 2)
            oprot.writeBinary(self.source)
            oprot.writeFieldEnd()
        if self.target is not None:
            oprot.writeFieldBegin('target', TType.STRING, 3)
            oprot.writeBinary(self.target)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRUCT, 4)
            self.amount.write(oprot)
            oprot.writeFieldEnd()
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 5)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        if self.timeCreation is not None:
            oprot.writeFieldBegin('timeCreation', TType.I64, 6)
            oprot.writeI64(self.timeCreation)
            oprot.writeFieldEnd()
        if self.currency is not None:
            oprot.writeFieldBegin('currency', TType.BYTE, 7)
            oprot.writeByte(self.currency)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 8)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.userFields is not None:
            oprot.writeFieldBegin('userFields', TType.STRING, 10)
            oprot.writeBinary(self.userFields)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Pool(object):
    """
    Attributes:
     - hash
     - prevHash
     - time
     - transactionsCount
     - poolNumber
     - writer
     - totalFee
     - confidants
     - realTrusted
     - numberTrusted

    """


    def __init__(self, hash=None, prevHash=None, time=None, transactionsCount=None, poolNumber=None, writer=None, totalFee=None, confidants=None, realTrusted=None, numberTrusted=None,):
        self.hash = hash
        self.prevHash = prevHash
        self.time = time
        self.transactionsCount = transactionsCount
        self.poolNumber = poolNumber
        self.writer = writer
        self.totalFee = totalFee
        self.confidants = confidants
        self.realTrusted = realTrusted
        self.numberTrusted = numberTrusted

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.prevHash = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.poolNumber = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.writer = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.totalFee = Amount()
                    self.totalFee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.confidants = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = iprot.readBinary()
                        self.confidants.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.realTrusted = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BYTE:
                    self.numberTrusted = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Pool')
        if self.hash is not None:
            oprot.writeFieldBegin('hash', TType.STRING, 1)
            oprot.writeBinary(self.hash)
            oprot.writeFieldEnd()
        if self.prevHash is not None:
            oprot.writeFieldBegin('prevHash', TType.STRING, 2)
            oprot.writeBinary(self.prevHash)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 3)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 4)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.poolNumber is not None:
            oprot.writeFieldBegin('poolNumber', TType.I64, 5)
            oprot.writeI64(self.poolNumber)
            oprot.writeFieldEnd()
        if self.writer is not None:
            oprot.writeFieldBegin('writer', TType.STRING, 6)
            oprot.writeBinary(self.writer)
            oprot.writeFieldEnd()
        if self.totalFee is not None:
            oprot.writeFieldBegin('totalFee', TType.STRUCT, 7)
            self.totalFee.write(oprot)
            oprot.writeFieldEnd()
        if self.confidants is not None:
            oprot.writeFieldBegin('confidants', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.confidants))
            for iter48 in self.confidants:
                oprot.writeBinary(iter48)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.realTrusted is not None:
            oprot.writeFieldBegin('realTrusted', TType.I64, 9)
            oprot.writeI64(self.realTrusted)
            oprot.writeFieldEnd()
        if self.numberTrusted is not None:
            oprot.writeFieldBegin('numberTrusted', TType.BYTE, 10)
            oprot.writeByte(self.numberTrusted)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DelegatedItem(object):
    """
    Attributes:
     - wallet
     - sum
     - validUntil

    """


    def __init__(self, wallet=None, sum=None, validUntil=None,):
        self.wallet = wallet
        self.sum = sum
        self.validUntil = validUntil

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.wallet = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.sum = Amount()
                    self.sum.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.validUntil = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DelegatedItem')
        if self.wallet is not None:
            oprot.writeFieldBegin('wallet', TType.STRING, 1)
            oprot.writeBinary(self.wallet)
            oprot.writeFieldEnd()
        if self.sum is not None:
            oprot.writeFieldBegin('sum', TType.STRUCT, 2)
            self.sum.write(oprot)
            oprot.writeFieldEnd()
        if self.validUntil is not None:
            oprot.writeFieldBegin('validUntil', TType.I64, 3)
            oprot.writeI64(self.validUntil)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Delegated(object):
    """
    Attributes:
     - incoming
     - outgoing
     - donors
     - recipients

    """


    def __init__(self, incoming=None, outgoing=None, donors=None, recipients=None,):
        self.incoming = incoming
        self.outgoing = outgoing
        self.donors = donors
        self.recipients = recipients

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.incoming = Amount()
                    self.incoming.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.outgoing = Amount()
                    self.outgoing.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.donors = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = DelegatedItem()
                        _elem54.read(iprot)
                        self.donors.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.recipients = []
                    (_etype58, _size55) = iprot.readListBegin()
                    for _i59 in range(_size55):
                        _elem60 = DelegatedItem()
                        _elem60.read(iprot)
                        self.recipients.append(_elem60)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Delegated')
        if self.incoming is not None:
            oprot.writeFieldBegin('incoming', TType.STRUCT, 1)
            self.incoming.write(oprot)
            oprot.writeFieldEnd()
        if self.outgoing is not None:
            oprot.writeFieldBegin('outgoing', TType.STRUCT, 2)
            self.outgoing.write(oprot)
            oprot.writeFieldEnd()
        if self.donors is not None:
            oprot.writeFieldBegin('donors', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.donors))
            for iter61 in self.donors:
                iter61.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.recipients is not None:
            oprot.writeFieldBegin('recipients', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.recipients))
            for iter62 in self.recipients:
                iter62.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletData(object):
    """
    Attributes:
     - walletId
     - balance
     - lastTransactionId
     - delegated

    """


    def __init__(self, walletId=None, balance=None, lastTransactionId=None, delegated=None,):
        self.walletId = walletId
        self.balance = balance
        self.lastTransactionId = lastTransactionId
        self.delegated = delegated

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.walletId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastTransactionId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.delegated = Delegated()
                    self.delegated.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletData')
        if self.walletId is not None:
            oprot.writeFieldBegin('walletId', TType.I32, 1)
            oprot.writeI32(self.walletId)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.lastTransactionId is not None:
            oprot.writeFieldBegin('lastTransactionId', TType.I64, 3)
            oprot.writeI64(self.lastTransactionId)
            oprot.writeFieldEnd()
        if self.delegated is not None:
            oprot.writeFieldBegin('delegated', TType.STRUCT, 4)
            self.delegated.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PeriodStats(object):
    """
    Attributes:
     - periodDuration
     - poolsCount
     - transactionsCount
     - balancePerCurrency
     - smartContractsCount
     - transactionsSmartCount

    """


    def __init__(self, periodDuration=None, poolsCount=None, transactionsCount=None, balancePerCurrency=None, smartContractsCount=None, transactionsSmartCount=None,):
        self.periodDuration = periodDuration
        self.poolsCount = poolsCount
        self.transactionsCount = transactionsCount
        self.balancePerCurrency = balancePerCurrency
        self.smartContractsCount = smartContractsCount
        self.transactionsSmartCount = transactionsSmartCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.periodDuration = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.poolsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.balancePerCurrency = {}
                    (_ktype64, _vtype65, _size63) = iprot.readMapBegin()
                    for _i67 in range(_size63):
                        _key68 = iprot.readByte()
                        _val69 = CumulativeAmount()
                        _val69.read(iprot)
                        self.balancePerCurrency[_key68] = _val69
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.smartContractsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.transactionsSmartCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PeriodStats')
        if self.periodDuration is not None:
            oprot.writeFieldBegin('periodDuration', TType.I64, 1)
            oprot.writeI64(self.periodDuration)
            oprot.writeFieldEnd()
        if self.poolsCount is not None:
            oprot.writeFieldBegin('poolsCount', TType.I32, 2)
            oprot.writeI32(self.poolsCount)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 3)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.balancePerCurrency is not None:
            oprot.writeFieldBegin('balancePerCurrency', TType.MAP, 4)
            oprot.writeMapBegin(TType.BYTE, TType.STRUCT, len(self.balancePerCurrency))
            for kiter70, viter71 in self.balancePerCurrency.items():
                oprot.writeByte(kiter70)
                viter71.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.smartContractsCount is not None:
            oprot.writeFieldBegin('smartContractsCount', TType.I32, 5)
            oprot.writeI32(self.smartContractsCount)
            oprot.writeFieldEnd()
        if self.transactionsSmartCount is not None:
            oprot.writeFieldBegin('transactionsSmartCount', TType.I32, 6)
            oprot.writeI32(self.transactionsSmartCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletDataGetResult(object):
    """
    Attributes:
     - status
     - walletData

    """


    def __init__(self, status=None, walletData=None,):
        self.status = status
        self.walletData = walletData

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.walletData = WalletData()
                    self.walletData.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletDataGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.walletData is not None:
            oprot.writeFieldBegin('walletData', TType.STRUCT, 2)
            self.walletData.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletIdGetResult(object):
    """
    Attributes:
     - status
     - walletId

    """


    def __init__(self, status=None, walletId=None,):
        self.status = status
        self.walletId = walletId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.walletId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletIdGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.walletId is not None:
            oprot.writeFieldBegin('walletId', TType.I32, 2)
            oprot.writeI32(self.walletId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletTransactionsCountGetResult(object):
    """
    Attributes:
     - status
     - lastTransactionInnerId

    """


    def __init__(self, status=None, lastTransactionInnerId=None,):
        self.status = status
        self.lastTransactionInnerId = lastTransactionInnerId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.lastTransactionInnerId = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletTransactionsCountGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.lastTransactionInnerId is not None:
            oprot.writeFieldBegin('lastTransactionInnerId', TType.I64, 2)
            oprot.writeI64(self.lastTransactionInnerId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletBalanceGetResult(object):
    """
    Attributes:
     - status
     - balance
     - delegated

    """


    def __init__(self, status=None, balance=None, delegated=None,):
        self.status = status
        self.balance = balance
        self.delegated = delegated

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.delegated = Delegated()
                    self.delegated.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletBalanceGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.delegated is not None:
            oprot.writeFieldBegin('delegated', TType.STRUCT, 3)
            self.delegated.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionGetResult(object):
    """
    Attributes:
     - status
     - found
     - state
     - roundNum
     - transaction

    """


    def __init__(self, status=None, found=None, state=None, roundNum=None, transaction=None,):
        self.status = status
        self.found = found
        self.state = state
        self.roundNum = roundNum
        self.transaction = transaction

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.found = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.roundNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.transaction = SealedTransaction()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.found is not None:
            oprot.writeFieldBegin('found', TType.BOOL, 2)
            oprot.writeBool(self.found)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.roundNum is not None:
            oprot.writeFieldBegin('roundNum', TType.I32, 4)
            oprot.writeI32(self.roundNum)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 5)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionsGetResult(object):
    """
    Attributes:
     - status
     - result
     - total_trxns_count
     - transactions

    """


    def __init__(self, status=None, result=None, total_trxns_count=None, transactions=None,):
        self.status = status
        self.result = result
        self.total_trxns_count = total_trxns_count
        self.transactions = transactions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.total_trxns_count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype75, _size72) = iprot.readListBegin()
                    for _i76 in range(_size72):
                        _elem77 = SealedTransaction()
                        _elem77.read(iprot)
                        self.transactions.append(_elem77)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.total_trxns_count is not None:
            oprot.writeFieldBegin('total_trxns_count', TType.I32, 3)
            oprot.writeI32(self.total_trxns_count)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter78 in self.transactions:
                iter78.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionFlowResult(object):
    """
    Attributes:
     - status
     - smart_contract_result
     - roundNum
     - id
     - fee
     - extraFee

    """


    def __init__(self, status=None, smart_contract_result=None, roundNum=None, id=None, fee=None, extraFee=None,):
        self.status = status
        self.smart_contract_result = smart_contract_result
        self.roundNum = roundNum
        self.id = id
        self.fee = fee
        self.extraFee = extraFee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.smart_contract_result = Variant()
                    self.smart_contract_result.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.roundNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.id = TransactionId()
                    self.id.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.fee = Amount()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.extraFee = []
                    (_etype82, _size79) = iprot.readListBegin()
                    for _i83 in range(_size79):
                        _elem84 = ExtraFee()
                        _elem84.read(iprot)
                        self.extraFee.append(_elem84)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionFlowResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.smart_contract_result is not None:
            oprot.writeFieldBegin('smart_contract_result', TType.STRUCT, 2)
            self.smart_contract_result.write(oprot)
            oprot.writeFieldEnd()
        if self.roundNum is not None:
            oprot.writeFieldBegin('roundNum', TType.I32, 3)
            oprot.writeI32(self.roundNum)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRUCT, 4)
            self.id.write(oprot)
            oprot.writeFieldEnd()
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 5)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        if self.extraFee is not None:
            oprot.writeFieldBegin('extraFee', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.extraFee))
            for iter85 in self.extraFee:
                iter85.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SingleTokenQuery(object):
    """
    Attributes:
     - tokenAddress
     - fromId

    """


    def __init__(self, tokenAddress=None, fromId=None,):
        self.tokenAddress = tokenAddress
        self.fromId = fromId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tokenAddress = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.fromId = TransactionId()
                    self.fromId.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SingleTokenQuery')
        if self.tokenAddress is not None:
            oprot.writeFieldBegin('tokenAddress', TType.STRING, 1)
            oprot.writeBinary(self.tokenAddress)
            oprot.writeFieldEnd()
        if self.fromId is not None:
            oprot.writeFieldBegin('fromId', TType.STRUCT, 2)
            self.fromId.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SingleQuery(object):
    """
    Attributes:
     - requestedAddress
     - fromId
     - tokensList

    """


    def __init__(self, requestedAddress=None, fromId=None, tokensList=None,):
        self.requestedAddress = requestedAddress
        self.fromId = fromId
        self.tokensList = tokensList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestedAddress = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.fromId = TransactionId()
                    self.fromId.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.tokensList = []
                    (_etype89, _size86) = iprot.readListBegin()
                    for _i90 in range(_size86):
                        _elem91 = SingleTokenQuery()
                        _elem91.read(iprot)
                        self.tokensList.append(_elem91)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SingleQuery')
        if self.requestedAddress is not None:
            oprot.writeFieldBegin('requestedAddress', TType.STRING, 1)
            oprot.writeBinary(self.requestedAddress)
            oprot.writeFieldEnd()
        if self.fromId is not None:
            oprot.writeFieldBegin('fromId', TType.STRUCT, 2)
            self.fromId.write(oprot)
            oprot.writeFieldEnd()
        if self.tokensList is not None:
            oprot.writeFieldBegin('tokensList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.tokensList))
            for iter92 in self.tokensList:
                iter92.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionsQuery(object):
    """
    Attributes:
     - flag
     - queries

    """


    def __init__(self, flag=None, queries=None,):
        self.flag = flag
        self.queries = queries

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I16:
                    self.flag = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.queries = []
                    (_etype96, _size93) = iprot.readListBegin()
                    for _i97 in range(_size93):
                        _elem98 = SingleQuery()
                        _elem98.read(iprot)
                        self.queries.append(_elem98)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionsQuery')
        if self.flag is not None:
            oprot.writeFieldBegin('flag', TType.I16, 1)
            oprot.writeI16(self.flag)
            oprot.writeFieldEnd()
        if self.queries is not None:
            oprot.writeFieldBegin('queries', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.queries))
            for iter99 in self.queries:
                iter99.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SelectedTokenTransfers(object):
    """
    Attributes:
     - tokenAddress
     - tokenName
     - tokenTiker
     - transfers

    """


    def __init__(self, tokenAddress=None, tokenName=None, tokenTiker=None, transfers=None,):
        self.tokenAddress = tokenAddress
        self.tokenName = tokenName
        self.tokenTiker = tokenTiker
        self.transfers = transfers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.tokenAddress = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.tokenName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tokenTiker = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.transfers = []
                    (_etype103, _size100) = iprot.readListBegin()
                    for _i104 in range(_size100):
                        _elem105 = TokenTransfer()
                        _elem105.read(iprot)
                        self.transfers.append(_elem105)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SelectedTokenTransfers')
        if self.tokenAddress is not None:
            oprot.writeFieldBegin('tokenAddress', TType.STRING, 1)
            oprot.writeBinary(self.tokenAddress)
            oprot.writeFieldEnd()
        if self.tokenName is not None:
            oprot.writeFieldBegin('tokenName', TType.STRING, 2)
            oprot.writeString(self.tokenName.encode('utf-8') if sys.version_info[0] == 2 else self.tokenName)
            oprot.writeFieldEnd()
        if self.tokenTiker is not None:
            oprot.writeFieldBegin('tokenTiker', TType.STRING, 3)
            oprot.writeString(self.tokenTiker.encode('utf-8') if sys.version_info[0] == 2 else self.tokenTiker)
            oprot.writeFieldEnd()
        if self.transfers is not None:
            oprot.writeFieldBegin('transfers', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.transfers))
            for iter106 in self.transfers:
                iter106.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PublicKeyTransactions(object):
    """
    Attributes:
     - requestedAddress
     - transactions
     - transfersList

    """


    def __init__(self, requestedAddress=None, transactions=None, transfersList=None,):
        self.requestedAddress = requestedAddress
        self.transactions = transactions
        self.transfersList = transfersList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.requestedAddress = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype110, _size107) = iprot.readListBegin()
                    for _i111 in range(_size107):
                        _elem112 = ShortTransaction()
                        _elem112.read(iprot)
                        self.transactions.append(_elem112)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.transfersList = []
                    (_etype116, _size113) = iprot.readListBegin()
                    for _i117 in range(_size113):
                        _elem118 = SelectedTokenTransfers()
                        _elem118.read(iprot)
                        self.transfersList.append(_elem118)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PublicKeyTransactions')
        if self.requestedAddress is not None:
            oprot.writeFieldBegin('requestedAddress', TType.STRING, 1)
            oprot.writeBinary(self.requestedAddress)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter119 in self.transactions:
                iter119.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.transfersList is not None:
            oprot.writeFieldBegin('transfersList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.transfersList))
            for iter120 in self.transfersList:
                iter120.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FilteredTransactionsListResult(object):
    """
    Attributes:
     - status
     - queryResponse

    """


    def __init__(self, status=None, queryResponse=None,):
        self.status = status
        self.queryResponse = queryResponse

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.queryResponse = []
                    (_etype124, _size121) = iprot.readListBegin()
                    for _i125 in range(_size121):
                        _elem126 = PublicKeyTransactions()
                        _elem126.read(iprot)
                        self.queryResponse.append(_elem126)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FilteredTransactionsListResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.queryResponse is not None:
            oprot.writeFieldBegin('queryResponse', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.queryResponse))
            for iter127 in self.queryResponse:
                iter127.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolListGetResult(object):
    """
    Attributes:
     - status
     - result
     - count
     - pools

    """


    def __init__(self, status=None, result=None, count=None, pools=None,):
        self.status = status
        self.result = result
        self.count = count
        self.pools = pools

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.result = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.pools = []
                    (_etype131, _size128) = iprot.readListBegin()
                    for _i132 in range(_size128):
                        _elem133 = Pool()
                        _elem133.read(iprot)
                        self.pools.append(_elem133)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.result is not None:
            oprot.writeFieldBegin('result', TType.BOOL, 2)
            oprot.writeBool(self.result)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 3)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.pools is not None:
            oprot.writeFieldBegin('pools', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.pools))
            for iter134 in self.pools:
                iter134.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolInfoGetResult(object):
    """
    Attributes:
     - status
     - isFound
     - pool

    """


    def __init__(self, status=None, isFound=None, pool=None,):
        self.status = status
        self.isFound = isFound
        self.pool = pool

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isFound = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.pool = Pool()
                    self.pool.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolInfoGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.isFound is not None:
            oprot.writeFieldBegin('isFound', TType.BOOL, 2)
            oprot.writeBool(self.isFound)
            oprot.writeFieldEnd()
        if self.pool is not None:
            oprot.writeFieldBegin('pool', TType.STRUCT, 3)
            self.pool.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PoolTransactionsGetResult(object):
    """
    Attributes:
     - status
     - transactions

    """


    def __init__(self, status=None, transactions=None,):
        self.status = status
        self.transactions = transactions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype138, _size135) = iprot.readListBegin()
                    for _i139 in range(_size135):
                        _elem140 = SealedTransaction()
                        _elem140.read(iprot)
                        self.transactions.append(_elem140)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PoolTransactionsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter141 in self.transactions:
                iter141.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StatsGetResult(object):
    """
    Attributes:
     - status
     - stats

    """


    def __init__(self, status=None, stats=None,):
        self.status = status
        self.stats = stats

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.stats = []
                    (_etype145, _size142) = iprot.readListBegin()
                    for _i146 in range(_size142):
                        _elem147 = PeriodStats()
                        _elem147.read(iprot)
                        self.stats.append(_elem147)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StatsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.stats is not None:
            oprot.writeFieldBegin('stats', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.stats))
            for iter148 in self.stats:
                iter148.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractGetResult(object):
    """
    Attributes:
     - status
     - smartContract

    """


    def __init__(self, status=None, smartContract=None,):
        self.status = status
        self.smartContract = smartContract

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.smartContract = SmartContract()
                    self.smartContract.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.smartContract is not None:
            oprot.writeFieldBegin('smartContract', TType.STRUCT, 2)
            self.smartContract.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractAddressesListGetResult(object):
    """
    Attributes:
     - status
     - addressesList

    """


    def __init__(self, status=None, addressesList=None,):
        self.status = status
        self.addressesList = addressesList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.addressesList = []
                    (_etype152, _size149) = iprot.readListBegin()
                    for _i153 in range(_size149):
                        _elem154 = iprot.readBinary()
                        self.addressesList.append(_elem154)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractAddressesListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.addressesList is not None:
            oprot.writeFieldBegin('addressesList', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.addressesList))
            for iter155 in self.addressesList:
                oprot.writeBinary(iter155)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractsListGetResult(object):
    """
    Attributes:
     - status
     - count
     - smartContractsList

    """


    def __init__(self, status=None, count=None, smartContractsList=None,):
        self.status = status
        self.count = count
        self.smartContractsList = smartContractsList

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.smartContractsList = []
                    (_etype159, _size156) = iprot.readListBegin()
                    for _i160 in range(_size156):
                        _elem161 = SmartContract()
                        _elem161.read(iprot)
                        self.smartContractsList.append(_elem161)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractsListGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.smartContractsList is not None:
            oprot.writeFieldBegin('smartContractsList', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.smartContractsList))
            for iter162 in self.smartContractsList:
                iter162.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransactionsStateGetResult(object):
    """
    Attributes:
     - status
     - states
     - roundNum

    """


    def __init__(self, status=None, states=None, roundNum=None,):
        self.status = status
        self.states = states
        self.roundNum = roundNum

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.states = {}
                    (_ktype164, _vtype165, _size163) = iprot.readMapBegin()
                    for _i167 in range(_size163):
                        _key168 = iprot.readI64()
                        _val169 = iprot.readI32()
                        self.states[_key168] = _val169
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.roundNum = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TransactionsStateGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.states is not None:
            oprot.writeFieldBegin('states', TType.MAP, 2)
            oprot.writeMapBegin(TType.I64, TType.I32, len(self.states))
            for kiter170, viter171 in self.states.items():
                oprot.writeI64(kiter170)
                oprot.writeI32(viter171)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.roundNum is not None:
            oprot.writeFieldBegin('roundNum', TType.I32, 3)
            oprot.writeI32(self.roundNum)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartMethodParamsGetResult(object):
    """
    Attributes:
     - status
     - method
     - params

    """


    def __init__(self, status=None, method=None, params=None,):
        self.status = status
        self.method = method
        self.params = params

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype175, _size172) = iprot.readListBegin()
                    for _i176 in range(_size172):
                        _elem177 = Variant()
                        _elem177.read(iprot)
                        self.params.append(_elem177)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartMethodParamsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 2)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter178 in self.params:
                iter178.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ContractAllMethodsGetResult(object):
    """
    Attributes:
     - code
     - message
     - methods

    """


    def __init__(self, code=None, message=None, methods=None,):
        self.code = code
        self.message = message
        self.methods = methods

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.code = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.methods = []
                    (_etype182, _size179) = iprot.readListBegin()
                    for _i183 in range(_size179):
                        _elem184 = MethodDescription()
                        _elem184.read(iprot)
                        self.methods.append(_elem184)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ContractAllMethodsGetResult')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.BYTE, 1)
            oprot.writeByte(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        if self.methods is not None:
            oprot.writeFieldBegin('methods', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.methods))
            for iter185 in self.methods:
                iter185.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractMethodArgument(object):
    """
    Attributes:
     - type
     - name

    """


    def __init__(self, type=None, name=None,):
        self.type = type
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractMethodArgument')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractMethod(object):
    """
    Attributes:
     - returnType
     - name
     - arguments

    """


    def __init__(self, returnType=None, name=None, arguments=None,):
        self.returnType = returnType
        self.name = name
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.returnType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype189, _size186) = iprot.readListBegin()
                    for _i190 in range(_size186):
                        _elem191 = SmartContractMethodArgument()
                        _elem191.read(iprot)
                        self.arguments.append(_elem191)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractMethod')
        if self.returnType is not None:
            oprot.writeFieldBegin('returnType', TType.STRING, 1)
            oprot.writeString(self.returnType.encode('utf-8') if sys.version_info[0] == 2 else self.returnType)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.arguments))
            for iter192 in self.arguments:
                iter192.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractDataResult(object):
    """
    Attributes:
     - status
     - methods
     - variables

    """


    def __init__(self, status=None, methods=None, variables=None,):
        self.status = status
        self.methods = methods
        self.variables = variables

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.methods = []
                    (_etype196, _size193) = iprot.readListBegin()
                    for _i197 in range(_size193):
                        _elem198 = SmartContractMethod()
                        _elem198.read(iprot)
                        self.methods.append(_elem198)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.variables = {}
                    (_ktype200, _vtype201, _size199) = iprot.readMapBegin()
                    for _i203 in range(_size199):
                        _key204 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val205 = Variant()
                        _val205.read(iprot)
                        self.variables[_key204] = _val205
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractDataResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.methods is not None:
            oprot.writeFieldBegin('methods', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.methods))
            for iter206 in self.methods:
                iter206.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.variables is not None:
            oprot.writeFieldBegin('variables', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.variables))
            for kiter207, viter208 in self.variables.items():
                oprot.writeString(kiter207.encode('utf-8') if sys.version_info[0] == 2 else kiter207)
                viter208.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SmartContractCompileResult(object):
    """
    Attributes:
     - status
     - byteCodeObjects
     - tokenStandard

    """


    def __init__(self, status=None, byteCodeObjects=None, tokenStandard=None,):
        self.status = status
        self.byteCodeObjects = byteCodeObjects
        self.tokenStandard = tokenStandard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.byteCodeObjects = []
                    (_etype212, _size209) = iprot.readListBegin()
                    for _i213 in range(_size209):
                        _elem214 = ByteCodeObject()
                        _elem214.read(iprot)
                        self.byteCodeObjects.append(_elem214)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tokenStandard = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SmartContractCompileResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.byteCodeObjects is not None:
            oprot.writeFieldBegin('byteCodeObjects', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.byteCodeObjects))
            for iter215 in self.byteCodeObjects:
                iter215.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tokenStandard is not None:
            oprot.writeFieldBegin('tokenStandard', TType.I32, 3)
            oprot.writeI32(self.tokenStandard)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenInfo(object):
    """
    Attributes:
     - address
     - code
     - name
     - totalSupply
     - owner
     - transfersCount
     - transactionsCount
     - holdersCount
     - tokenStandard

    """


    def __init__(self, address=None, code=None, name=None, totalSupply=None, owner=None, transfersCount=None, transactionsCount=None, holdersCount=None, tokenStandard=None,):
        self.address = address
        self.code = code
        self.name = name
        self.totalSupply = totalSupply
        self.owner = owner
        self.transfersCount = transfersCount
        self.transactionsCount = transactionsCount
        self.holdersCount = holdersCount
        self.tokenStandard = tokenStandard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.totalSupply = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.owner = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.transfersCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.transactionsCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.holdersCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.tokenStandard = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenInfo')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.totalSupply is not None:
            oprot.writeFieldBegin('totalSupply', TType.STRING, 4)
            oprot.writeString(self.totalSupply.encode('utf-8') if sys.version_info[0] == 2 else self.totalSupply)
            oprot.writeFieldEnd()
        if self.owner is not None:
            oprot.writeFieldBegin('owner', TType.STRING, 5)
            oprot.writeBinary(self.owner)
            oprot.writeFieldEnd()
        if self.transfersCount is not None:
            oprot.writeFieldBegin('transfersCount', TType.I32, 6)
            oprot.writeI32(self.transfersCount)
            oprot.writeFieldEnd()
        if self.transactionsCount is not None:
            oprot.writeFieldBegin('transactionsCount', TType.I32, 7)
            oprot.writeI32(self.transactionsCount)
            oprot.writeFieldEnd()
        if self.holdersCount is not None:
            oprot.writeFieldBegin('holdersCount', TType.I32, 8)
            oprot.writeI32(self.holdersCount)
            oprot.writeFieldEnd()
        if self.tokenStandard is not None:
            oprot.writeFieldBegin('tokenStandard', TType.I32, 9)
            oprot.writeI32(self.tokenStandard)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransaction(object):
    """
    Attributes:
     - token
     - transaction
     - time
     - initiator
     - method
     - params
     - state

    """


    def __init__(self, token=None, transaction=None, time=None, initiator=None, method=None, params=None, state=None,):
        self.token = token
        self.transaction = transaction
        self.time = time
        self.initiator = initiator
        self.method = method
        self.params = params
        self.state = state

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.transaction = TransactionId()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.initiator = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.method = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.params = []
                    (_etype219, _size216) = iprot.readListBegin()
                    for _i220 in range(_size216):
                        _elem221 = Variant()
                        _elem221.read(iprot)
                        self.params.append(_elem221)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransaction')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 2)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 3)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.initiator is not None:
            oprot.writeFieldBegin('initiator', TType.STRING, 4)
            oprot.writeBinary(self.initiator)
            oprot.writeFieldEnd()
        if self.method is not None:
            oprot.writeFieldBegin('method', TType.STRING, 5)
            oprot.writeString(self.method.encode('utf-8') if sys.version_info[0] == 2 else self.method)
            oprot.writeFieldEnd()
        if self.params is not None:
            oprot.writeFieldBegin('params', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.params))
            for iter222 in self.params:
                iter222.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 7)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenHolder(object):
    """
    Attributes:
     - holder
     - token
     - balance
     - transfersCount

    """


    def __init__(self, holder=None, token=None, balance=None, transfersCount=None,):
        self.holder = holder
        self.token = token
        self.balance = balance
        self.transfersCount = transfersCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.holder = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.balance = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.transfersCount = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenHolder')
        if self.holder is not None:
            oprot.writeFieldBegin('holder', TType.STRING, 1)
            oprot.writeBinary(self.holder)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRING, 3)
            oprot.writeString(self.balance.encode('utf-8') if sys.version_info[0] == 2 else self.balance)
            oprot.writeFieldEnd()
        if self.transfersCount is not None:
            oprot.writeFieldBegin('transfersCount', TType.I32, 4)
            oprot.writeI32(self.transfersCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenBalance(object):
    """
    Attributes:
     - token
     - code
     - name
     - balance

    """


    def __init__(self, token=None, code=None, name=None, balance=None,):
        self.token = token
        self.code = code
        self.name = name
        self.balance = balance

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.balance = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenBalance')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRING, 4)
            oprot.writeString(self.balance.encode('utf-8') if sys.version_info[0] == 2 else self.balance)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenBalancesResult(object):
    """
    Attributes:
     - status
     - balances

    """


    def __init__(self, status=None, balances=None,):
        self.status = status
        self.balances = balances

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.balances = []
                    (_etype226, _size223) = iprot.readListBegin()
                    for _i227 in range(_size223):
                        _elem228 = TokenBalance()
                        _elem228.read(iprot)
                        self.balances.append(_elem228)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenBalancesResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.balances is not None:
            oprot.writeFieldBegin('balances', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.balances))
            for iter229 in self.balances:
                iter229.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransfer(object):
    """
    Attributes:
     - token
     - code
     - sender
     - receiver
     - amount
     - initiator
     - transaction
     - time
     - state
     - userFields
     - fee
     - extraFee

    """


    def __init__(self, token=None, code=None, sender=None, receiver=None, amount=None, initiator=None, transaction=None, time=None, state=None, userFields=None, fee=None, extraFee=None,):
        self.token = token
        self.code = code
        self.sender = sender
        self.receiver = receiver
        self.amount = amount
        self.initiator = initiator
        self.transaction = transaction
        self.time = time
        self.state = state
        self.userFields = userFields
        self.fee = fee
        self.extraFee = extraFee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.token = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.sender = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.receiver = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.amount = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.initiator = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.transaction = TransactionId()
                    self.transaction.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.userFields = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRUCT:
                    self.fee = AmountCommission()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.LIST:
                    self.extraFee = []
                    (_etype233, _size230) = iprot.readListBegin()
                    for _i234 in range(_size230):
                        _elem235 = ExtraFee()
                        _elem235.read(iprot)
                        self.extraFee.append(_elem235)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransfer')
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 1)
            oprot.writeBinary(self.token)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.sender is not None:
            oprot.writeFieldBegin('sender', TType.STRING, 3)
            oprot.writeBinary(self.sender)
            oprot.writeFieldEnd()
        if self.receiver is not None:
            oprot.writeFieldBegin('receiver', TType.STRING, 4)
            oprot.writeBinary(self.receiver)
            oprot.writeFieldEnd()
        if self.amount is not None:
            oprot.writeFieldBegin('amount', TType.STRING, 5)
            oprot.writeString(self.amount.encode('utf-8') if sys.version_info[0] == 2 else self.amount)
            oprot.writeFieldEnd()
        if self.initiator is not None:
            oprot.writeFieldBegin('initiator', TType.STRING, 6)
            oprot.writeBinary(self.initiator)
            oprot.writeFieldEnd()
        if self.transaction is not None:
            oprot.writeFieldBegin('transaction', TType.STRUCT, 7)
            self.transaction.write(oprot)
            oprot.writeFieldEnd()
        if self.time is not None:
            oprot.writeFieldBegin('time', TType.I64, 8)
            oprot.writeI64(self.time)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 9)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.userFields is not None:
            oprot.writeFieldBegin('userFields', TType.STRING, 10)
            oprot.writeBinary(self.userFields)
            oprot.writeFieldEnd()
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 11)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        if self.extraFee is not None:
            oprot.writeFieldBegin('extraFee', TType.LIST, 14)
            oprot.writeListBegin(TType.STRUCT, len(self.extraFee))
            for iter236 in self.extraFee:
                iter236.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransfersResult(object):
    """
    Attributes:
     - status
     - count
     - transfers

    """


    def __init__(self, status=None, count=None, transfers=None,):
        self.status = status
        self.count = count
        self.transfers = transfers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.transfers = []
                    (_etype240, _size237) = iprot.readListBegin()
                    for _i241 in range(_size237):
                        _elem242 = TokenTransfer()
                        _elem242.read(iprot)
                        self.transfers.append(_elem242)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransfersResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.transfers is not None:
            oprot.writeFieldBegin('transfers', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.transfers))
            for iter243 in self.transfers:
                iter243.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenTransactionsResult(object):
    """
    Attributes:
     - status
     - count
     - transactions

    """


    def __init__(self, status=None, count=None, transactions=None,):
        self.status = status
        self.count = count
        self.transactions = transactions

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.transactions = []
                    (_etype247, _size244) = iprot.readListBegin()
                    for _i248 in range(_size244):
                        _elem249 = TokenTransaction()
                        _elem249.read(iprot)
                        self.transactions.append(_elem249)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenTransactionsResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.transactions is not None:
            oprot.writeFieldBegin('transactions', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.transactions))
            for iter250 in self.transactions:
                iter250.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenInfoResult(object):
    """
    Attributes:
     - status
     - token

    """


    def __init__(self, status=None, token=None,):
        self.status = status
        self.token = token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.token = TokenInfo()
                    self.token.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenInfoResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRUCT, 2)
            self.token.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenHoldersResult(object):
    """
    Attributes:
     - status
     - count
     - holders

    """


    def __init__(self, status=None, count=None, holders=None,):
        self.status = status
        self.count = count
        self.holders = holders

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.holders = []
                    (_etype254, _size251) = iprot.readListBegin()
                    for _i255 in range(_size251):
                        _elem256 = TokenHolder()
                        _elem256.read(iprot)
                        self.holders.append(_elem256)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenHoldersResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.holders is not None:
            oprot.writeFieldBegin('holders', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.holders))
            for iter257 in self.holders:
                iter257.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokensListResult(object):
    """
    Attributes:
     - status
     - count
     - tokens

    """


    def __init__(self, status=None, count=None, tokens=None,):
        self.status = status
        self.count = count
        self.tokens = tokens

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.tokens = []
                    (_etype261, _size258) = iprot.readListBegin()
                    for _i262 in range(_size258):
                        _elem263 = TokenInfo()
                        _elem263.read(iprot)
                        self.tokens.append(_elem263)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokensListResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.tokens is not None:
            oprot.writeFieldBegin('tokens', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.tokens))
            for iter264 in self.tokens:
                iter264.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletInfo(object):
    """
    Attributes:
     - address
     - balance
     - transactionsNumber
     - firstTransactionTime
     - delegated

    """


    def __init__(self, address=None, balance=None, transactionsNumber=None, firstTransactionTime=None, delegated=None,):
        self.address = address
        self.balance = balance
        self.transactionsNumber = transactionsNumber
        self.firstTransactionTime = firstTransactionTime
        self.delegated = delegated

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.balance = Amount()
                    self.balance.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.transactionsNumber = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.firstTransactionTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.delegated = Delegated()
                    self.delegated.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletInfo')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.balance is not None:
            oprot.writeFieldBegin('balance', TType.STRUCT, 2)
            self.balance.write(oprot)
            oprot.writeFieldEnd()
        if self.transactionsNumber is not None:
            oprot.writeFieldBegin('transactionsNumber', TType.I64, 3)
            oprot.writeI64(self.transactionsNumber)
            oprot.writeFieldEnd()
        if self.firstTransactionTime is not None:
            oprot.writeFieldBegin('firstTransactionTime', TType.I64, 4)
            oprot.writeI64(self.firstTransactionTime)
            oprot.writeFieldEnd()
        if self.delegated is not None:
            oprot.writeFieldBegin('delegated', TType.STRUCT, 5)
            self.delegated.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ActualFeeGetResult(object):
    """
    Attributes:
     - fee

    """


    def __init__(self, fee=None,):
        self.fee = fee

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.fee = AmountCommission()
                    self.fee.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ActualFeeGetResult')
        if self.fee is not None:
            oprot.writeFieldBegin('fee', TType.STRUCT, 1)
            self.fee.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class WalletsGetResult(object):
    """
    Attributes:
     - status
     - count
     - wallets

    """


    def __init__(self, status=None, count=None, wallets=None,):
        self.status = status
        self.count = count
        self.wallets = wallets

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.count = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.wallets = []
                    (_etype268, _size265) = iprot.readListBegin()
                    for _i269 in range(_size265):
                        _elem270 = WalletInfo()
                        _elem270.read(iprot)
                        self.wallets.append(_elem270)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('WalletsGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.I32, 2)
            oprot.writeI32(self.count)
            oprot.writeFieldEnd()
        if self.wallets is not None:
            oprot.writeFieldBegin('wallets', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.wallets))
            for iter271 in self.wallets:
                iter271.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrustedInfo(object):
    """
    Attributes:
     - address
     - timesWriter
     - timesTrusted
     - feeCollected

    """


    def __init__(self, address=None, timesWriter=None, timesTrusted=None, feeCollected=None,):
        self.address = address
        self.timesWriter = timesWriter
        self.timesTrusted = timesTrusted
        self.feeCollected = feeCollected

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.timesWriter = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.timesTrusted = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.feeCollected = Amount()
                    self.feeCollected.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrustedInfo')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeBinary(self.address)
            oprot.writeFieldEnd()
        if self.timesWriter is not None:
            oprot.writeFieldBegin('timesWriter', TType.I32, 2)
            oprot.writeI32(self.timesWriter)
            oprot.writeFieldEnd()
        if self.timesTrusted is not None:
            oprot.writeFieldBegin('timesTrusted', TType.I32, 3)
            oprot.writeI32(self.timesTrusted)
            oprot.writeFieldEnd()
        if self.feeCollected is not None:
            oprot.writeFieldBegin('feeCollected', TType.STRUCT, 4)
            self.feeCollected.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TrustedGetResult(object):
    """
    Attributes:
     - status
     - pages
     - writers

    """


    def __init__(self, status=None, pages=None, writers=None,):
        self.status = status
        self.pages = pages
        self.writers = writers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.pages = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.writers = []
                    (_etype275, _size272) = iprot.readListBegin()
                    for _i276 in range(_size272):
                        _elem277 = TrustedInfo()
                        _elem277.read(iprot)
                        self.writers.append(_elem277)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TrustedGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.pages is not None:
            oprot.writeFieldBegin('pages', TType.I32, 2)
            oprot.writeI32(self.pages)
            oprot.writeFieldEnd()
        if self.writers is not None:
            oprot.writeFieldBegin('writers', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.writers))
            for iter278 in self.writers:
                iter278.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SyncStateResult(object):
    """
    Attributes:
     - status
     - currRound
     - lastBlock

    """


    def __init__(self, status=None, currRound=None, lastBlock=None,):
        self.status = status
        self.currRound = currRound
        self.lastBlock = lastBlock

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.currRound = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.lastBlock = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SyncStateResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.currRound is not None:
            oprot.writeFieldBegin('currRound', TType.I64, 2)
            oprot.writeI64(self.currRound)
            oprot.writeFieldEnd()
        if self.lastBlock is not None:
            oprot.writeFieldBegin('lastBlock', TType.I64, 3)
            oprot.writeI64(self.lastBlock)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExecuteCountGetResult(object):
    """
    Attributes:
     - status
     - executeCount

    """


    def __init__(self, status=None, executeCount=None,):
        self.status = status
        self.executeCount = executeCount

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.status = APIResponse()
                    self.status.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.executeCount = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ExecuteCountGetResult')
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.STRUCT, 1)
            self.status.write(oprot)
            oprot.writeFieldEnd()
        if self.executeCount is not None:
            oprot.writeFieldBegin('executeCount', TType.I64, 2)
            oprot.writeI64(self.executeCount)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TokenFilters(object):
    """
    Attributes:
     - name
     - code
     - tokenStandard

    """


    def __init__(self, name=None, code=None, tokenStandard=None,):
        self.name = name
        self.code = code
        self.tokenStandard = tokenStandard

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.tokenStandard = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TokenFilters')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 2)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        if self.tokenStandard is not None:
            oprot.writeFieldBegin('tokenStandard', TType.I32, 3)
            oprot.writeI32(self.tokenStandard)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AmountCommission)
AmountCommission.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'commission', None, 0, ),  # 1
)
all_structs.append(CumulativeAmount)
CumulativeAmount.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'integral', None, 0, ),  # 1
    (2, TType.I64, 'fraction', None, 0, ),  # 2
)
all_structs.append(SmartContractDeploy)
SmartContractDeploy.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'sourceCode', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [ByteCodeObject, None], False), None, ),  # 2
    (3, TType.STRING, 'hashState', 'UTF8', None, ),  # 3
    (4, TType.I32, 'tokenStandard', None, None, ),  # 4
)
all_structs.append(SmartContract)
SmartContract.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'deployer', 'BINARY', None, ),  # 2
    (3, TType.STRUCT, 'smartContractDeploy', [SmartContractDeploy, None], None, ),  # 3
    (4, TType.STRING, 'objectState', 'BINARY', None, ),  # 4
    (5, TType.I64, 'createTime', None, None, ),  # 5
    (6, TType.I32, 'transactionsCount', None, None, ),  # 6
)
all_structs.append(SmartContractInvocation)
SmartContractInvocation.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'method', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'params', (TType.STRUCT, [Variant, None], False), None, ),  # 2
    (3, TType.LIST, 'usedContracts', (TType.STRING, 'BINARY', False), None, ),  # 3
    (4, TType.BOOL, 'forgetNewState', None, None, ),  # 4
    (5, TType.STRUCT, 'smartContractDeploy', [SmartContractDeploy, None], None, ),  # 5
    (6, TType.I16, 'version', None, 1, ),  # 6
)
all_structs.append(TransactionId)
TransactionId.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'poolSeq', None, None, ),  # 1
    (2, TType.I32, 'index', None, None, ),  # 2
)
all_structs.append(TokenDeployTransInfo)
TokenDeployTransInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.I32, 'tokenStandard', None, None, ),  # 3
    (4, TType.I32, 'state', None, None, ),  # 4
    (5, TType.STRUCT, 'stateTransaction', [TransactionId, None], None, ),  # 5
)
all_structs.append(TokenTransferTransInfo)
TokenTransferTransInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'code', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'sender', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'receiver', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'amount', 'UTF8', None, ),  # 4
    (5, TType.I32, 'state', None, None, ),  # 5
    (6, TType.STRUCT, 'stateTransaction', [TransactionId, None], None, ),  # 6
    (7, TType.BOOL, 'transferSuccess', None, None, ),  # 7
)
all_structs.append(SmartDeployTransInfo)
SmartDeployTransInfo.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'state', None, None, ),  # 1
    (2, TType.STRUCT, 'stateTransaction', [TransactionId, None], None, ),  # 2
)
all_structs.append(SmartExecutionTransInfo)
SmartExecutionTransInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'method', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'params', (TType.STRUCT, [Variant, None], False), None, ),  # 2
    (3, TType.I32, 'state', None, None, ),  # 3
    (4, TType.STRUCT, 'stateTransaction', [TransactionId, None], None, ),  # 4
)
all_structs.append(ExtraFee)
ExtraFee.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'sum', [Amount, None], None, ),  # 1
    (2, TType.STRING, 'comment', 'UTF8', None, ),  # 2
    (3, TType.STRUCT, 'transactionId', [TransactionId, None], None, ),  # 3
)
all_structs.append(SmartStateTransInfo)
SmartStateTransInfo.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.STRUCT, 'executionFee', [Amount, None], None, ),  # 2
    (3, TType.STRUCT, 'returnValue', [Variant, None], None, ),  # 3
    (4, TType.STRUCT, 'startTransaction', [TransactionId, None], None, ),  # 4
)
all_structs.append(SmartTransInfo)
SmartTransInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'v_tokenDeploy', [TokenDeployTransInfo, None], None, ),  # 1
    (2, TType.STRUCT, 'v_tokenTransfer', [TokenTransferTransInfo, None], None, ),  # 2
    (3, TType.STRUCT, 'v_smartDeploy', [SmartDeployTransInfo, None], None, ),  # 3
    (4, TType.STRUCT, 'v_smartExecution', [SmartExecutionTransInfo, None], None, ),  # 4
    (5, TType.STRUCT, 'v_smartState', [SmartStateTransInfo, None], None, ),  # 5
)
all_structs.append(Transaction)
Transaction.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'source', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'target', 'BINARY', None, ),  # 3
    (4, TType.STRUCT, 'amount', [Amount, None], None, ),  # 4
    (5, TType.STRUCT, 'balance', [Amount, None], None, ),  # 5
    (6, TType.BYTE, 'currency', None, None, ),  # 6
    (7, TType.STRING, 'signature', 'BINARY', None, ),  # 7
    (8, TType.STRUCT, 'smartContract', [SmartContractInvocation, None], None, ),  # 8
    (9, TType.STRUCT, 'fee', [AmountCommission, None], None, ),  # 9
    (10, TType.I64, 'timeCreation', None, None, ),  # 10
    (11, TType.STRING, 'userFields', 'BINARY', None, ),  # 11
    (12, TType.I32, 'type', None, None, ),  # 12
    (13, TType.STRUCT, 'smartInfo', [SmartTransInfo, None], None, ),  # 13
    (14, TType.LIST, 'extraFee', (TType.STRUCT, [ExtraFee, None], False), None, ),  # 14
    (15, TType.I64, 'poolNumber', None, None, ),  # 15
    (16, TType.LIST, 'usedContracts', (TType.STRING, 'BINARY', False), None, ),  # 16
)
all_structs.append(SealedTransaction)
SealedTransaction.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'id', [TransactionId, None], None, ),  # 1
    (2, TType.STRUCT, 'trxn', [Transaction, None], None, ),  # 2
)
all_structs.append(ShortTransaction)
ShortTransaction.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'id', [TransactionId, None], None, ),  # 1
    (2, TType.STRING, 'source', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'target', 'BINARY', None, ),  # 3
    (4, TType.STRUCT, 'amount', [Amount, None], None, ),  # 4
    (5, TType.STRUCT, 'fee', [AmountCommission, None], None, ),  # 5
    (6, TType.I64, 'timeCreation', None, None, ),  # 6
    (7, TType.BYTE, 'currency', None, None, ),  # 7
    (8, TType.I32, 'type', None, None, ),  # 8
    None,  # 9
    (10, TType.STRING, 'userFields', 'BINARY', None, ),  # 10
)
all_structs.append(Pool)
Pool.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hash', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'prevHash', 'BINARY', None, ),  # 2
    (3, TType.I64, 'time', None, None, ),  # 3
    (4, TType.I32, 'transactionsCount', None, None, ),  # 4
    (5, TType.I64, 'poolNumber', None, None, ),  # 5
    (6, TType.STRING, 'writer', 'BINARY', None, ),  # 6
    (7, TType.STRUCT, 'totalFee', [Amount, None], None, ),  # 7
    (8, TType.LIST, 'confidants', (TType.STRING, 'BINARY', False), None, ),  # 8
    (9, TType.I64, 'realTrusted', None, None, ),  # 9
    (10, TType.BYTE, 'numberTrusted', None, None, ),  # 10
)
all_structs.append(DelegatedItem)
DelegatedItem.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'wallet', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'sum', [Amount, None], None, ),  # 2
    (3, TType.I64, 'validUntil', None, None, ),  # 3
)
all_structs.append(Delegated)
Delegated.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'incoming', [Amount, None], None, ),  # 1
    (2, TType.STRUCT, 'outgoing', [Amount, None], None, ),  # 2
    (3, TType.LIST, 'donors', (TType.STRUCT, [DelegatedItem, None], False), None, ),  # 3
    (4, TType.LIST, 'recipients', (TType.STRUCT, [DelegatedItem, None], False), None, ),  # 4
)
all_structs.append(WalletData)
WalletData.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'walletId', None, None, ),  # 1
    (2, TType.STRUCT, 'balance', [Amount, None], None, ),  # 2
    (3, TType.I64, 'lastTransactionId', None, None, ),  # 3
    (4, TType.STRUCT, 'delegated', [Delegated, None], None, ),  # 4
)
all_structs.append(PeriodStats)
PeriodStats.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'periodDuration', None, None, ),  # 1
    (2, TType.I32, 'poolsCount', None, None, ),  # 2
    (3, TType.I32, 'transactionsCount', None, None, ),  # 3
    (4, TType.MAP, 'balancePerCurrency', (TType.BYTE, None, TType.STRUCT, [CumulativeAmount, None], False), None, ),  # 4
    (5, TType.I32, 'smartContractsCount', None, None, ),  # 5
    (6, TType.I32, 'transactionsSmartCount', None, None, ),  # 6
)
all_structs.append(WalletDataGetResult)
WalletDataGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'walletData', [WalletData, None], None, ),  # 2
)
all_structs.append(WalletIdGetResult)
WalletIdGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'walletId', None, None, ),  # 2
)
all_structs.append(WalletTransactionsCountGetResult)
WalletTransactionsCountGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I64, 'lastTransactionInnerId', None, None, ),  # 2
)
all_structs.append(WalletBalanceGetResult)
WalletBalanceGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'balance', [Amount, None], None, ),  # 2
    (3, TType.STRUCT, 'delegated', [Delegated, None], None, ),  # 3
)
all_structs.append(TransactionGetResult)
TransactionGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'found', None, None, ),  # 2
    (3, TType.I32, 'state', None, None, ),  # 3
    (4, TType.I32, 'roundNum', None, None, ),  # 4
    (5, TType.STRUCT, 'transaction', [SealedTransaction, None], None, ),  # 5
)
all_structs.append(TransactionsGetResult)
TransactionsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'result', None, None, ),  # 2
    (3, TType.I32, 'total_trxns_count', None, None, ),  # 3
    (4, TType.LIST, 'transactions', (TType.STRUCT, [SealedTransaction, None], False), None, ),  # 4
)
all_structs.append(TransactionFlowResult)
TransactionFlowResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'smart_contract_result', [Variant, None], None, ),  # 2
    (3, TType.I32, 'roundNum', None, None, ),  # 3
    (4, TType.STRUCT, 'id', [TransactionId, None], None, ),  # 4
    (5, TType.STRUCT, 'fee', [Amount, None], None, ),  # 5
    (6, TType.LIST, 'extraFee', (TType.STRUCT, [ExtraFee, None], False), None, ),  # 6
)
all_structs.append(SingleTokenQuery)
SingleTokenQuery.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tokenAddress', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'fromId', [TransactionId, None], None, ),  # 2
)
all_structs.append(SingleQuery)
SingleQuery.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestedAddress', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'fromId', [TransactionId, None], None, ),  # 2
    (3, TType.LIST, 'tokensList', (TType.STRUCT, [SingleTokenQuery, None], False), None, ),  # 3
)
all_structs.append(TransactionsQuery)
TransactionsQuery.thrift_spec = (
    None,  # 0
    (1, TType.I16, 'flag', None, None, ),  # 1
    (2, TType.LIST, 'queries', (TType.STRUCT, [SingleQuery, None], False), None, ),  # 2
)
all_structs.append(SelectedTokenTransfers)
SelectedTokenTransfers.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'tokenAddress', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'tokenName', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'tokenTiker', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'transfers', (TType.STRUCT, [TokenTransfer, None], False), None, ),  # 4
)
all_structs.append(PublicKeyTransactions)
PublicKeyTransactions.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'requestedAddress', 'BINARY', None, ),  # 1
    (2, TType.LIST, 'transactions', (TType.STRUCT, [ShortTransaction, None], False), None, ),  # 2
    (3, TType.LIST, 'transfersList', (TType.STRUCT, [SelectedTokenTransfers, None], False), None, ),  # 3
)
all_structs.append(FilteredTransactionsListResult)
FilteredTransactionsListResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'queryResponse', (TType.STRUCT, [PublicKeyTransactions, None], False), None, ),  # 2
)
all_structs.append(PoolListGetResult)
PoolListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'result', None, None, ),  # 2
    (3, TType.I32, 'count', None, None, ),  # 3
    (4, TType.LIST, 'pools', (TType.STRUCT, [Pool, None], False), None, ),  # 4
)
all_structs.append(PoolInfoGetResult)
PoolInfoGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.BOOL, 'isFound', None, None, ),  # 2
    (3, TType.STRUCT, 'pool', [Pool, None], None, ),  # 3
)
all_structs.append(PoolTransactionsGetResult)
PoolTransactionsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'transactions', (TType.STRUCT, [SealedTransaction, None], False), None, ),  # 2
)
all_structs.append(StatsGetResult)
StatsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'stats', (TType.STRUCT, [PeriodStats, None], False), None, ),  # 2
)
all_structs.append(SmartContractGetResult)
SmartContractGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'smartContract', [SmartContract, None], None, ),  # 2
)
all_structs.append(SmartContractAddressesListGetResult)
SmartContractAddressesListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'addressesList', (TType.STRING, 'BINARY', False), None, ),  # 2
)
all_structs.append(SmartContractsListGetResult)
SmartContractsListGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'smartContractsList', (TType.STRUCT, [SmartContract, None], False), None, ),  # 3
)
all_structs.append(TransactionsStateGetResult)
TransactionsStateGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.MAP, 'states', (TType.I64, None, TType.I32, None, False), None, ),  # 2
    (3, TType.I32, 'roundNum', None, None, ),  # 3
)
all_structs.append(SmartMethodParamsGetResult)
SmartMethodParamsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRING, 'method', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'params', (TType.STRUCT, [Variant, None], False), None, ),  # 3
)
all_structs.append(ContractAllMethodsGetResult)
ContractAllMethodsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'code', None, None, ),  # 1
    (2, TType.STRING, 'message', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'methods', (TType.STRUCT, [MethodDescription, None], False), None, ),  # 3
)
all_structs.append(SmartContractMethodArgument)
SmartContractMethodArgument.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(SmartContractMethod)
SmartContractMethod.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'returnType', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.LIST, 'arguments', (TType.STRUCT, [SmartContractMethodArgument, None], False), None, ),  # 3
)
all_structs.append(SmartContractDataResult)
SmartContractDataResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'methods', (TType.STRUCT, [SmartContractMethod, None], False), None, ),  # 2
    (3, TType.MAP, 'variables', (TType.STRING, 'UTF8', TType.STRUCT, [Variant, None], False), None, ),  # 3
)
all_structs.append(SmartContractCompileResult)
SmartContractCompileResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'byteCodeObjects', (TType.STRUCT, [ByteCodeObject, None], False), None, ),  # 2
    (3, TType.I32, 'tokenStandard', None, None, ),  # 3
)
all_structs.append(TokenInfo)
TokenInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'totalSupply', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'owner', 'BINARY', None, ),  # 5
    (6, TType.I32, 'transfersCount', None, None, ),  # 6
    (7, TType.I32, 'transactionsCount', None, None, ),  # 7
    (8, TType.I32, 'holdersCount', None, None, ),  # 8
    (9, TType.I32, 'tokenStandard', None, None, ),  # 9
)
all_structs.append(TokenTransaction)
TokenTransaction.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'transaction', [TransactionId, None], None, ),  # 2
    (3, TType.I64, 'time', None, None, ),  # 3
    (4, TType.STRING, 'initiator', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'method', 'UTF8', None, ),  # 5
    (6, TType.LIST, 'params', (TType.STRUCT, [Variant, None], False), None, ),  # 6
    (7, TType.I32, 'state', None, None, ),  # 7
)
all_structs.append(TokenHolder)
TokenHolder.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'holder', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'token', 'BINARY', None, ),  # 2
    (3, TType.STRING, 'balance', 'UTF8', None, ),  # 3
    (4, TType.I32, 'transfersCount', None, None, ),  # 4
)
all_structs.append(TokenBalance)
TokenBalance.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'balance', 'UTF8', None, ),  # 4
)
all_structs.append(TokenBalancesResult)
TokenBalancesResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.LIST, 'balances', (TType.STRUCT, [TokenBalance, None], False), None, ),  # 2
)
all_structs.append(TokenTransfer)
TokenTransfer.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'token', 'BINARY', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'sender', 'BINARY', None, ),  # 3
    (4, TType.STRING, 'receiver', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'amount', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'initiator', 'BINARY', None, ),  # 6
    (7, TType.STRUCT, 'transaction', [TransactionId, None], None, ),  # 7
    (8, TType.I64, 'time', None, None, ),  # 8
    (9, TType.I32, 'state', None, None, ),  # 9
    (10, TType.STRING, 'userFields', 'BINARY', None, ),  # 10
    (11, TType.STRUCT, 'fee', [AmountCommission, None], None, ),  # 11
    None,  # 12
    None,  # 13
    (14, TType.LIST, 'extraFee', (TType.STRUCT, [ExtraFee, None], False), None, ),  # 14
)
all_structs.append(TokenTransfersResult)
TokenTransfersResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'transfers', (TType.STRUCT, [TokenTransfer, None], False), None, ),  # 3
)
all_structs.append(TokenTransactionsResult)
TokenTransactionsResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'transactions', (TType.STRUCT, [TokenTransaction, None], False), None, ),  # 3
)
all_structs.append(TokenInfoResult)
TokenInfoResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.STRUCT, 'token', [TokenInfo, None], None, ),  # 2
)
all_structs.append(TokenHoldersResult)
TokenHoldersResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'holders', (TType.STRUCT, [TokenHolder, None], False), None, ),  # 3
)
all_structs.append(TokensListResult)
TokensListResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'tokens', (TType.STRUCT, [TokenInfo, None], False), None, ),  # 3
)
all_structs.append(WalletInfo)
WalletInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.STRUCT, 'balance', [Amount, None], None, ),  # 2
    (3, TType.I64, 'transactionsNumber', None, None, ),  # 3
    (4, TType.I64, 'firstTransactionTime', None, None, ),  # 4
    (5, TType.STRUCT, 'delegated', [Delegated, None], None, ),  # 5
)
all_structs.append(ActualFeeGetResult)
ActualFeeGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'fee', [AmountCommission, None], None, ),  # 1
)
all_structs.append(WalletsGetResult)
WalletsGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'count', None, None, ),  # 2
    (3, TType.LIST, 'wallets', (TType.STRUCT, [WalletInfo, None], False), None, ),  # 3
)
all_structs.append(TrustedInfo)
TrustedInfo.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'BINARY', None, ),  # 1
    (2, TType.I32, 'timesWriter', None, None, ),  # 2
    (3, TType.I32, 'timesTrusted', None, None, ),  # 3
    (4, TType.STRUCT, 'feeCollected', [Amount, None], None, ),  # 4
)
all_structs.append(TrustedGetResult)
TrustedGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I32, 'pages', None, None, ),  # 2
    (3, TType.LIST, 'writers', (TType.STRUCT, [TrustedInfo, None], False), None, ),  # 3
)
all_structs.append(SyncStateResult)
SyncStateResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I64, 'currRound', None, None, ),  # 2
    (3, TType.I64, 'lastBlock', None, None, ),  # 3
)
all_structs.append(ExecuteCountGetResult)
ExecuteCountGetResult.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'status', [APIResponse, None], None, ),  # 1
    (2, TType.I64, 'executeCount', None, None, ),  # 2
)
all_structs.append(TokenFilters)
TokenFilters.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'code', 'UTF8', None, ),  # 2
    (3, TType.I32, 'tokenStandard', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
