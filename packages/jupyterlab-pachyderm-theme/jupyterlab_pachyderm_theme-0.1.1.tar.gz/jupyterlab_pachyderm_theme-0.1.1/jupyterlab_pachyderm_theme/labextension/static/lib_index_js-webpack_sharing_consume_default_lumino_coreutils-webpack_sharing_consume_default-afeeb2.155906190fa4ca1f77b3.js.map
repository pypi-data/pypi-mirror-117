{"version":3,"file":"lib_index_js-webpack_sharing_consume_default_lumino_coreutils-webpack_sharing_consume_default-afeeb2.155906190fa4ca1f77b3.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAA8E;AAClC;AACY;AACP;AACa;AACb;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,2DAAS,EAAE,2DAAS,EAAE,iEAAe;AACzE;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA,aAAa;AACb;AACA;AACA;AACA,8CAA8C,SAAS;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,+DAAa;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sDAAS;AACtC;AACA;AACA;AACA,yBAAyB,wDAAM;AAC/B;AACA;AACA;AACA;AACA,oBAAoB,qEAAmB,GAAG,uBAAuB;AACjE,oBAAoB,mEAAiB,GAAG,0BAA0B;AAClE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS,IAAI,iDAAiD;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA,iEAAe,OAAO,EAAC;AACvB","sources":["webpack://@pachyderm/jupyterlab-pachyderm-theme/./lib/index.js"],"sourcesContent":["import { Dialog, ISplashScreen, ICommandPalette } from '@jupyterlab/apputils';\nimport { Throttler } from '@lumino/polling';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\n// const FACTORY = 'Editor';\nconst ICON_CLASS = 'jp-MainLogo';\nconst PALETTE_CATEGORY = 'Text Editor';\n/**\n * The interval in milliseconds before recover options appear during splash.\n */\nconst SPLASH_RECOVER_TIMEOUT = 12000;\n/**\n * The command IDs used by the apputils plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.loadState = 'apputils:load-statedb';\n    CommandIDs.print = 'apputils:print';\n    CommandIDs.reset = 'apputils:reset';\n    CommandIDs.resetOnLoad = 'apputils:reset-on-load';\n    CommandIDs.runFirstEnabled = 'apputils:run-first-enabled';\n    CommandIDs.createNew = 'fileeditor:create-new-python-file';\n})(CommandIDs || (CommandIDs = {}));\nlet head = document.head || document.getElementsByTagName('head')[0];\nfunction changeFavicon(src) {\n    let link = document.createElement('link'), oldLink = document.getElementById('dynamic-favicon');\n    link.id = 'dynamic-favicon';\n    link.rel = 'icon';\n    link.type = 'image/x-icon';\n    link.href = src;\n    if (oldLink) {\n        head.removeChild(oldLink);\n    }\n    head.appendChild(link);\n    if (document.title != \"Notebooks Beta - Pachyderm Hub\") {\n        document.title = \"Notebooks Beta - Pachyderm Hub\";\n    }\n}\nconst plugin = {\n    id: 'jupyterlab-pachyderm-theme',\n    autoStart: true,\n    optional: [IFileBrowserFactory, ILauncher, IMainMenu, ICommandPalette],\n    activate: (app, browserFactory, launcher, menu, palette) => {\n        const { commands, contextMenu } = app;\n        const command = CommandIDs.createNew;\n        commands.addCommand(command, {\n            label: args => args['isPalette'] || args['isContextMenu']\n                ? 'Open Pachyderm Tutorial'\n                : 'Pachyderm Tutorial',\n            caption: 'Open Pachyderm Tutorial',\n            iconClass: args => (args['isPalette'] ? '' : ICON_CLASS),\n            execute: async (args) => {\n                // const cwd =\n                //   args['cwd'] ?? browserFactory?.defaultBrowser.model.path ?? undefined;\n                // const model = await commands.execute('docmanager:new-untitled', {\n                //   path: cwd,\n                //   type: 'file',\n                //   ext: 'py'\n                // });\n                return commands.execute('docmanager:open', {\n                    path: \"TestNB.ipynb\"\n                });\n            }\n        });\n        // add to the file browser context menu\n        const selectorContent = '.jp-DirListing-content';\n        contextMenu.addItem({\n            command,\n            args: { isContextMenu: true },\n            selector: selectorContent,\n            rank: 3\n        });\n        // add to the launcher\n        if (launcher) {\n            launcher.add({\n                command,\n                category: 'Notebook',\n                rank: 0\n            });\n        }\n        // add to the palette\n        if (palette) {\n            palette.addItem({\n                command,\n                args: { isPalette: true },\n                category: PALETTE_CATEGORY\n            });\n        }\n        // add to the menu\n        if (menu) {\n            menu.fileMenu.newMenu.addGroup([{ command }], 30);\n        }\n    }\n};\n/**\n * A splash screen for pachyderm\n */\nconst splash = {\n    id: '@pachyderm/jupyterlab-pachyderm-theme:plugin',\n    autoStart: true,\n    // requires: [ITranslator],\n    provides: ISplashScreen,\n    activate: (app\n    // translator: ITranslator\n    ) => {\n        // const trans = translator.load('jupyterlab');\n        const { commands, restored } = app;\n        changeFavicon('https://www.pachyderm.com/favicons/favicon.ico');\n        const splash = document.createElement('div');\n        splash.id = 'pachyderm-splash';\n        const logo = document.createElement('div');\n        logo.id = 'pachyderm-logo';\n        splash.appendChild(logo);\n        const graphic = document.createElement('div');\n        logo.appendChild(graphic);\n        graphic.className = 'logoGraphic';\n        const graphicTop = document.createElement('div');\n        graphic.appendChild(graphicTop);\n        graphicTop.className = 'graphicTop';\n        const graphicMid = document.createElement('div');\n        graphic.appendChild(graphicMid);\n        graphicMid.className = 'graphicMid';\n        const graphicBot = document.createElement('div');\n        graphic.appendChild(graphicBot);\n        graphicBot.className = 'graphicBot';\n        const text = document.createElement('div');\n        logo.appendChild(text);\n        text.className = 'logoText';\n        const pachyderm = document.createElement('h1');\n        pachyderm.innerHTML = 'Pachyderm';\n        text.appendChild(pachyderm);\n        const labs = document.createElement('h2');\n        labs.innerHTML = 'Notebooks Beta';\n        text.appendChild(labs);\n        // Create debounced recovery dialog function.\n        let dialog;\n        const recovery = new Throttler(async () => {\n            if (dialog) {\n                return;\n            }\n            dialog = new Dialog({\n                title: 'Loading...',\n                body: `The loading screen is taking a long time. \nWould you like to clear the workspace or keep waiting?`,\n                buttons: [\n                    Dialog.cancelButton({ label: 'Keep Waiting' }),\n                    Dialog.warnButton({ label: 'Clear Workspace' })\n                ]\n            });\n            try {\n                const result = await dialog.launch();\n                dialog.dispose();\n                dialog = null;\n                if (result.button.accept && commands.hasCommand(CommandIDs.reset)) {\n                    return commands.execute(CommandIDs.reset);\n                }\n                // Re-invoke the recovery timer in the next frame.\n                requestAnimationFrame(() => {\n                    // Because recovery can be stopped, handle invocation rejection.\n                    void recovery.invoke().catch(_ => undefined);\n                });\n            }\n            catch (error) {\n                /* no-op */\n            }\n        }, { limit: SPLASH_RECOVER_TIMEOUT, edge: 'trailing' });\n        // Return ISplashScreen.\n        let splashCount = 0;\n        return {\n            show: () => {\n                splash.classList.remove('splash-fade');\n                splashCount++;\n                console.log('adding');\n                document.body.appendChild(splash);\n                // Because recovery can be stopped, handle invocation rejection.\n                void recovery.invoke().catch(_ => undefined);\n                return new DisposableDelegate(async () => {\n                    await restored;\n                    if (--splashCount === 0) {\n                        void recovery.stop();\n                        if (dialog) {\n                            dialog.dispose();\n                            dialog = null;\n                        }\n                        splash.classList.add('splash-fade');\n                        window.setTimeout(() => {\n                            document.body.removeChild(splash);\n                        }, 200);\n                    }\n                });\n            }\n        };\n    },\n};\nconst plugins = [splash, plugin];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"names":[],"sourceRoot":""}