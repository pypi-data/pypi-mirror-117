"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```   # noqa: E501

    The version of the OpenAPI document: 1.42
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from jgreenepack.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from jgreenepack.exceptions import ApiAttributeError


def lazy_import():
    from jgreenepack.model.health_config import HealthConfig
    from jgreenepack.model.mount import Mount
    from jgreenepack.model.resources_ulimits import ResourcesUlimits
    from jgreenepack.model.task_spec_container_spec_configs import TaskSpecContainerSpecConfigs
    from jgreenepack.model.task_spec_container_spec_dns_config import TaskSpecContainerSpecDNSConfig
    from jgreenepack.model.task_spec_container_spec_privileges import TaskSpecContainerSpecPrivileges
    from jgreenepack.model.task_spec_container_spec_secrets import TaskSpecContainerSpecSecrets
    globals()['HealthConfig'] = HealthConfig
    globals()['Mount'] = Mount
    globals()['ResourcesUlimits'] = ResourcesUlimits
    globals()['TaskSpecContainerSpecConfigs'] = TaskSpecContainerSpecConfigs
    globals()['TaskSpecContainerSpecDNSConfig'] = TaskSpecContainerSpecDNSConfig
    globals()['TaskSpecContainerSpecPrivileges'] = TaskSpecContainerSpecPrivileges
    globals()['TaskSpecContainerSpecSecrets'] = TaskSpecContainerSpecSecrets


class TaskSpecContainerSpec(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('isolation',): {
            'DEFAULT': "default",
            'PROCESS': "process",
            'HYPERV': "hyperv",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'image': (str,),  # noqa: E501
            'labels': ({str: (str,)},),  # noqa: E501
            'command': ([str],),  # noqa: E501
            'args': ([str],),  # noqa: E501
            'hostname': (str,),  # noqa: E501
            'env': ([str],),  # noqa: E501
            'dir': (str,),  # noqa: E501
            'user': (str,),  # noqa: E501
            'groups': ([str],),  # noqa: E501
            'privileges': (TaskSpecContainerSpecPrivileges,),  # noqa: E501
            'tty': (bool,),  # noqa: E501
            'open_stdin': (bool,),  # noqa: E501
            'read_only': (bool,),  # noqa: E501
            'mounts': ([Mount],),  # noqa: E501
            'stop_signal': (str,),  # noqa: E501
            'stop_grace_period': (int,),  # noqa: E501
            'health_check': (HealthConfig,),  # noqa: E501
            'hosts': ([str],),  # noqa: E501
            'dns_config': (TaskSpecContainerSpecDNSConfig,),  # noqa: E501
            'secrets': ([TaskSpecContainerSpecSecrets],),  # noqa: E501
            'configs': ([TaskSpecContainerSpecConfigs],),  # noqa: E501
            'isolation': (str,),  # noqa: E501
            'init': (bool, none_type,),  # noqa: E501
            'sysctls': ({str: (str,)},),  # noqa: E501
            'capability_add': ([str],),  # noqa: E501
            'capability_drop': ([str],),  # noqa: E501
            'ulimits': ([ResourcesUlimits],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'image': 'Image',  # noqa: E501
        'labels': 'Labels',  # noqa: E501
        'command': 'Command',  # noqa: E501
        'args': 'Args',  # noqa: E501
        'hostname': 'Hostname',  # noqa: E501
        'env': 'Env',  # noqa: E501
        'dir': 'Dir',  # noqa: E501
        'user': 'User',  # noqa: E501
        'groups': 'Groups',  # noqa: E501
        'privileges': 'Privileges',  # noqa: E501
        'tty': 'TTY',  # noqa: E501
        'open_stdin': 'OpenStdin',  # noqa: E501
        'read_only': 'ReadOnly',  # noqa: E501
        'mounts': 'Mounts',  # noqa: E501
        'stop_signal': 'StopSignal',  # noqa: E501
        'stop_grace_period': 'StopGracePeriod',  # noqa: E501
        'health_check': 'HealthCheck',  # noqa: E501
        'hosts': 'Hosts',  # noqa: E501
        'dns_config': 'DNSConfig',  # noqa: E501
        'secrets': 'Secrets',  # noqa: E501
        'configs': 'Configs',  # noqa: E501
        'isolation': 'Isolation',  # noqa: E501
        'init': 'Init',  # noqa: E501
        'sysctls': 'Sysctls',  # noqa: E501
        'capability_add': 'CapabilityAdd',  # noqa: E501
        'capability_drop': 'CapabilityDrop',  # noqa: E501
        'ulimits': 'Ulimits',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """TaskSpecContainerSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            image (str): The image name to use for the container. [optional]  # noqa: E501
            labels ({str: (str,)}): User-defined key/value data.. [optional]  # noqa: E501
            command ([str]): The command to be run in the image.. [optional]  # noqa: E501
            args ([str]): Arguments to the command.. [optional]  # noqa: E501
            hostname (str): The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname. . [optional]  # noqa: E501
            env ([str]): A list of environment variables in the form `VAR=value`. . [optional]  # noqa: E501
            dir (str): The working directory for commands to run in.. [optional]  # noqa: E501
            user (str): The user inside the container.. [optional]  # noqa: E501
            groups ([str]): A list of additional groups that the container process will run as. . [optional]  # noqa: E501
            privileges (TaskSpecContainerSpecPrivileges): [optional]  # noqa: E501
            tty (bool): Whether a pseudo-TTY should be allocated.. [optional]  # noqa: E501
            open_stdin (bool): Open `stdin`. [optional]  # noqa: E501
            read_only (bool): Mount the container's root filesystem as read only.. [optional]  # noqa: E501
            mounts ([Mount]): Specification for mounts to be added to containers created as part of the service. . [optional]  # noqa: E501
            stop_signal (str): Signal to stop the container.. [optional]  # noqa: E501
            stop_grace_period (int): Amount of time to wait for the container to terminate before forcefully killing it. . [optional]  # noqa: E501
            health_check (HealthConfig): [optional]  # noqa: E501
            hosts ([str]): A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] . [optional]  # noqa: E501
            dns_config (TaskSpecContainerSpecDNSConfig): [optional]  # noqa: E501
            secrets ([TaskSpecContainerSpecSecrets]): Secrets contains references to zero or more secrets that will be exposed to the service. . [optional]  # noqa: E501
            configs ([TaskSpecContainerSpecConfigs]): Configs contains references to zero or more configs that will be exposed to the service. . [optional]  # noqa: E501
            isolation (str): Isolation technology of the containers running the service. (Windows only) . [optional]  # noqa: E501
            init (bool, none_type): Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. . [optional]  # noqa: E501
            sysctls ({str: (str,)}): Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service. . [optional]  # noqa: E501
            capability_add ([str]): A list of kernel capabilities to add to the default set for the container. . [optional]  # noqa: E501
            capability_drop ([str]): A list of kernel capabilities to drop from the default set for the container. . [optional]  # noqa: E501
            ulimits ([ResourcesUlimits]): A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\" . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """TaskSpecContainerSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            image (str): The image name to use for the container. [optional]  # noqa: E501
            labels ({str: (str,)}): User-defined key/value data.. [optional]  # noqa: E501
            command ([str]): The command to be run in the image.. [optional]  # noqa: E501
            args ([str]): Arguments to the command.. [optional]  # noqa: E501
            hostname (str): The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname. . [optional]  # noqa: E501
            env ([str]): A list of environment variables in the form `VAR=value`. . [optional]  # noqa: E501
            dir (str): The working directory for commands to run in.. [optional]  # noqa: E501
            user (str): The user inside the container.. [optional]  # noqa: E501
            groups ([str]): A list of additional groups that the container process will run as. . [optional]  # noqa: E501
            privileges (TaskSpecContainerSpecPrivileges): [optional]  # noqa: E501
            tty (bool): Whether a pseudo-TTY should be allocated.. [optional]  # noqa: E501
            open_stdin (bool): Open `stdin`. [optional]  # noqa: E501
            read_only (bool): Mount the container's root filesystem as read only.. [optional]  # noqa: E501
            mounts ([Mount]): Specification for mounts to be added to containers created as part of the service. . [optional]  # noqa: E501
            stop_signal (str): Signal to stop the container.. [optional]  # noqa: E501
            stop_grace_period (int): Amount of time to wait for the container to terminate before forcefully killing it. . [optional]  # noqa: E501
            health_check (HealthConfig): [optional]  # noqa: E501
            hosts ([str]): A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] . [optional]  # noqa: E501
            dns_config (TaskSpecContainerSpecDNSConfig): [optional]  # noqa: E501
            secrets ([TaskSpecContainerSpecSecrets]): Secrets contains references to zero or more secrets that will be exposed to the service. . [optional]  # noqa: E501
            configs ([TaskSpecContainerSpecConfigs]): Configs contains references to zero or more configs that will be exposed to the service. . [optional]  # noqa: E501
            isolation (str): Isolation technology of the containers running the service. (Windows only) . [optional]  # noqa: E501
            init (bool, none_type): Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. . [optional]  # noqa: E501
            sysctls ({str: (str,)}): Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service. . [optional]  # noqa: E501
            capability_add ([str]): A list of kernel capabilities to add to the default set for the container. . [optional]  # noqa: E501
            capability_drop ([str]): A list of kernel capabilities to drop from the default set for the container. . [optional]  # noqa: E501
            ulimits ([ResourcesUlimits]): A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\" . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
