# coding: utf-8

"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```   # noqa: E501

    OpenAPI spec version: 1.42
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class MountPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'name': 'str',
        'source': 'str',
        'destination': 'str',
        'driver': 'str',
        'mode': 'str',
        'rw': 'bool',
        'propagation': 'str'
    }

    attribute_map = {
        'type': 'Type',
        'name': 'Name',
        'source': 'Source',
        'destination': 'Destination',
        'driver': 'Driver',
        'mode': 'Mode',
        'rw': 'RW',
        'propagation': 'Propagation'
    }

    def __init__(self, type=None, name=None, source=None, destination=None, driver=None, mode=None, rw=None, propagation=None, _configuration=None):  # noqa: E501
        """MountPoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._name = None
        self._source = None
        self._destination = None
        self._driver = None
        self._mode = None
        self._rw = None
        self._propagation = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if destination is not None:
            self.destination = destination
        if driver is not None:
            self.driver = driver
        if mode is not None:
            self.mode = mode
        if rw is not None:
            self.rw = rw
        if propagation is not None:
            self.propagation = propagation

    @property
    def type(self):
        """Gets the type of this MountPoint.  # noqa: E501


        :return: The type of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MountPoint.


        :param type: The type of this MountPoint.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this MountPoint.  # noqa: E501


        :return: The name of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MountPoint.


        :param name: The name of this MountPoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this MountPoint.  # noqa: E501


        :return: The source of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MountPoint.


        :param source: The source of this MountPoint.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def destination(self):
        """Gets the destination of this MountPoint.  # noqa: E501


        :return: The destination of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this MountPoint.


        :param destination: The destination of this MountPoint.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def driver(self):
        """Gets the driver of this MountPoint.  # noqa: E501


        :return: The driver of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this MountPoint.


        :param driver: The driver of this MountPoint.  # noqa: E501
        :type: str
        """

        self._driver = driver

    @property
    def mode(self):
        """Gets the mode of this MountPoint.  # noqa: E501


        :return: The mode of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this MountPoint.


        :param mode: The mode of this MountPoint.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def rw(self):
        """Gets the rw of this MountPoint.  # noqa: E501


        :return: The rw of this MountPoint.  # noqa: E501
        :rtype: bool
        """
        return self._rw

    @rw.setter
    def rw(self, rw):
        """Sets the rw of this MountPoint.


        :param rw: The rw of this MountPoint.  # noqa: E501
        :type: bool
        """

        self._rw = rw

    @property
    def propagation(self):
        """Gets the propagation of this MountPoint.  # noqa: E501


        :return: The propagation of this MountPoint.  # noqa: E501
        :rtype: str
        """
        return self._propagation

    @propagation.setter
    def propagation(self, propagation):
        """Sets the propagation of this MountPoint.


        :param propagation: The propagation of this MountPoint.  # noqa: E501
        :type: str
        """

        self._propagation = propagation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MountPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MountPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MountPoint):
            return True

        return self.to_dict() != other.to_dict()
