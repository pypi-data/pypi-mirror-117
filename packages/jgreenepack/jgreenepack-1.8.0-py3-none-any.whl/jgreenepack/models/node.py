# coding: utf-8

"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```   # noqa: E501

    OpenAPI spec version: 1.42
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class Node(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version': 'ObjectVersion',
        'created_at': 'str',
        'updated_at': 'str',
        'spec': 'NodeSpec',
        'description': 'NodeDescription',
        'status': 'NodeStatus',
        'manager_status': 'ManagerStatus'
    }

    attribute_map = {
        'id': 'ID',
        'version': 'Version',
        'created_at': 'CreatedAt',
        'updated_at': 'UpdatedAt',
        'spec': 'Spec',
        'description': 'Description',
        'status': 'Status',
        'manager_status': 'ManagerStatus'
    }

    def __init__(self, id=None, version=None, created_at=None, updated_at=None, spec=None, description=None, status=None, manager_status=None, _configuration=None):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._version = None
        self._created_at = None
        self._updated_at = None
        self._spec = None
        self._description = None
        self._status = None
        self._manager_status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if spec is not None:
            self.spec = spec
        if description is not None:
            self.description = description
        if status is not None:
            self.status = status
        if manager_status is not None:
            self.manager_status = manager_status

    @property
    def id(self):
        """Gets the id of this Node.  # noqa: E501


        :return: The id of this Node.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.


        :param id: The id of this Node.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this Node.  # noqa: E501


        :return: The version of this Node.  # noqa: E501
        :rtype: ObjectVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Node.


        :param version: The version of this Node.  # noqa: E501
        :type: ObjectVersion
        """

        self._version = version

    @property
    def created_at(self):
        """Gets the created_at of this Node.  # noqa: E501

        Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.   # noqa: E501

        :return: The created_at of this Node.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Node.

        Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.   # noqa: E501

        :param created_at: The created_at of this Node.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Node.  # noqa: E501

        Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.   # noqa: E501

        :return: The updated_at of this Node.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Node.

        Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.   # noqa: E501

        :param updated_at: The updated_at of this Node.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def spec(self):
        """Gets the spec of this Node.  # noqa: E501


        :return: The spec of this Node.  # noqa: E501
        :rtype: NodeSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Node.


        :param spec: The spec of this Node.  # noqa: E501
        :type: NodeSpec
        """

        self._spec = spec

    @property
    def description(self):
        """Gets the description of this Node.  # noqa: E501


        :return: The description of this Node.  # noqa: E501
        :rtype: NodeDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Node.


        :param description: The description of this Node.  # noqa: E501
        :type: NodeDescription
        """

        self._description = description

    @property
    def status(self):
        """Gets the status of this Node.  # noqa: E501


        :return: The status of this Node.  # noqa: E501
        :rtype: NodeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Node.


        :param status: The status of this Node.  # noqa: E501
        :type: NodeStatus
        """

        self._status = status

    @property
    def manager_status(self):
        """Gets the manager_status of this Node.  # noqa: E501


        :return: The manager_status of this Node.  # noqa: E501
        :rtype: ManagerStatus
        """
        return self._manager_status

    @manager_status.setter
    def manager_status(self, manager_status):
        """Sets the manager_status of this Node.


        :param manager_status: The manager_status of this Node.  # noqa: E501
        :type: ManagerStatus
        """

        self._manager_status = manager_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Node):
            return True

        return self.to_dict() != other.to_dict()
