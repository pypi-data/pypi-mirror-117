# coding: utf-8

"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```   # noqa: E501

    OpenAPI spec version: 1.42
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class ResourceObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nano_cp_us': 'int',
        'memory_bytes': 'int',
        'generic_resources': 'GenericResources'
    }

    attribute_map = {
        'nano_cp_us': 'NanoCPUs',
        'memory_bytes': 'MemoryBytes',
        'generic_resources': 'GenericResources'
    }

    def __init__(self, nano_cp_us=None, memory_bytes=None, generic_resources=None, _configuration=None):  # noqa: E501
        """ResourceObject - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._nano_cp_us = None
        self._memory_bytes = None
        self._generic_resources = None
        self.discriminator = None

        if nano_cp_us is not None:
            self.nano_cp_us = nano_cp_us
        if memory_bytes is not None:
            self.memory_bytes = memory_bytes
        if generic_resources is not None:
            self.generic_resources = generic_resources

    @property
    def nano_cp_us(self):
        """Gets the nano_cp_us of this ResourceObject.  # noqa: E501


        :return: The nano_cp_us of this ResourceObject.  # noqa: E501
        :rtype: int
        """
        return self._nano_cp_us

    @nano_cp_us.setter
    def nano_cp_us(self, nano_cp_us):
        """Sets the nano_cp_us of this ResourceObject.


        :param nano_cp_us: The nano_cp_us of this ResourceObject.  # noqa: E501
        :type: int
        """

        self._nano_cp_us = nano_cp_us

    @property
    def memory_bytes(self):
        """Gets the memory_bytes of this ResourceObject.  # noqa: E501


        :return: The memory_bytes of this ResourceObject.  # noqa: E501
        :rtype: int
        """
        return self._memory_bytes

    @memory_bytes.setter
    def memory_bytes(self, memory_bytes):
        """Sets the memory_bytes of this ResourceObject.


        :param memory_bytes: The memory_bytes of this ResourceObject.  # noqa: E501
        :type: int
        """

        self._memory_bytes = memory_bytes

    @property
    def generic_resources(self):
        """Gets the generic_resources of this ResourceObject.  # noqa: E501


        :return: The generic_resources of this ResourceObject.  # noqa: E501
        :rtype: GenericResources
        """
        return self._generic_resources

    @generic_resources.setter
    def generic_resources(self, generic_resources):
        """Sets the generic_resources of this ResourceObject.


        :param generic_resources: The generic_resources of this ResourceObject.  # noqa: E501
        :type: GenericResources
        """

        self._generic_resources = generic_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourceObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourceObject):
            return True

        return self.to_dict() != other.to_dict()
