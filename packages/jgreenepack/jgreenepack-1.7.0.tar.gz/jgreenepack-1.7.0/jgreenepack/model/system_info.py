"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```   # noqa: E501

    The version of the OpenAPI document: 1.42
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from jgreenepack.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from jgreenepack.exceptions import ApiAttributeError


def lazy_import():
    from jgreenepack.model.commit import Commit
    from jgreenepack.model.generic_resources import GenericResources
    from jgreenepack.model.plugins_info import PluginsInfo
    from jgreenepack.model.registry_service_config import RegistryServiceConfig
    from jgreenepack.model.runtime import Runtime
    from jgreenepack.model.swarm_info import SwarmInfo
    from jgreenepack.model.system_info_default_address_pools import SystemInfoDefaultAddressPools
    globals()['Commit'] = Commit
    globals()['GenericResources'] = GenericResources
    globals()['PluginsInfo'] = PluginsInfo
    globals()['RegistryServiceConfig'] = RegistryServiceConfig
    globals()['Runtime'] = Runtime
    globals()['SwarmInfo'] = SwarmInfo
    globals()['SystemInfoDefaultAddressPools'] = SystemInfoDefaultAddressPools


class SystemInfo(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('cgroup_driver',): {
            'CGROUPFS': "cgroupfs",
            'SYSTEMD': "systemd",
            'NONE': "none",
        },
        ('cgroup_version',): {
            '1': "1",
            '2': "2",
        },
        ('isolation',): {
            'DEFAULT': "default",
            'HYPERV': "hyperv",
            'PROCESS': "process",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'containers': (int,),  # noqa: E501
            'containers_running': (int,),  # noqa: E501
            'containers_paused': (int,),  # noqa: E501
            'containers_stopped': (int,),  # noqa: E501
            'images': (int,),  # noqa: E501
            'driver': (str,),  # noqa: E501
            'driver_status': ([[str]],),  # noqa: E501
            'docker_root_dir': (str,),  # noqa: E501
            'plugins': (PluginsInfo,),  # noqa: E501
            'memory_limit': (bool,),  # noqa: E501
            'swap_limit': (bool,),  # noqa: E501
            'kernel_memory': (bool,),  # noqa: E501
            'cpu_cfs_period': (bool,),  # noqa: E501
            'cpu_cfs_quota': (bool,),  # noqa: E501
            'cpu_shares': (bool,),  # noqa: E501
            'cpu_set': (bool,),  # noqa: E501
            'pids_limit': (bool,),  # noqa: E501
            'oom_kill_disable': (bool,),  # noqa: E501
            'ipv4_forwarding': (bool,),  # noqa: E501
            'bridge_nf_iptables': (bool,),  # noqa: E501
            'bridge_nf_ip6tables': (bool,),  # noqa: E501
            'debug': (bool,),  # noqa: E501
            'nfd': (int,),  # noqa: E501
            'n_goroutines': (int,),  # noqa: E501
            'system_time': (str,),  # noqa: E501
            'logging_driver': (str,),  # noqa: E501
            'cgroup_driver': (str,),  # noqa: E501
            'cgroup_version': (str,),  # noqa: E501
            'n_events_listener': (int,),  # noqa: E501
            'kernel_version': (str,),  # noqa: E501
            'operating_system': (str,),  # noqa: E501
            'os_version': (str,),  # noqa: E501
            'os_type': (str,),  # noqa: E501
            'architecture': (str,),  # noqa: E501
            'ncpu': (int,),  # noqa: E501
            'mem_total': (int,),  # noqa: E501
            'index_server_address': (str,),  # noqa: E501
            'registry_config': (RegistryServiceConfig,),  # noqa: E501
            'generic_resources': (GenericResources,),  # noqa: E501
            'http_proxy': (str,),  # noqa: E501
            'https_proxy': (str,),  # noqa: E501
            'no_proxy': (str,),  # noqa: E501
            'name': (str,),  # noqa: E501
            'labels': ([str],),  # noqa: E501
            'experimental_build': (bool,),  # noqa: E501
            'server_version': (str,),  # noqa: E501
            'cluster_store': (str,),  # noqa: E501
            'cluster_advertise': (str,),  # noqa: E501
            'runtimes': ({str: (Runtime,)},),  # noqa: E501
            'default_runtime': (str,),  # noqa: E501
            'swarm': (SwarmInfo,),  # noqa: E501
            'live_restore_enabled': (bool,),  # noqa: E501
            'isolation': (str,),  # noqa: E501
            'init_binary': (str,),  # noqa: E501
            'containerd_commit': (Commit,),  # noqa: E501
            'runc_commit': (Commit,),  # noqa: E501
            'init_commit': (Commit,),  # noqa: E501
            'security_options': ([str],),  # noqa: E501
            'product_license': (str,),  # noqa: E501
            'default_address_pools': ([SystemInfoDefaultAddressPools],),  # noqa: E501
            'warnings': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'ID',  # noqa: E501
        'containers': 'Containers',  # noqa: E501
        'containers_running': 'ContainersRunning',  # noqa: E501
        'containers_paused': 'ContainersPaused',  # noqa: E501
        'containers_stopped': 'ContainersStopped',  # noqa: E501
        'images': 'Images',  # noqa: E501
        'driver': 'Driver',  # noqa: E501
        'driver_status': 'DriverStatus',  # noqa: E501
        'docker_root_dir': 'DockerRootDir',  # noqa: E501
        'plugins': 'Plugins',  # noqa: E501
        'memory_limit': 'MemoryLimit',  # noqa: E501
        'swap_limit': 'SwapLimit',  # noqa: E501
        'kernel_memory': 'KernelMemory',  # noqa: E501
        'cpu_cfs_period': 'CpuCfsPeriod',  # noqa: E501
        'cpu_cfs_quota': 'CpuCfsQuota',  # noqa: E501
        'cpu_shares': 'CPUShares',  # noqa: E501
        'cpu_set': 'CPUSet',  # noqa: E501
        'pids_limit': 'PidsLimit',  # noqa: E501
        'oom_kill_disable': 'OomKillDisable',  # noqa: E501
        'ipv4_forwarding': 'IPv4Forwarding',  # noqa: E501
        'bridge_nf_iptables': 'BridgeNfIptables',  # noqa: E501
        'bridge_nf_ip6tables': 'BridgeNfIp6tables',  # noqa: E501
        'debug': 'Debug',  # noqa: E501
        'nfd': 'NFd',  # noqa: E501
        'n_goroutines': 'NGoroutines',  # noqa: E501
        'system_time': 'SystemTime',  # noqa: E501
        'logging_driver': 'LoggingDriver',  # noqa: E501
        'cgroup_driver': 'CgroupDriver',  # noqa: E501
        'cgroup_version': 'CgroupVersion',  # noqa: E501
        'n_events_listener': 'NEventsListener',  # noqa: E501
        'kernel_version': 'KernelVersion',  # noqa: E501
        'operating_system': 'OperatingSystem',  # noqa: E501
        'os_version': 'OSVersion',  # noqa: E501
        'os_type': 'OSType',  # noqa: E501
        'architecture': 'Architecture',  # noqa: E501
        'ncpu': 'NCPU',  # noqa: E501
        'mem_total': 'MemTotal',  # noqa: E501
        'index_server_address': 'IndexServerAddress',  # noqa: E501
        'registry_config': 'RegistryConfig',  # noqa: E501
        'generic_resources': 'GenericResources',  # noqa: E501
        'http_proxy': 'HttpProxy',  # noqa: E501
        'https_proxy': 'HttpsProxy',  # noqa: E501
        'no_proxy': 'NoProxy',  # noqa: E501
        'name': 'Name',  # noqa: E501
        'labels': 'Labels',  # noqa: E501
        'experimental_build': 'ExperimentalBuild',  # noqa: E501
        'server_version': 'ServerVersion',  # noqa: E501
        'cluster_store': 'ClusterStore',  # noqa: E501
        'cluster_advertise': 'ClusterAdvertise',  # noqa: E501
        'runtimes': 'Runtimes',  # noqa: E501
        'default_runtime': 'DefaultRuntime',  # noqa: E501
        'swarm': 'Swarm',  # noqa: E501
        'live_restore_enabled': 'LiveRestoreEnabled',  # noqa: E501
        'isolation': 'Isolation',  # noqa: E501
        'init_binary': 'InitBinary',  # noqa: E501
        'containerd_commit': 'ContainerdCommit',  # noqa: E501
        'runc_commit': 'RuncCommit',  # noqa: E501
        'init_commit': 'InitCommit',  # noqa: E501
        'security_options': 'SecurityOptions',  # noqa: E501
        'product_license': 'ProductLicense',  # noqa: E501
        'default_address_pools': 'DefaultAddressPools',  # noqa: E501
        'warnings': 'Warnings',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """SystemInfo - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable. . [optional]  # noqa: E501
            containers (int): Total number of containers on the host.. [optional]  # noqa: E501
            containers_running (int): Number of containers with status `\"running\"`. . [optional]  # noqa: E501
            containers_paused (int): Number of containers with status `\"paused\"`. . [optional]  # noqa: E501
            containers_stopped (int): Number of containers with status `\"stopped\"`. . [optional]  # noqa: E501
            images (int): Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. . [optional]  # noqa: E501
            driver (str): Name of the storage driver in use.. [optional]  # noqa: E501
            driver_status ([[str]]): Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice. . [optional]  # noqa: E501
            docker_root_dir (str): Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows. . [optional]  # noqa: E501
            plugins (PluginsInfo): [optional]  # noqa: E501
            memory_limit (bool): Indicates if the host has memory limit support enabled.. [optional]  # noqa: E501
            swap_limit (bool): Indicates if the host has memory swap limit support enabled.. [optional]  # noqa: E501
            kernel_memory (bool): Indicates if the host has kernel memory limit support enabled.  <p><br /></p>  > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated > `kmem.limit_in_bytes`. . [optional]  # noqa: E501
            cpu_cfs_period (bool): Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. . [optional]  # noqa: E501
            cpu_cfs_quota (bool): Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. . [optional]  # noqa: E501
            cpu_shares (bool): Indicates if CPU Shares limiting is supported by the host. . [optional]  # noqa: E501
            cpu_set (bool): Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) . [optional]  # noqa: E501
            pids_limit (bool): Indicates if the host kernel has PID limit support enabled.. [optional]  # noqa: E501
            oom_kill_disable (bool): Indicates if OOM killer disable is supported on the host.. [optional]  # noqa: E501
            ipv4_forwarding (bool): Indicates IPv4 forwarding is enabled.. [optional]  # noqa: E501
            bridge_nf_iptables (bool): Indicates if `bridge-nf-call-iptables` is available on the host.. [optional]  # noqa: E501
            bridge_nf_ip6tables (bool): Indicates if `bridge-nf-call-ip6tables` is available on the host.. [optional]  # noqa: E501
            debug (bool): Indicates if the daemon is running in debug-mode / with debug-level logging enabled. . [optional]  # noqa: E501
            nfd (int): The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. . [optional]  # noqa: E501
            n_goroutines (int): The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. . [optional]  # noqa: E501
            system_time (str): Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. . [optional]  # noqa: E501
            logging_driver (str): The logging driver to use as a default for new containers. . [optional]  # noqa: E501
            cgroup_driver (str): The driver to use for managing cgroups. . [optional] if omitted the server will use the default value of "cgroupfs"  # noqa: E501
            cgroup_version (str): The version of the cgroup. . [optional] if omitted the server will use the default value of "1"  # noqa: E501
            n_events_listener (int): Number of event listeners subscribed.. [optional]  # noqa: E501
            kernel_version (str): Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_. . [optional]  # noqa: E501
            operating_system (str): Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" . [optional]  # noqa: E501
            os_version (str): Version of the host's operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice. . [optional]  # noqa: E501
            os_type (str): Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). . [optional]  # noqa: E501
            architecture (str): Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). . [optional]  # noqa: E501
            ncpu (int): The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. . [optional]  # noqa: E501
            mem_total (int): Total amount of physical memory available on the host, in bytes. . [optional]  # noqa: E501
            index_server_address (str): Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. . [optional] if omitted the server will use the default value of "https://index.docker.io/v1/"  # noqa: E501
            registry_config (RegistryServiceConfig): [optional]  # noqa: E501
            generic_resources (GenericResources): [optional]  # noqa: E501
            http_proxy (str): HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. . [optional]  # noqa: E501
            https_proxy (str): HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. . [optional]  # noqa: E501
            no_proxy (str): Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. . [optional]  # noqa: E501
            name (str): Hostname of the host.. [optional]  # noqa: E501
            labels ([str]): User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm. . [optional]  # noqa: E501
            experimental_build (bool): Indicates if experimental features are enabled on the daemon. . [optional]  # noqa: E501
            server_version (str): Version string of the daemon.  > **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) > returns the Swarm version instead of the daemon  version, for example > `swarm/1.2.8`. . [optional]  # noqa: E501
            cluster_store (str): URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty. . [optional]  # noqa: E501
            cluster_advertise (str): The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty. . [optional]  # noqa: E501
            runtimes ({str: (Runtime,)}): List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here. . [optional]  # noqa: E501
            default_runtime (str): Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. . [optional] if omitted the server will use the default value of "runc"  # noqa: E501
            swarm (SwarmInfo): [optional]  # noqa: E501
            live_restore_enabled (bool): Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. . [optional] if omitted the server will use the default value of False  # noqa: E501
            isolation (str): Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. . [optional] if omitted the server will use the default value of "default"  # noqa: E501
            init_binary (str): Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. . [optional]  # noqa: E501
            containerd_commit (Commit): [optional]  # noqa: E501
            runc_commit (Commit): [optional]  # noqa: E501
            init_commit (Commit): [optional]  # noqa: E501
            security_options ([str]): List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. . [optional]  # noqa: E501
            product_license (str): Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. . [optional]  # noqa: E501
            default_address_pools ([SystemInfoDefaultAddressPools]): List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools. . [optional]  # noqa: E501
            warnings ([str]): List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """SystemInfo - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable. . [optional]  # noqa: E501
            containers (int): Total number of containers on the host.. [optional]  # noqa: E501
            containers_running (int): Number of containers with status `\"running\"`. . [optional]  # noqa: E501
            containers_paused (int): Number of containers with status `\"paused\"`. . [optional]  # noqa: E501
            containers_stopped (int): Number of containers with status `\"stopped\"`. . [optional]  # noqa: E501
            images (int): Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. . [optional]  # noqa: E501
            driver (str): Name of the storage driver in use.. [optional]  # noqa: E501
            driver_status ([[str]]): Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice. . [optional]  # noqa: E501
            docker_root_dir (str): Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows. . [optional]  # noqa: E501
            plugins (PluginsInfo): [optional]  # noqa: E501
            memory_limit (bool): Indicates if the host has memory limit support enabled.. [optional]  # noqa: E501
            swap_limit (bool): Indicates if the host has memory swap limit support enabled.. [optional]  # noqa: E501
            kernel_memory (bool): Indicates if the host has kernel memory limit support enabled.  <p><br /></p>  > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated > `kmem.limit_in_bytes`. . [optional]  # noqa: E501
            cpu_cfs_period (bool): Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. . [optional]  # noqa: E501
            cpu_cfs_quota (bool): Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. . [optional]  # noqa: E501
            cpu_shares (bool): Indicates if CPU Shares limiting is supported by the host. . [optional]  # noqa: E501
            cpu_set (bool): Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) . [optional]  # noqa: E501
            pids_limit (bool): Indicates if the host kernel has PID limit support enabled.. [optional]  # noqa: E501
            oom_kill_disable (bool): Indicates if OOM killer disable is supported on the host.. [optional]  # noqa: E501
            ipv4_forwarding (bool): Indicates IPv4 forwarding is enabled.. [optional]  # noqa: E501
            bridge_nf_iptables (bool): Indicates if `bridge-nf-call-iptables` is available on the host.. [optional]  # noqa: E501
            bridge_nf_ip6tables (bool): Indicates if `bridge-nf-call-ip6tables` is available on the host.. [optional]  # noqa: E501
            debug (bool): Indicates if the daemon is running in debug-mode / with debug-level logging enabled. . [optional]  # noqa: E501
            nfd (int): The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. . [optional]  # noqa: E501
            n_goroutines (int): The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. . [optional]  # noqa: E501
            system_time (str): Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. . [optional]  # noqa: E501
            logging_driver (str): The logging driver to use as a default for new containers. . [optional]  # noqa: E501
            cgroup_driver (str): The driver to use for managing cgroups. . [optional] if omitted the server will use the default value of "cgroupfs"  # noqa: E501
            cgroup_version (str): The version of the cgroup. . [optional] if omitted the server will use the default value of "1"  # noqa: E501
            n_events_listener (int): Number of event listeners subscribed.. [optional]  # noqa: E501
            kernel_version (str): Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_. . [optional]  # noqa: E501
            operating_system (str): Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" . [optional]  # noqa: E501
            os_version (str): Version of the host's operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice. . [optional]  # noqa: E501
            os_type (str): Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). . [optional]  # noqa: E501
            architecture (str): Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment). . [optional]  # noqa: E501
            ncpu (int): The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. . [optional]  # noqa: E501
            mem_total (int): Total amount of physical memory available on the host, in bytes. . [optional]  # noqa: E501
            index_server_address (str): Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. . [optional] if omitted the server will use the default value of "https://index.docker.io/v1/"  # noqa: E501
            registry_config (RegistryServiceConfig): [optional]  # noqa: E501
            generic_resources (GenericResources): [optional]  # noqa: E501
            http_proxy (str): HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. . [optional]  # noqa: E501
            https_proxy (str): HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. . [optional]  # noqa: E501
            no_proxy (str): Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. . [optional]  # noqa: E501
            name (str): Hostname of the host.. [optional]  # noqa: E501
            labels ([str]): User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm. . [optional]  # noqa: E501
            experimental_build (bool): Indicates if experimental features are enabled on the daemon. . [optional]  # noqa: E501
            server_version (str): Version string of the daemon.  > **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) > returns the Swarm version instead of the daemon  version, for example > `swarm/1.2.8`. . [optional]  # noqa: E501
            cluster_store (str): URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty. . [optional]  # noqa: E501
            cluster_advertise (str): The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.  <p><br /></p>  > **Deprecated**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty. . [optional]  # noqa: E501
            runtimes ({str: (Runtime,)}): List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here. . [optional]  # noqa: E501
            default_runtime (str): Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. . [optional] if omitted the server will use the default value of "runc"  # noqa: E501
            swarm (SwarmInfo): [optional]  # noqa: E501
            live_restore_enabled (bool): Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. . [optional] if omitted the server will use the default value of False  # noqa: E501
            isolation (str): Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. . [optional] if omitted the server will use the default value of "default"  # noqa: E501
            init_binary (str): Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. . [optional]  # noqa: E501
            containerd_commit (Commit): [optional]  # noqa: E501
            runc_commit (Commit): [optional]  # noqa: E501
            init_commit (Commit): [optional]  # noqa: E501
            security_options ([str]): List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. . [optional]  # noqa: E501
            product_license (str): Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. . [optional]  # noqa: E501
            default_address_pools ([SystemInfoDefaultAddressPools]): List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools. . [optional]  # noqa: E501
            warnings ([str]): List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
