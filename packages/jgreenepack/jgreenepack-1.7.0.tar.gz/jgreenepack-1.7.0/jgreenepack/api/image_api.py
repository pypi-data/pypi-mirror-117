"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```   # noqa: E501

    The version of the OpenAPI document: 1.42
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from jgreenepack.api_client import ApiClient, Endpoint as _Endpoint
from jgreenepack.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from jgreenepack.model.build_prune_response import BuildPruneResponse
from jgreenepack.model.container_config import ContainerConfig
from jgreenepack.model.error_response import ErrorResponse
from jgreenepack.model.history_response_item import HistoryResponseItem
from jgreenepack.model.id_response import IdResponse
from jgreenepack.model.image import Image
from jgreenepack.model.image_delete_response_item import ImageDeleteResponseItem
from jgreenepack.model.image_prune_response import ImagePruneResponse
from jgreenepack.model.image_search_response_item import ImageSearchResponseItem
from jgreenepack.model.image_summary import ImageSummary


class ImageApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __build_prune(
            self,
            **kwargs
        ):
            """Delete builder cache  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.build_prune(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                keep_storage (int): Amount of disk space in bytes to keep for cache. [optional]
                all (bool): Remove all types of build cache. [optional]
                filters (str): A JSON encoded value of the filters (a `map[string][]string`) to process on the list of build cache objects.  Available filters:  - `until=<duration>`: duration relative to daemon's time, during which build cache was not used, in Go's duration format (e.g., '24h') - `id=<id>` - `parent=<id>` - `type=<string>` - `description=<string>` - `inuse` - `shared` - `private` . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                BuildPruneResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.build_prune = _Endpoint(
            settings={
                'response_type': (BuildPruneResponse,),
                'auth': [],
                'endpoint_path': '/build/prune',
                'operation_id': 'build_prune',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'keep_storage',
                    'all',
                    'filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'keep_storage':
                        (int,),
                    'all':
                        (bool,),
                    'filters':
                        (str,),
                },
                'attribute_map': {
                    'keep_storage': 'keep-storage',
                    'all': 'all',
                    'filters': 'filters',
                },
                'location_map': {
                    'keep_storage': 'query',
                    'all': 'query',
                    'filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__build_prune
        )

        def __image_build(
            self,
            **kwargs
        ):
            """Build an image  # noqa: E501

            Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_build(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                dockerfile (str): Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`.. [optional] if omitted the server will use the default value of "Dockerfile"
                t (str): A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters.. [optional]
                extrahosts (str): Extra hosts to add to /etc/hosts. [optional]
                remote (str): A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball.. [optional]
                q (bool): Suppress verbose build output.. [optional] if omitted the server will use the default value of False
                nocache (bool): Do not use the cache when building the image.. [optional] if omitted the server will use the default value of False
                cachefrom (str): JSON array of images used for build cache resolution.. [optional]
                pull (str): Attempt to pull the image even if an older image exists locally.. [optional]
                rm (bool): Remove intermediate containers after a successful build.. [optional] if omitted the server will use the default value of True
                forcerm (bool): Always remove intermediate containers, even upon failure.. [optional] if omitted the server will use the default value of False
                memory (int): Set memory limit for build.. [optional]
                memswap (int): Total memory (memory + swap). Set as `-1` to disable swap.. [optional]
                cpushares (int): CPU shares (relative weight).. [optional]
                cpusetcpus (str): CPUs in which to allow execution (e.g., `0-3`, `0,1`).. [optional]
                cpuperiod (int): The length of a CPU period in microseconds.. [optional]
                cpuquota (int): Microseconds of CPU time that the container can get in a CPU period.. [optional]
                buildargs (str): JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the `Dockerfile` RUN instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for passing secret values.  For example, the build arg `FOO=bar` would become `{\"FOO\":\"bar\"}` in JSON. This would result in the query parameter `buildargs={\"FOO\":\"bar\"}`. Note that `{\"FOO\":\"bar\"}` should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) . [optional]
                shmsize (int): Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB.. [optional]
                squash (bool): Squash the resulting images layers into a single layer. *(Experimental release only.)*. [optional]
                labels (str): Arbitrary key/value labels to set on the image, as a JSON map of string pairs.. [optional]
                networkmode (str): Sets the networking mode for the run commands during build. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name or ID to which this container should connect to. . [optional]
                content_type (str): [optional] if omitted the server will use the default value of "application/x-tar"
                x_registry_config (str): This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  ``` {   \"docker.example.com\": {     \"username\": \"janedoe\",     \"password\": \"hunter2\"   },   \"https://index.docker.io/v1/\": {     \"username\": \"mobydock\",     \"password\": \"conta1n3rize14\"   } } ```  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API. . [optional]
                platform (str): Platform in the format os[/arch[/variant]]. [optional]
                target (str): Target build stage. [optional]
                outputs (str): BuildKit output configuration. [optional]
                input_stream (file_type): A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.image_build = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/build',
                'operation_id': 'image_build',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'dockerfile',
                    't',
                    'extrahosts',
                    'remote',
                    'q',
                    'nocache',
                    'cachefrom',
                    'pull',
                    'rm',
                    'forcerm',
                    'memory',
                    'memswap',
                    'cpushares',
                    'cpusetcpus',
                    'cpuperiod',
                    'cpuquota',
                    'buildargs',
                    'shmsize',
                    'squash',
                    'labels',
                    'networkmode',
                    'content_type',
                    'x_registry_config',
                    'platform',
                    'target',
                    'outputs',
                    'input_stream',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'content_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('content_type',): {

                        "APPLICATION/X-TAR": "application/x-tar"
                    },
                },
                'openapi_types': {
                    'dockerfile':
                        (str,),
                    't':
                        (str,),
                    'extrahosts':
                        (str,),
                    'remote':
                        (str,),
                    'q':
                        (bool,),
                    'nocache':
                        (bool,),
                    'cachefrom':
                        (str,),
                    'pull':
                        (str,),
                    'rm':
                        (bool,),
                    'forcerm':
                        (bool,),
                    'memory':
                        (int,),
                    'memswap':
                        (int,),
                    'cpushares':
                        (int,),
                    'cpusetcpus':
                        (str,),
                    'cpuperiod':
                        (int,),
                    'cpuquota':
                        (int,),
                    'buildargs':
                        (str,),
                    'shmsize':
                        (int,),
                    'squash':
                        (bool,),
                    'labels':
                        (str,),
                    'networkmode':
                        (str,),
                    'content_type':
                        (str,),
                    'x_registry_config':
                        (str,),
                    'platform':
                        (str,),
                    'target':
                        (str,),
                    'outputs':
                        (str,),
                    'input_stream':
                        (file_type,),
                },
                'attribute_map': {
                    'dockerfile': 'dockerfile',
                    't': 't',
                    'extrahosts': 'extrahosts',
                    'remote': 'remote',
                    'q': 'q',
                    'nocache': 'nocache',
                    'cachefrom': 'cachefrom',
                    'pull': 'pull',
                    'rm': 'rm',
                    'forcerm': 'forcerm',
                    'memory': 'memory',
                    'memswap': 'memswap',
                    'cpushares': 'cpushares',
                    'cpusetcpus': 'cpusetcpus',
                    'cpuperiod': 'cpuperiod',
                    'cpuquota': 'cpuquota',
                    'buildargs': 'buildargs',
                    'shmsize': 'shmsize',
                    'squash': 'squash',
                    'labels': 'labels',
                    'networkmode': 'networkmode',
                    'content_type': 'Content-type',
                    'x_registry_config': 'X-Registry-Config',
                    'platform': 'platform',
                    'target': 'target',
                    'outputs': 'outputs',
                },
                'location_map': {
                    'dockerfile': 'query',
                    't': 'query',
                    'extrahosts': 'query',
                    'remote': 'query',
                    'q': 'query',
                    'nocache': 'query',
                    'cachefrom': 'query',
                    'pull': 'query',
                    'rm': 'query',
                    'forcerm': 'query',
                    'memory': 'query',
                    'memswap': 'query',
                    'cpushares': 'query',
                    'cpusetcpus': 'query',
                    'cpuperiod': 'query',
                    'cpuquota': 'query',
                    'buildargs': 'query',
                    'shmsize': 'query',
                    'squash': 'query',
                    'labels': 'query',
                    'networkmode': 'query',
                    'content_type': 'header',
                    'x_registry_config': 'header',
                    'platform': 'query',
                    'target': 'query',
                    'outputs': 'query',
                    'input_stream': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/octet-stream'
                ]
            },
            api_client=api_client,
            callable=__image_build
        )

        def __image_commit(
            self,
            **kwargs
        ):
            """Create a new image from a container  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_commit(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                container (str): The ID or name of the container to commit. [optional]
                repo (str): Repository name for the created image. [optional]
                tag (str): Tag name for the create image. [optional]
                comment (str): Commit message. [optional]
                author (str): Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`). [optional]
                pause (bool): Whether to pause the container before committing. [optional] if omitted the server will use the default value of True
                changes (str): `Dockerfile` instructions to apply while committing. [optional]
                container_config (ContainerConfig): The container configuration. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IdResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.image_commit = _Endpoint(
            settings={
                'response_type': (IdResponse,),
                'auth': [],
                'endpoint_path': '/commit',
                'operation_id': 'image_commit',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'container',
                    'repo',
                    'tag',
                    'comment',
                    'author',
                    'pause',
                    'changes',
                    'container_config',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'container':
                        (str,),
                    'repo':
                        (str,),
                    'tag':
                        (str,),
                    'comment':
                        (str,),
                    'author':
                        (str,),
                    'pause':
                        (bool,),
                    'changes':
                        (str,),
                    'container_config':
                        (ContainerConfig,),
                },
                'attribute_map': {
                    'container': 'container',
                    'repo': 'repo',
                    'tag': 'tag',
                    'comment': 'comment',
                    'author': 'author',
                    'pause': 'pause',
                    'changes': 'changes',
                },
                'location_map': {
                    'container': 'query',
                    'repo': 'query',
                    'tag': 'query',
                    'comment': 'query',
                    'author': 'query',
                    'pause': 'query',
                    'changes': 'query',
                    'container_config': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__image_commit
        )

        def __image_create(
            self,
            **kwargs
        ):
            """Create an image  # noqa: E501

            Create an image by either pulling it from a registry or importing it.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_create(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                from_image (str): Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.. [optional]
                from_src (str): Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image.. [optional]
                repo (str): Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.. [optional]
                tag (str): Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.. [optional]
                message (str): Set commit message for imported image.. [optional]
                x_registry_auth (str): A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. . [optional]
                changes ([str]): Apply `Dockerfile` instructions to the image that is created, for example: `changes=ENV DEBUG=true`. Note that `ENV DEBUG=true` should be URI component encoded.  Supported `Dockerfile` instructions: `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR` . [optional]
                platform (str): Platform in the format os[/arch[/variant]]. [optional]
                input_image (str): Image content if the value `-` has been specified in fromSrc query parameter. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.image_create = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/images/create',
                'operation_id': 'image_create',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'from_image',
                    'from_src',
                    'repo',
                    'tag',
                    'message',
                    'x_registry_auth',
                    'changes',
                    'platform',
                    'input_image',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'from_image':
                        (str,),
                    'from_src':
                        (str,),
                    'repo':
                        (str,),
                    'tag':
                        (str,),
                    'message':
                        (str,),
                    'x_registry_auth':
                        (str,),
                    'changes':
                        ([str],),
                    'platform':
                        (str,),
                    'input_image':
                        (str,),
                },
                'attribute_map': {
                    'from_image': 'fromImage',
                    'from_src': 'fromSrc',
                    'repo': 'repo',
                    'tag': 'tag',
                    'message': 'message',
                    'x_registry_auth': 'X-Registry-Auth',
                    'changes': 'changes',
                    'platform': 'platform',
                },
                'location_map': {
                    'from_image': 'query',
                    'from_src': 'query',
                    'repo': 'query',
                    'tag': 'query',
                    'message': 'query',
                    'x_registry_auth': 'header',
                    'changes': 'query',
                    'platform': 'query',
                    'input_image': 'body',
                },
                'collection_format_map': {
                    'changes': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'text/plain',
                    'application/octet-stream'
                ]
            },
            api_client=api_client,
            callable=__image_create
        )

        def __image_delete(
            self,
            name,
            **kwargs
        ):
            """Remove an image  # noqa: E501

            Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_delete(name, async_req=True)
            >>> result = thread.get()

            Args:
                name (str): Image name or ID

            Keyword Args:
                force (bool): Remove the image even if it is being used by stopped containers or has other tags. [optional] if omitted the server will use the default value of False
                noprune (bool): Do not delete untagged parent images. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ImageDeleteResponseItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.image_delete = _Endpoint(
            settings={
                'response_type': ([ImageDeleteResponseItem],),
                'auth': [],
                'endpoint_path': '/images/{name}',
                'operation_id': 'image_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'force',
                    'noprune',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'force':
                        (bool,),
                    'noprune':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'force': 'force',
                    'noprune': 'noprune',
                },
                'location_map': {
                    'name': 'path',
                    'force': 'query',
                    'noprune': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_delete
        )

        def __image_get(
            self,
            name,
            **kwargs
        ):
            """Export an image  # noqa: E501

            Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ```   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_get(name, async_req=True)
            >>> result = thread.get()

            Args:
                name (str): Image name or ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.image_get = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/images/{name}/get',
                'operation_id': 'image_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/x-tar'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_get
        )

        def __image_get_all(
            self,
            **kwargs
        ):
            """Export several images  # noqa: E501

            Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet).   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_get_all(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                names ([str]): Image names to filter by. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.image_get_all = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [],
                'endpoint_path': '/images/get',
                'operation_id': 'image_get_all',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'names',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'names':
                        ([str],),
                },
                'attribute_map': {
                    'names': 'names',
                },
                'location_map': {
                    'names': 'query',
                },
                'collection_format_map': {
                    'names': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/x-tar'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_get_all
        )

        def __image_history(
            self,
            name,
            **kwargs
        ):
            """Get the history of an image  # noqa: E501

            Return parent layers of an image.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_history(name, async_req=True)
            >>> result = thread.get()

            Args:
                name (str): Image name or ID

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [HistoryResponseItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.image_history = _Endpoint(
            settings={
                'response_type': ([HistoryResponseItem],),
                'auth': [],
                'endpoint_path': '/images/{name}/history',
                'operation_id': 'image_history',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_history
        )

        def __image_inspect(
            self,
            name,
            **kwargs
        ):
            """Inspect an image  # noqa: E501

            Return low-level information about an image.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_inspect(name, async_req=True)
            >>> result = thread.get()

            Args:
                name (str): Image name or id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Image
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.image_inspect = _Endpoint(
            settings={
                'response_type': (Image,),
                'auth': [],
                'endpoint_path': '/images/{name}/json',
                'operation_id': 'image_inspect',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                },
                'location_map': {
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_inspect
        )

        def __image_list(
            self,
            **kwargs
        ):
            """List Images  # noqa: E501

            Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_list(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                all (bool): Show all images. Only images from a final layer (no children) are shown by default.. [optional] if omitted the server will use the default value of False
                filters (str): A JSON encoded value of the filters (a `map[string][]string`) to process on the images list.  Available filters:  - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`) - `dangling=true` - `label=key` or `label=\"key=value\"` of an image label - `reference`=(`<image-name>[:<tag>]`) - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`) . [optional]
                shared_size (bool): Compute and show shared size as a `SharedSize` field on each image.. [optional] if omitted the server will use the default value of False
                digests (bool): Show digest information as a `RepoDigests` field on each image.. [optional] if omitted the server will use the default value of False
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ImageSummary]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.image_list = _Endpoint(
            settings={
                'response_type': ([ImageSummary],),
                'auth': [],
                'endpoint_path': '/images/json',
                'operation_id': 'image_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'all',
                    'filters',
                    'shared_size',
                    'digests',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'all':
                        (bool,),
                    'filters':
                        (str,),
                    'shared_size':
                        (bool,),
                    'digests':
                        (bool,),
                },
                'attribute_map': {
                    'all': 'all',
                    'filters': 'filters',
                    'shared_size': 'shared-size',
                    'digests': 'digests',
                },
                'location_map': {
                    'all': 'query',
                    'filters': 'query',
                    'shared_size': 'query',
                    'digests': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_list
        )

        def __image_load(
            self,
            **kwargs
        ):
            """Import images  # noqa: E501

            Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet).   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_load(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                quiet (bool): Suppress progress details during load.. [optional] if omitted the server will use the default value of False
                images_tarball (file_type): Tar archive containing images. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.image_load = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/images/load',
                'operation_id': 'image_load',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'quiet',
                    'images_tarball',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'quiet':
                        (bool,),
                    'images_tarball':
                        (file_type,),
                },
                'attribute_map': {
                    'quiet': 'quiet',
                },
                'location_map': {
                    'quiet': 'query',
                    'images_tarball': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-tar'
                ]
            },
            api_client=api_client,
            callable=__image_load
        )

        def __image_prune(
            self,
            **kwargs
        ):
            """Delete unused images  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_prune(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                filters (str): Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:  - `dangling=<boolean>` When set to `true` (or `1`), prune only    unused *and* untagged images. When set to `false`    (or `0`), all unused images are pruned. - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time. - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ImagePruneResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.image_prune = _Endpoint(
            settings={
                'response_type': (ImagePruneResponse,),
                'auth': [],
                'endpoint_path': '/images/prune',
                'operation_id': 'image_prune',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'filters',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filters':
                        (str,),
                },
                'attribute_map': {
                    'filters': 'filters',
                },
                'location_map': {
                    'filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_prune
        )

        def __image_push(
            self,
            name,
            x_registry_auth,
            **kwargs
        ):
            """Push an image  # noqa: E501

            Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_push(name, x_registry_auth, async_req=True)
            >>> result = thread.get()

            Args:
                name (str): Image name or ID.
                x_registry_auth (str): A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 

            Keyword Args:
                tag (str): The tag to associate with the image on the registry.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            kwargs['x_registry_auth'] = \
                x_registry_auth
            return self.call_with_http_info(**kwargs)

        self.image_push = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/images/{name}/push',
                'operation_id': 'image_push',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'x_registry_auth',
                    'tag',
                ],
                'required': [
                    'name',
                    'x_registry_auth',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'x_registry_auth':
                        (str,),
                    'tag':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'x_registry_auth': 'X-Registry-Auth',
                    'tag': 'tag',
                },
                'location_map': {
                    'name': 'path',
                    'x_registry_auth': 'header',
                    'tag': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_push
        )

        def __image_search(
            self,
            term,
            **kwargs
        ):
            """Search images  # noqa: E501

            Search for an image on Docker Hub.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_search(term, async_req=True)
            >>> result = thread.get()

            Args:
                term (str): Term to search

            Keyword Args:
                limit (int): Maximum number of results to return. [optional]
                filters (str): A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:  - `is-automated=(true|false)` - `is-official=(true|false)` - `stars=<number>` Matches images that has at least 'number' stars. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ImageSearchResponseItem]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['term'] = \
                term
            return self.call_with_http_info(**kwargs)

        self.image_search = _Endpoint(
            settings={
                'response_type': ([ImageSearchResponseItem],),
                'auth': [],
                'endpoint_path': '/images/search',
                'operation_id': 'image_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'term',
                    'limit',
                    'filters',
                ],
                'required': [
                    'term',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'term':
                        (str,),
                    'limit':
                        (int,),
                    'filters':
                        (str,),
                },
                'attribute_map': {
                    'term': 'term',
                    'limit': 'limit',
                    'filters': 'filters',
                },
                'location_map': {
                    'term': 'query',
                    'limit': 'query',
                    'filters': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_search
        )

        def __image_tag(
            self,
            name,
            **kwargs
        ):
            """Tag an image  # noqa: E501

            Tag an image so that it becomes part of a repository.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.image_tag(name, async_req=True)
            >>> result = thread.get()

            Args:
                name (str): Image name or ID to tag.

            Keyword Args:
                repo (str): The repository to tag in. For example, `someuser/someimage`.. [optional]
                tag (str): The name of the new tag.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.image_tag = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/images/{name}/tag',
                'operation_id': 'image_tag',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'repo',
                    'tag',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'repo':
                        (str,),
                    'tag':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'repo': 'repo',
                    'tag': 'tag',
                },
                'location_map': {
                    'name': 'path',
                    'repo': 'query',
                    'tag': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__image_tag
        )
