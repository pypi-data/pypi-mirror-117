"""
    Docker Engine API

    The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.42) is used. For example, calling `/info` is the same as calling `/v1.42/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```   # noqa: E501

    The version of the OpenAPI document: 1.42
    Generated by: https://openapi-generator.tech
"""


import unittest

import jgreenepack
from jgreenepack.api.image_api import ImageApi  # noqa: E501


class TestImageApi(unittest.TestCase):
    """ImageApi unit test stubs"""

    def setUp(self):
        self.api = ImageApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_build_prune(self):
        """Test case for build_prune

        Delete builder cache  # noqa: E501
        """
        pass

    def test_image_build(self):
        """Test case for image_build

        Build an image  # noqa: E501
        """
        pass

    def test_image_commit(self):
        """Test case for image_commit

        Create a new image from a container  # noqa: E501
        """
        pass

    def test_image_create(self):
        """Test case for image_create

        Create an image  # noqa: E501
        """
        pass

    def test_image_delete(self):
        """Test case for image_delete

        Remove an image  # noqa: E501
        """
        pass

    def test_image_get(self):
        """Test case for image_get

        Export an image  # noqa: E501
        """
        pass

    def test_image_get_all(self):
        """Test case for image_get_all

        Export several images  # noqa: E501
        """
        pass

    def test_image_history(self):
        """Test case for image_history

        Get the history of an image  # noqa: E501
        """
        pass

    def test_image_inspect(self):
        """Test case for image_inspect

        Inspect an image  # noqa: E501
        """
        pass

    def test_image_list(self):
        """Test case for image_list

        List Images  # noqa: E501
        """
        pass

    def test_image_load(self):
        """Test case for image_load

        Import images  # noqa: E501
        """
        pass

    def test_image_prune(self):
        """Test case for image_prune

        Delete unused images  # noqa: E501
        """
        pass

    def test_image_push(self):
        """Test case for image_push

        Push an image  # noqa: E501
        """
        pass

    def test_image_search(self):
        """Test case for image_search

        Search images  # noqa: E501
        """
        pass

    def test_image_tag(self):
        """Test case for image_tag

        Tag an image  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
