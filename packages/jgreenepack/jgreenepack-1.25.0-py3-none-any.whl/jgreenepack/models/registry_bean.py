# coding: utf-8

"""
    Dockstore API

    This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.  # noqa: E501

    OpenAPI spec version: 1.12.0-alpha.1-SNAPSHOT
    Contact: theglobalalliance@genomicsandhealth.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class RegistryBean(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_docker_path': 'str',
        'docker_path': 'str',
        'enum': 'str',
        'friendly_name': 'str',
        'private_only': 'str',
        'url': 'str'
    }

    attribute_map = {
        'custom_docker_path': 'customDockerPath',
        'docker_path': 'dockerPath',
        'enum': 'enum',
        'friendly_name': 'friendlyName',
        'private_only': 'privateOnly',
        'url': 'url'
    }

    def __init__(self, custom_docker_path=None, docker_path=None, enum=None, friendly_name=None, private_only=None, url=None, _configuration=None):  # noqa: E501
        """RegistryBean - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._custom_docker_path = None
        self._docker_path = None
        self._enum = None
        self._friendly_name = None
        self._private_only = None
        self._url = None
        self.discriminator = None

        if custom_docker_path is not None:
            self.custom_docker_path = custom_docker_path
        if docker_path is not None:
            self.docker_path = docker_path
        if enum is not None:
            self.enum = enum
        if friendly_name is not None:
            self.friendly_name = friendly_name
        if private_only is not None:
            self.private_only = private_only
        if url is not None:
            self.url = url

    @property
    def custom_docker_path(self):
        """Gets the custom_docker_path of this RegistryBean.  # noqa: E501


        :return: The custom_docker_path of this RegistryBean.  # noqa: E501
        :rtype: str
        """
        return self._custom_docker_path

    @custom_docker_path.setter
    def custom_docker_path(self, custom_docker_path):
        """Sets the custom_docker_path of this RegistryBean.


        :param custom_docker_path: The custom_docker_path of this RegistryBean.  # noqa: E501
        :type: str
        """

        self._custom_docker_path = custom_docker_path

    @property
    def docker_path(self):
        """Gets the docker_path of this RegistryBean.  # noqa: E501


        :return: The docker_path of this RegistryBean.  # noqa: E501
        :rtype: str
        """
        return self._docker_path

    @docker_path.setter
    def docker_path(self, docker_path):
        """Sets the docker_path of this RegistryBean.


        :param docker_path: The docker_path of this RegistryBean.  # noqa: E501
        :type: str
        """

        self._docker_path = docker_path

    @property
    def enum(self):
        """Gets the enum of this RegistryBean.  # noqa: E501


        :return: The enum of this RegistryBean.  # noqa: E501
        :rtype: str
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this RegistryBean.


        :param enum: The enum of this RegistryBean.  # noqa: E501
        :type: str
        """

        self._enum = enum

    @property
    def friendly_name(self):
        """Gets the friendly_name of this RegistryBean.  # noqa: E501


        :return: The friendly_name of this RegistryBean.  # noqa: E501
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this RegistryBean.


        :param friendly_name: The friendly_name of this RegistryBean.  # noqa: E501
        :type: str
        """

        self._friendly_name = friendly_name

    @property
    def private_only(self):
        """Gets the private_only of this RegistryBean.  # noqa: E501


        :return: The private_only of this RegistryBean.  # noqa: E501
        :rtype: str
        """
        return self._private_only

    @private_only.setter
    def private_only(self, private_only):
        """Sets the private_only of this RegistryBean.


        :param private_only: The private_only of this RegistryBean.  # noqa: E501
        :type: str
        """

        self._private_only = private_only

    @property
    def url(self):
        """Gets the url of this RegistryBean.  # noqa: E501


        :return: The url of this RegistryBean.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RegistryBean.


        :param url: The url of this RegistryBean.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryBean, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryBean):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistryBean):
            return True

        return self.to_dict() != other.to_dict()
