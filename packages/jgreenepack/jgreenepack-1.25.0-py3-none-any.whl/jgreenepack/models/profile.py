# coding: utf-8

"""
    Dockstore API

    This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.  # noqa: E501

    OpenAPI spec version: 1.12.0-alpha.1-SNAPSHOT
    Contact: theglobalalliance@genomicsandhealth.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'avatar_url': 'str',
        'bio': 'str',
        'company': 'str',
        'email': 'str',
        'location': 'str',
        'name': 'str',
        'username': 'str'
    }

    attribute_map = {
        'avatar_url': 'avatarURL',
        'bio': 'bio',
        'company': 'company',
        'email': 'email',
        'location': 'location',
        'name': 'name',
        'username': 'username'
    }

    def __init__(self, avatar_url=None, bio=None, company=None, email=None, location=None, name=None, username=None, _configuration=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._avatar_url = None
        self._bio = None
        self._company = None
        self._email = None
        self._location = None
        self._name = None
        self._username = None
        self.discriminator = None

        if avatar_url is not None:
            self.avatar_url = avatar_url
        if bio is not None:
            self.bio = bio
        if company is not None:
            self.company = company
        if email is not None:
            self.email = email
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if username is not None:
            self.username = username

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Profile.  # noqa: E501


        :return: The avatar_url of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Profile.


        :param avatar_url: The avatar_url of this Profile.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def bio(self):
        """Gets the bio of this Profile.  # noqa: E501


        :return: The bio of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this Profile.


        :param bio: The bio of this Profile.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def company(self):
        """Gets the company of this Profile.  # noqa: E501


        :return: The company of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Profile.


        :param company: The company of this Profile.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def email(self):
        """Gets the email of this Profile.  # noqa: E501


        :return: The email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def location(self):
        """Gets the location of this Profile.  # noqa: E501


        :return: The location of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Profile.


        :param location: The location of this Profile.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Profile.  # noqa: E501


        :return: The name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.


        :param name: The name of this Profile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """Gets the username of this Profile.  # noqa: E501


        :return: The username of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Profile.


        :param username: The username of this Profile.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Profile):
            return True

        return self.to_dict() != other.to_dict()
