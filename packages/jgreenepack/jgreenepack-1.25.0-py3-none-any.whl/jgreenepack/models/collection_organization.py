# coding: utf-8

"""
    Dockstore API

    This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.  # noqa: E501

    OpenAPI spec version: 1.12.0-alpha.1-SNAPSHOT
    Contact: theglobalalliance@genomicsandhealth.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class CollectionOrganization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection_display_name': 'str',
        'collection_id': 'int',
        'collection_name': 'str',
        'organization_display_name': 'str',
        'organization_id': 'int',
        'organization_name': 'str'
    }

    attribute_map = {
        'collection_display_name': 'collectionDisplayName',
        'collection_id': 'collectionId',
        'collection_name': 'collectionName',
        'organization_display_name': 'organizationDisplayName',
        'organization_id': 'organizationId',
        'organization_name': 'organizationName'
    }

    def __init__(self, collection_display_name=None, collection_id=None, collection_name=None, organization_display_name=None, organization_id=None, organization_name=None, _configuration=None):  # noqa: E501
        """CollectionOrganization - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collection_display_name = None
        self._collection_id = None
        self._collection_name = None
        self._organization_display_name = None
        self._organization_id = None
        self._organization_name = None
        self.discriminator = None

        if collection_display_name is not None:
            self.collection_display_name = collection_display_name
        if collection_id is not None:
            self.collection_id = collection_id
        if collection_name is not None:
            self.collection_name = collection_name
        if organization_display_name is not None:
            self.organization_display_name = organization_display_name
        if organization_id is not None:
            self.organization_id = organization_id
        if organization_name is not None:
            self.organization_name = organization_name

    @property
    def collection_display_name(self):
        """Gets the collection_display_name of this CollectionOrganization.  # noqa: E501


        :return: The collection_display_name of this CollectionOrganization.  # noqa: E501
        :rtype: str
        """
        return self._collection_display_name

    @collection_display_name.setter
    def collection_display_name(self, collection_display_name):
        """Sets the collection_display_name of this CollectionOrganization.


        :param collection_display_name: The collection_display_name of this CollectionOrganization.  # noqa: E501
        :type: str
        """

        self._collection_display_name = collection_display_name

    @property
    def collection_id(self):
        """Gets the collection_id of this CollectionOrganization.  # noqa: E501


        :return: The collection_id of this CollectionOrganization.  # noqa: E501
        :rtype: int
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this CollectionOrganization.


        :param collection_id: The collection_id of this CollectionOrganization.  # noqa: E501
        :type: int
        """

        self._collection_id = collection_id

    @property
    def collection_name(self):
        """Gets the collection_name of this CollectionOrganization.  # noqa: E501


        :return: The collection_name of this CollectionOrganization.  # noqa: E501
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this CollectionOrganization.


        :param collection_name: The collection_name of this CollectionOrganization.  # noqa: E501
        :type: str
        """

        self._collection_name = collection_name

    @property
    def organization_display_name(self):
        """Gets the organization_display_name of this CollectionOrganization.  # noqa: E501


        :return: The organization_display_name of this CollectionOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_display_name

    @organization_display_name.setter
    def organization_display_name(self, organization_display_name):
        """Sets the organization_display_name of this CollectionOrganization.


        :param organization_display_name: The organization_display_name of this CollectionOrganization.  # noqa: E501
        :type: str
        """

        self._organization_display_name = organization_display_name

    @property
    def organization_id(self):
        """Gets the organization_id of this CollectionOrganization.  # noqa: E501


        :return: The organization_id of this CollectionOrganization.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CollectionOrganization.


        :param organization_id: The organization_id of this CollectionOrganization.  # noqa: E501
        :type: int
        """

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this CollectionOrganization.  # noqa: E501


        :return: The organization_name of this CollectionOrganization.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this CollectionOrganization.


        :param organization_name: The organization_name of this CollectionOrganization.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionOrganization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionOrganization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectionOrganization):
            return True

        return self.to_dict() != other.to_dict()
