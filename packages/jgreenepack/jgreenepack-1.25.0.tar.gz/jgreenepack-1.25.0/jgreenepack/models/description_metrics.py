# coding: utf-8

"""
    Dockstore API

    This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.  # noqa: E501

    OpenAPI spec version: 1.12.0-alpha.1-SNAPSHOT
    Contact: theglobalalliance@genomicsandhealth.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class DescriptionMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calculated_entropy': 'int',
        'calculated_word_count': 'int',
        'description_length': 'int'
    }

    attribute_map = {
        'calculated_entropy': 'calculatedEntropy',
        'calculated_word_count': 'calculatedWordCount',
        'description_length': 'descriptionLength'
    }

    def __init__(self, calculated_entropy=None, calculated_word_count=None, description_length=None, _configuration=None):  # noqa: E501
        """DescriptionMetrics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._calculated_entropy = None
        self._calculated_word_count = None
        self._description_length = None
        self.discriminator = None

        if calculated_entropy is not None:
            self.calculated_entropy = calculated_entropy
        if calculated_word_count is not None:
            self.calculated_word_count = calculated_word_count
        if description_length is not None:
            self.description_length = description_length

    @property
    def calculated_entropy(self):
        """Gets the calculated_entropy of this DescriptionMetrics.  # noqa: E501


        :return: The calculated_entropy of this DescriptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._calculated_entropy

    @calculated_entropy.setter
    def calculated_entropy(self, calculated_entropy):
        """Sets the calculated_entropy of this DescriptionMetrics.


        :param calculated_entropy: The calculated_entropy of this DescriptionMetrics.  # noqa: E501
        :type: int
        """

        self._calculated_entropy = calculated_entropy

    @property
    def calculated_word_count(self):
        """Gets the calculated_word_count of this DescriptionMetrics.  # noqa: E501


        :return: The calculated_word_count of this DescriptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._calculated_word_count

    @calculated_word_count.setter
    def calculated_word_count(self, calculated_word_count):
        """Sets the calculated_word_count of this DescriptionMetrics.


        :param calculated_word_count: The calculated_word_count of this DescriptionMetrics.  # noqa: E501
        :type: int
        """

        self._calculated_word_count = calculated_word_count

    @property
    def description_length(self):
        """Gets the description_length of this DescriptionMetrics.  # noqa: E501


        :return: The description_length of this DescriptionMetrics.  # noqa: E501
        :rtype: int
        """
        return self._description_length

    @description_length.setter
    def description_length(self, description_length):
        """Sets the description_length of this DescriptionMetrics.


        :param description_length: The description_length of this DescriptionMetrics.  # noqa: E501
        :type: int
        """

        self._description_length = description_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DescriptionMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DescriptionMetrics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DescriptionMetrics):
            return True

        return self.to_dict() != other.to_dict()
