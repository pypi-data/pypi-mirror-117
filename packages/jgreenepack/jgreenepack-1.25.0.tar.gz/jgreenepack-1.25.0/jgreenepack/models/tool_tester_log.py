# coding: utf-8

"""
    Dockstore API

    This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.  # noqa: E501

    OpenAPI spec version: 1.12.0-alpha.1-SNAPSHOT
    Contact: theglobalalliance@genomicsandhealth.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class ToolTesterLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename': 'str',
        'log_type': 'str',
        'runner': 'str',
        'test_filename': 'str',
        'tool_id': 'str',
        'tool_version_name': 'str'
    }

    attribute_map = {
        'filename': 'filename',
        'log_type': 'logType',
        'runner': 'runner',
        'test_filename': 'testFilename',
        'tool_id': 'toolId',
        'tool_version_name': 'toolVersionName'
    }

    def __init__(self, filename=None, log_type=None, runner=None, test_filename=None, tool_id=None, tool_version_name=None, _configuration=None):  # noqa: E501
        """ToolTesterLog - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filename = None
        self._log_type = None
        self._runner = None
        self._test_filename = None
        self._tool_id = None
        self._tool_version_name = None
        self.discriminator = None

        if filename is not None:
            self.filename = filename
        if log_type is not None:
            self.log_type = log_type
        if runner is not None:
            self.runner = runner
        if test_filename is not None:
            self.test_filename = test_filename
        if tool_id is not None:
            self.tool_id = tool_id
        if tool_version_name is not None:
            self.tool_version_name = tool_version_name

    @property
    def filename(self):
        """Gets the filename of this ToolTesterLog.  # noqa: E501


        :return: The filename of this ToolTesterLog.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ToolTesterLog.


        :param filename: The filename of this ToolTesterLog.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def log_type(self):
        """Gets the log_type of this ToolTesterLog.  # noqa: E501


        :return: The log_type of this ToolTesterLog.  # noqa: E501
        :rtype: str
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this ToolTesterLog.


        :param log_type: The log_type of this ToolTesterLog.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL", "SUMMARY"]  # noqa: E501
        if (self._configuration.client_side_validation and
                log_type not in allowed_values):
            raise ValueError(
                "Invalid value for `log_type` ({0}), must be one of {1}"  # noqa: E501
                .format(log_type, allowed_values)
            )

        self._log_type = log_type

    @property
    def runner(self):
        """Gets the runner of this ToolTesterLog.  # noqa: E501


        :return: The runner of this ToolTesterLog.  # noqa: E501
        :rtype: str
        """
        return self._runner

    @runner.setter
    def runner(self, runner):
        """Sets the runner of this ToolTesterLog.


        :param runner: The runner of this ToolTesterLog.  # noqa: E501
        :type: str
        """

        self._runner = runner

    @property
    def test_filename(self):
        """Gets the test_filename of this ToolTesterLog.  # noqa: E501


        :return: The test_filename of this ToolTesterLog.  # noqa: E501
        :rtype: str
        """
        return self._test_filename

    @test_filename.setter
    def test_filename(self, test_filename):
        """Sets the test_filename of this ToolTesterLog.


        :param test_filename: The test_filename of this ToolTesterLog.  # noqa: E501
        :type: str
        """

        self._test_filename = test_filename

    @property
    def tool_id(self):
        """Gets the tool_id of this ToolTesterLog.  # noqa: E501


        :return: The tool_id of this ToolTesterLog.  # noqa: E501
        :rtype: str
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this ToolTesterLog.


        :param tool_id: The tool_id of this ToolTesterLog.  # noqa: E501
        :type: str
        """

        self._tool_id = tool_id

    @property
    def tool_version_name(self):
        """Gets the tool_version_name of this ToolTesterLog.  # noqa: E501


        :return: The tool_version_name of this ToolTesterLog.  # noqa: E501
        :rtype: str
        """
        return self._tool_version_name

    @tool_version_name.setter
    def tool_version_name(self, tool_version_name):
        """Sets the tool_version_name of this ToolTesterLog.


        :param tool_version_name: The tool_version_name of this ToolTesterLog.  # noqa: E501
        :type: str
        """

        self._tool_version_name = tool_version_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToolTesterLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolTesterLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ToolTesterLog):
            return True

        return self.to_dict() != other.to_dict()
