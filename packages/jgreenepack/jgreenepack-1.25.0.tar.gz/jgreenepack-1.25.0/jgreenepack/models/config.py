# coding: utf-8

"""
    Dockstore API

    This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.  # noqa: E501

    OpenAPI spec version: 1.12.0-alpha.1-SNAPSHOT
    Contact: theglobalalliance@genomicsandhealth.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jgreenepack.configuration import Configuration


class Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bd_catalyst_seven_bridges_import_url': 'str',
        'bd_catalyst_terra_import_url': 'str',
        'bit_bucket_auth_url': 'str',
        'bit_bucket_client_id': 'str',
        'compose_setup_version': 'str',
        'cwl_visualizer_uri': 'str',
        'deploy_version': 'str',
        'discourse_url': 'str',
        'dna_nexus_import_url': 'str',
        'dna_stack_import_url': 'str',
        'documentation_url': 'str',
        'featured_content_url': 'str',
        'featured_news_url': 'str',
        'git_build_version': 'str',
        'git_commit_id': 'str',
        'git_hub_app_installation_url': 'str',
        'git_hub_auth_url': 'str',
        'git_hub_redirect_path': 'str',
        'git_hub_scope': 'str',
        'github_client_id': 'str',
        'gitlab_auth_url': 'str',
        'gitlab_client_id': 'str',
        'gitlab_redirect_path': 'str',
        'gitlab_scope': 'str',
        'google_client_id': 'str',
        'google_scope': 'str',
        'orcid_auth_url': 'str',
        'orcid_client_id': 'str',
        'orcid_redirect_path': 'str',
        'orcid_scope': 'str',
        'quay_io_auth_url': 'str',
        'quay_io_client_id': 'str',
        'quay_io_redirect_path': 'str',
        'quay_io_scope': 'str',
        'tag_manager_id': 'str',
        'terra_import_url': 'str',
        'zenodo_auth_url': 'str',
        'zenodo_client_id': 'str',
        'zenodo_redirect_path': 'str',
        'zenodo_scope': 'str'
    }

    attribute_map = {
        'bd_catalyst_seven_bridges_import_url': 'bdCatalystSevenBridgesImportUrl',
        'bd_catalyst_terra_import_url': 'bdCatalystTerraImportUrl',
        'bit_bucket_auth_url': 'bitBucketAuthUrl',
        'bit_bucket_client_id': 'bitBucketClientId',
        'compose_setup_version': 'composeSetupVersion',
        'cwl_visualizer_uri': 'cwlVisualizerUri',
        'deploy_version': 'deployVersion',
        'discourse_url': 'discourseUrl',
        'dna_nexus_import_url': 'dnaNexusImportUrl',
        'dna_stack_import_url': 'dnaStackImportUrl',
        'documentation_url': 'documentationUrl',
        'featured_content_url': 'featuredContentUrl',
        'featured_news_url': 'featuredNewsUrl',
        'git_build_version': 'gitBuildVersion',
        'git_commit_id': 'gitCommitId',
        'git_hub_app_installation_url': 'gitHubAppInstallationUrl',
        'git_hub_auth_url': 'gitHubAuthUrl',
        'git_hub_redirect_path': 'gitHubRedirectPath',
        'git_hub_scope': 'gitHubScope',
        'github_client_id': 'githubClientId',
        'gitlab_auth_url': 'gitlabAuthUrl',
        'gitlab_client_id': 'gitlabClientId',
        'gitlab_redirect_path': 'gitlabRedirectPath',
        'gitlab_scope': 'gitlabScope',
        'google_client_id': 'googleClientId',
        'google_scope': 'googleScope',
        'orcid_auth_url': 'orcidAuthUrl',
        'orcid_client_id': 'orcidClientId',
        'orcid_redirect_path': 'orcidRedirectPath',
        'orcid_scope': 'orcidScope',
        'quay_io_auth_url': 'quayIoAuthUrl',
        'quay_io_client_id': 'quayIoClientId',
        'quay_io_redirect_path': 'quayIoRedirectPath',
        'quay_io_scope': 'quayIoScope',
        'tag_manager_id': 'tagManagerId',
        'terra_import_url': 'terraImportUrl',
        'zenodo_auth_url': 'zenodoAuthUrl',
        'zenodo_client_id': 'zenodoClientId',
        'zenodo_redirect_path': 'zenodoRedirectPath',
        'zenodo_scope': 'zenodoScope'
    }

    def __init__(self, bd_catalyst_seven_bridges_import_url=None, bd_catalyst_terra_import_url=None, bit_bucket_auth_url=None, bit_bucket_client_id=None, compose_setup_version=None, cwl_visualizer_uri=None, deploy_version=None, discourse_url=None, dna_nexus_import_url=None, dna_stack_import_url=None, documentation_url=None, featured_content_url=None, featured_news_url=None, git_build_version=None, git_commit_id=None, git_hub_app_installation_url=None, git_hub_auth_url=None, git_hub_redirect_path=None, git_hub_scope=None, github_client_id=None, gitlab_auth_url=None, gitlab_client_id=None, gitlab_redirect_path=None, gitlab_scope=None, google_client_id=None, google_scope=None, orcid_auth_url=None, orcid_client_id=None, orcid_redirect_path=None, orcid_scope=None, quay_io_auth_url=None, quay_io_client_id=None, quay_io_redirect_path=None, quay_io_scope=None, tag_manager_id=None, terra_import_url=None, zenodo_auth_url=None, zenodo_client_id=None, zenodo_redirect_path=None, zenodo_scope=None, _configuration=None):  # noqa: E501
        """Config - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._bd_catalyst_seven_bridges_import_url = None
        self._bd_catalyst_terra_import_url = None
        self._bit_bucket_auth_url = None
        self._bit_bucket_client_id = None
        self._compose_setup_version = None
        self._cwl_visualizer_uri = None
        self._deploy_version = None
        self._discourse_url = None
        self._dna_nexus_import_url = None
        self._dna_stack_import_url = None
        self._documentation_url = None
        self._featured_content_url = None
        self._featured_news_url = None
        self._git_build_version = None
        self._git_commit_id = None
        self._git_hub_app_installation_url = None
        self._git_hub_auth_url = None
        self._git_hub_redirect_path = None
        self._git_hub_scope = None
        self._github_client_id = None
        self._gitlab_auth_url = None
        self._gitlab_client_id = None
        self._gitlab_redirect_path = None
        self._gitlab_scope = None
        self._google_client_id = None
        self._google_scope = None
        self._orcid_auth_url = None
        self._orcid_client_id = None
        self._orcid_redirect_path = None
        self._orcid_scope = None
        self._quay_io_auth_url = None
        self._quay_io_client_id = None
        self._quay_io_redirect_path = None
        self._quay_io_scope = None
        self._tag_manager_id = None
        self._terra_import_url = None
        self._zenodo_auth_url = None
        self._zenodo_client_id = None
        self._zenodo_redirect_path = None
        self._zenodo_scope = None
        self.discriminator = None

        if bd_catalyst_seven_bridges_import_url is not None:
            self.bd_catalyst_seven_bridges_import_url = bd_catalyst_seven_bridges_import_url
        if bd_catalyst_terra_import_url is not None:
            self.bd_catalyst_terra_import_url = bd_catalyst_terra_import_url
        if bit_bucket_auth_url is not None:
            self.bit_bucket_auth_url = bit_bucket_auth_url
        if bit_bucket_client_id is not None:
            self.bit_bucket_client_id = bit_bucket_client_id
        if compose_setup_version is not None:
            self.compose_setup_version = compose_setup_version
        if cwl_visualizer_uri is not None:
            self.cwl_visualizer_uri = cwl_visualizer_uri
        if deploy_version is not None:
            self.deploy_version = deploy_version
        if discourse_url is not None:
            self.discourse_url = discourse_url
        if dna_nexus_import_url is not None:
            self.dna_nexus_import_url = dna_nexus_import_url
        if dna_stack_import_url is not None:
            self.dna_stack_import_url = dna_stack_import_url
        if documentation_url is not None:
            self.documentation_url = documentation_url
        if featured_content_url is not None:
            self.featured_content_url = featured_content_url
        if featured_news_url is not None:
            self.featured_news_url = featured_news_url
        if git_build_version is not None:
            self.git_build_version = git_build_version
        if git_commit_id is not None:
            self.git_commit_id = git_commit_id
        if git_hub_app_installation_url is not None:
            self.git_hub_app_installation_url = git_hub_app_installation_url
        if git_hub_auth_url is not None:
            self.git_hub_auth_url = git_hub_auth_url
        if git_hub_redirect_path is not None:
            self.git_hub_redirect_path = git_hub_redirect_path
        if git_hub_scope is not None:
            self.git_hub_scope = git_hub_scope
        if github_client_id is not None:
            self.github_client_id = github_client_id
        if gitlab_auth_url is not None:
            self.gitlab_auth_url = gitlab_auth_url
        if gitlab_client_id is not None:
            self.gitlab_client_id = gitlab_client_id
        if gitlab_redirect_path is not None:
            self.gitlab_redirect_path = gitlab_redirect_path
        if gitlab_scope is not None:
            self.gitlab_scope = gitlab_scope
        if google_client_id is not None:
            self.google_client_id = google_client_id
        if google_scope is not None:
            self.google_scope = google_scope
        if orcid_auth_url is not None:
            self.orcid_auth_url = orcid_auth_url
        if orcid_client_id is not None:
            self.orcid_client_id = orcid_client_id
        if orcid_redirect_path is not None:
            self.orcid_redirect_path = orcid_redirect_path
        if orcid_scope is not None:
            self.orcid_scope = orcid_scope
        if quay_io_auth_url is not None:
            self.quay_io_auth_url = quay_io_auth_url
        if quay_io_client_id is not None:
            self.quay_io_client_id = quay_io_client_id
        if quay_io_redirect_path is not None:
            self.quay_io_redirect_path = quay_io_redirect_path
        if quay_io_scope is not None:
            self.quay_io_scope = quay_io_scope
        if tag_manager_id is not None:
            self.tag_manager_id = tag_manager_id
        if terra_import_url is not None:
            self.terra_import_url = terra_import_url
        if zenodo_auth_url is not None:
            self.zenodo_auth_url = zenodo_auth_url
        if zenodo_client_id is not None:
            self.zenodo_client_id = zenodo_client_id
        if zenodo_redirect_path is not None:
            self.zenodo_redirect_path = zenodo_redirect_path
        if zenodo_scope is not None:
            self.zenodo_scope = zenodo_scope

    @property
    def bd_catalyst_seven_bridges_import_url(self):
        """Gets the bd_catalyst_seven_bridges_import_url of this Config.  # noqa: E501


        :return: The bd_catalyst_seven_bridges_import_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._bd_catalyst_seven_bridges_import_url

    @bd_catalyst_seven_bridges_import_url.setter
    def bd_catalyst_seven_bridges_import_url(self, bd_catalyst_seven_bridges_import_url):
        """Sets the bd_catalyst_seven_bridges_import_url of this Config.


        :param bd_catalyst_seven_bridges_import_url: The bd_catalyst_seven_bridges_import_url of this Config.  # noqa: E501
        :type: str
        """

        self._bd_catalyst_seven_bridges_import_url = bd_catalyst_seven_bridges_import_url

    @property
    def bd_catalyst_terra_import_url(self):
        """Gets the bd_catalyst_terra_import_url of this Config.  # noqa: E501


        :return: The bd_catalyst_terra_import_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._bd_catalyst_terra_import_url

    @bd_catalyst_terra_import_url.setter
    def bd_catalyst_terra_import_url(self, bd_catalyst_terra_import_url):
        """Sets the bd_catalyst_terra_import_url of this Config.


        :param bd_catalyst_terra_import_url: The bd_catalyst_terra_import_url of this Config.  # noqa: E501
        :type: str
        """

        self._bd_catalyst_terra_import_url = bd_catalyst_terra_import_url

    @property
    def bit_bucket_auth_url(self):
        """Gets the bit_bucket_auth_url of this Config.  # noqa: E501


        :return: The bit_bucket_auth_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._bit_bucket_auth_url

    @bit_bucket_auth_url.setter
    def bit_bucket_auth_url(self, bit_bucket_auth_url):
        """Sets the bit_bucket_auth_url of this Config.


        :param bit_bucket_auth_url: The bit_bucket_auth_url of this Config.  # noqa: E501
        :type: str
        """

        self._bit_bucket_auth_url = bit_bucket_auth_url

    @property
    def bit_bucket_client_id(self):
        """Gets the bit_bucket_client_id of this Config.  # noqa: E501


        :return: The bit_bucket_client_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._bit_bucket_client_id

    @bit_bucket_client_id.setter
    def bit_bucket_client_id(self, bit_bucket_client_id):
        """Sets the bit_bucket_client_id of this Config.


        :param bit_bucket_client_id: The bit_bucket_client_id of this Config.  # noqa: E501
        :type: str
        """

        self._bit_bucket_client_id = bit_bucket_client_id

    @property
    def compose_setup_version(self):
        """Gets the compose_setup_version of this Config.  # noqa: E501


        :return: The compose_setup_version of this Config.  # noqa: E501
        :rtype: str
        """
        return self._compose_setup_version

    @compose_setup_version.setter
    def compose_setup_version(self, compose_setup_version):
        """Sets the compose_setup_version of this Config.


        :param compose_setup_version: The compose_setup_version of this Config.  # noqa: E501
        :type: str
        """

        self._compose_setup_version = compose_setup_version

    @property
    def cwl_visualizer_uri(self):
        """Gets the cwl_visualizer_uri of this Config.  # noqa: E501


        :return: The cwl_visualizer_uri of this Config.  # noqa: E501
        :rtype: str
        """
        return self._cwl_visualizer_uri

    @cwl_visualizer_uri.setter
    def cwl_visualizer_uri(self, cwl_visualizer_uri):
        """Sets the cwl_visualizer_uri of this Config.


        :param cwl_visualizer_uri: The cwl_visualizer_uri of this Config.  # noqa: E501
        :type: str
        """

        self._cwl_visualizer_uri = cwl_visualizer_uri

    @property
    def deploy_version(self):
        """Gets the deploy_version of this Config.  # noqa: E501


        :return: The deploy_version of this Config.  # noqa: E501
        :rtype: str
        """
        return self._deploy_version

    @deploy_version.setter
    def deploy_version(self, deploy_version):
        """Sets the deploy_version of this Config.


        :param deploy_version: The deploy_version of this Config.  # noqa: E501
        :type: str
        """

        self._deploy_version = deploy_version

    @property
    def discourse_url(self):
        """Gets the discourse_url of this Config.  # noqa: E501


        :return: The discourse_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._discourse_url

    @discourse_url.setter
    def discourse_url(self, discourse_url):
        """Sets the discourse_url of this Config.


        :param discourse_url: The discourse_url of this Config.  # noqa: E501
        :type: str
        """

        self._discourse_url = discourse_url

    @property
    def dna_nexus_import_url(self):
        """Gets the dna_nexus_import_url of this Config.  # noqa: E501


        :return: The dna_nexus_import_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._dna_nexus_import_url

    @dna_nexus_import_url.setter
    def dna_nexus_import_url(self, dna_nexus_import_url):
        """Sets the dna_nexus_import_url of this Config.


        :param dna_nexus_import_url: The dna_nexus_import_url of this Config.  # noqa: E501
        :type: str
        """

        self._dna_nexus_import_url = dna_nexus_import_url

    @property
    def dna_stack_import_url(self):
        """Gets the dna_stack_import_url of this Config.  # noqa: E501


        :return: The dna_stack_import_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._dna_stack_import_url

    @dna_stack_import_url.setter
    def dna_stack_import_url(self, dna_stack_import_url):
        """Sets the dna_stack_import_url of this Config.


        :param dna_stack_import_url: The dna_stack_import_url of this Config.  # noqa: E501
        :type: str
        """

        self._dna_stack_import_url = dna_stack_import_url

    @property
    def documentation_url(self):
        """Gets the documentation_url of this Config.  # noqa: E501


        :return: The documentation_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._documentation_url

    @documentation_url.setter
    def documentation_url(self, documentation_url):
        """Sets the documentation_url of this Config.


        :param documentation_url: The documentation_url of this Config.  # noqa: E501
        :type: str
        """

        self._documentation_url = documentation_url

    @property
    def featured_content_url(self):
        """Gets the featured_content_url of this Config.  # noqa: E501


        :return: The featured_content_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._featured_content_url

    @featured_content_url.setter
    def featured_content_url(self, featured_content_url):
        """Sets the featured_content_url of this Config.


        :param featured_content_url: The featured_content_url of this Config.  # noqa: E501
        :type: str
        """

        self._featured_content_url = featured_content_url

    @property
    def featured_news_url(self):
        """Gets the featured_news_url of this Config.  # noqa: E501


        :return: The featured_news_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._featured_news_url

    @featured_news_url.setter
    def featured_news_url(self, featured_news_url):
        """Sets the featured_news_url of this Config.


        :param featured_news_url: The featured_news_url of this Config.  # noqa: E501
        :type: str
        """

        self._featured_news_url = featured_news_url

    @property
    def git_build_version(self):
        """Gets the git_build_version of this Config.  # noqa: E501


        :return: The git_build_version of this Config.  # noqa: E501
        :rtype: str
        """
        return self._git_build_version

    @git_build_version.setter
    def git_build_version(self, git_build_version):
        """Sets the git_build_version of this Config.


        :param git_build_version: The git_build_version of this Config.  # noqa: E501
        :type: str
        """

        self._git_build_version = git_build_version

    @property
    def git_commit_id(self):
        """Gets the git_commit_id of this Config.  # noqa: E501


        :return: The git_commit_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._git_commit_id

    @git_commit_id.setter
    def git_commit_id(self, git_commit_id):
        """Sets the git_commit_id of this Config.


        :param git_commit_id: The git_commit_id of this Config.  # noqa: E501
        :type: str
        """

        self._git_commit_id = git_commit_id

    @property
    def git_hub_app_installation_url(self):
        """Gets the git_hub_app_installation_url of this Config.  # noqa: E501


        :return: The git_hub_app_installation_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._git_hub_app_installation_url

    @git_hub_app_installation_url.setter
    def git_hub_app_installation_url(self, git_hub_app_installation_url):
        """Sets the git_hub_app_installation_url of this Config.


        :param git_hub_app_installation_url: The git_hub_app_installation_url of this Config.  # noqa: E501
        :type: str
        """

        self._git_hub_app_installation_url = git_hub_app_installation_url

    @property
    def git_hub_auth_url(self):
        """Gets the git_hub_auth_url of this Config.  # noqa: E501


        :return: The git_hub_auth_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._git_hub_auth_url

    @git_hub_auth_url.setter
    def git_hub_auth_url(self, git_hub_auth_url):
        """Sets the git_hub_auth_url of this Config.


        :param git_hub_auth_url: The git_hub_auth_url of this Config.  # noqa: E501
        :type: str
        """

        self._git_hub_auth_url = git_hub_auth_url

    @property
    def git_hub_redirect_path(self):
        """Gets the git_hub_redirect_path of this Config.  # noqa: E501


        :return: The git_hub_redirect_path of this Config.  # noqa: E501
        :rtype: str
        """
        return self._git_hub_redirect_path

    @git_hub_redirect_path.setter
    def git_hub_redirect_path(self, git_hub_redirect_path):
        """Sets the git_hub_redirect_path of this Config.


        :param git_hub_redirect_path: The git_hub_redirect_path of this Config.  # noqa: E501
        :type: str
        """

        self._git_hub_redirect_path = git_hub_redirect_path

    @property
    def git_hub_scope(self):
        """Gets the git_hub_scope of this Config.  # noqa: E501


        :return: The git_hub_scope of this Config.  # noqa: E501
        :rtype: str
        """
        return self._git_hub_scope

    @git_hub_scope.setter
    def git_hub_scope(self, git_hub_scope):
        """Sets the git_hub_scope of this Config.


        :param git_hub_scope: The git_hub_scope of this Config.  # noqa: E501
        :type: str
        """

        self._git_hub_scope = git_hub_scope

    @property
    def github_client_id(self):
        """Gets the github_client_id of this Config.  # noqa: E501


        :return: The github_client_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._github_client_id

    @github_client_id.setter
    def github_client_id(self, github_client_id):
        """Sets the github_client_id of this Config.


        :param github_client_id: The github_client_id of this Config.  # noqa: E501
        :type: str
        """

        self._github_client_id = github_client_id

    @property
    def gitlab_auth_url(self):
        """Gets the gitlab_auth_url of this Config.  # noqa: E501


        :return: The gitlab_auth_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_auth_url

    @gitlab_auth_url.setter
    def gitlab_auth_url(self, gitlab_auth_url):
        """Sets the gitlab_auth_url of this Config.


        :param gitlab_auth_url: The gitlab_auth_url of this Config.  # noqa: E501
        :type: str
        """

        self._gitlab_auth_url = gitlab_auth_url

    @property
    def gitlab_client_id(self):
        """Gets the gitlab_client_id of this Config.  # noqa: E501


        :return: The gitlab_client_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_client_id

    @gitlab_client_id.setter
    def gitlab_client_id(self, gitlab_client_id):
        """Sets the gitlab_client_id of this Config.


        :param gitlab_client_id: The gitlab_client_id of this Config.  # noqa: E501
        :type: str
        """

        self._gitlab_client_id = gitlab_client_id

    @property
    def gitlab_redirect_path(self):
        """Gets the gitlab_redirect_path of this Config.  # noqa: E501


        :return: The gitlab_redirect_path of this Config.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_redirect_path

    @gitlab_redirect_path.setter
    def gitlab_redirect_path(self, gitlab_redirect_path):
        """Sets the gitlab_redirect_path of this Config.


        :param gitlab_redirect_path: The gitlab_redirect_path of this Config.  # noqa: E501
        :type: str
        """

        self._gitlab_redirect_path = gitlab_redirect_path

    @property
    def gitlab_scope(self):
        """Gets the gitlab_scope of this Config.  # noqa: E501


        :return: The gitlab_scope of this Config.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_scope

    @gitlab_scope.setter
    def gitlab_scope(self, gitlab_scope):
        """Sets the gitlab_scope of this Config.


        :param gitlab_scope: The gitlab_scope of this Config.  # noqa: E501
        :type: str
        """

        self._gitlab_scope = gitlab_scope

    @property
    def google_client_id(self):
        """Gets the google_client_id of this Config.  # noqa: E501


        :return: The google_client_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._google_client_id

    @google_client_id.setter
    def google_client_id(self, google_client_id):
        """Sets the google_client_id of this Config.


        :param google_client_id: The google_client_id of this Config.  # noqa: E501
        :type: str
        """

        self._google_client_id = google_client_id

    @property
    def google_scope(self):
        """Gets the google_scope of this Config.  # noqa: E501


        :return: The google_scope of this Config.  # noqa: E501
        :rtype: str
        """
        return self._google_scope

    @google_scope.setter
    def google_scope(self, google_scope):
        """Sets the google_scope of this Config.


        :param google_scope: The google_scope of this Config.  # noqa: E501
        :type: str
        """

        self._google_scope = google_scope

    @property
    def orcid_auth_url(self):
        """Gets the orcid_auth_url of this Config.  # noqa: E501


        :return: The orcid_auth_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._orcid_auth_url

    @orcid_auth_url.setter
    def orcid_auth_url(self, orcid_auth_url):
        """Sets the orcid_auth_url of this Config.


        :param orcid_auth_url: The orcid_auth_url of this Config.  # noqa: E501
        :type: str
        """

        self._orcid_auth_url = orcid_auth_url

    @property
    def orcid_client_id(self):
        """Gets the orcid_client_id of this Config.  # noqa: E501


        :return: The orcid_client_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._orcid_client_id

    @orcid_client_id.setter
    def orcid_client_id(self, orcid_client_id):
        """Sets the orcid_client_id of this Config.


        :param orcid_client_id: The orcid_client_id of this Config.  # noqa: E501
        :type: str
        """

        self._orcid_client_id = orcid_client_id

    @property
    def orcid_redirect_path(self):
        """Gets the orcid_redirect_path of this Config.  # noqa: E501


        :return: The orcid_redirect_path of this Config.  # noqa: E501
        :rtype: str
        """
        return self._orcid_redirect_path

    @orcid_redirect_path.setter
    def orcid_redirect_path(self, orcid_redirect_path):
        """Sets the orcid_redirect_path of this Config.


        :param orcid_redirect_path: The orcid_redirect_path of this Config.  # noqa: E501
        :type: str
        """

        self._orcid_redirect_path = orcid_redirect_path

    @property
    def orcid_scope(self):
        """Gets the orcid_scope of this Config.  # noqa: E501


        :return: The orcid_scope of this Config.  # noqa: E501
        :rtype: str
        """
        return self._orcid_scope

    @orcid_scope.setter
    def orcid_scope(self, orcid_scope):
        """Sets the orcid_scope of this Config.


        :param orcid_scope: The orcid_scope of this Config.  # noqa: E501
        :type: str
        """

        self._orcid_scope = orcid_scope

    @property
    def quay_io_auth_url(self):
        """Gets the quay_io_auth_url of this Config.  # noqa: E501


        :return: The quay_io_auth_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._quay_io_auth_url

    @quay_io_auth_url.setter
    def quay_io_auth_url(self, quay_io_auth_url):
        """Sets the quay_io_auth_url of this Config.


        :param quay_io_auth_url: The quay_io_auth_url of this Config.  # noqa: E501
        :type: str
        """

        self._quay_io_auth_url = quay_io_auth_url

    @property
    def quay_io_client_id(self):
        """Gets the quay_io_client_id of this Config.  # noqa: E501


        :return: The quay_io_client_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._quay_io_client_id

    @quay_io_client_id.setter
    def quay_io_client_id(self, quay_io_client_id):
        """Sets the quay_io_client_id of this Config.


        :param quay_io_client_id: The quay_io_client_id of this Config.  # noqa: E501
        :type: str
        """

        self._quay_io_client_id = quay_io_client_id

    @property
    def quay_io_redirect_path(self):
        """Gets the quay_io_redirect_path of this Config.  # noqa: E501


        :return: The quay_io_redirect_path of this Config.  # noqa: E501
        :rtype: str
        """
        return self._quay_io_redirect_path

    @quay_io_redirect_path.setter
    def quay_io_redirect_path(self, quay_io_redirect_path):
        """Sets the quay_io_redirect_path of this Config.


        :param quay_io_redirect_path: The quay_io_redirect_path of this Config.  # noqa: E501
        :type: str
        """

        self._quay_io_redirect_path = quay_io_redirect_path

    @property
    def quay_io_scope(self):
        """Gets the quay_io_scope of this Config.  # noqa: E501


        :return: The quay_io_scope of this Config.  # noqa: E501
        :rtype: str
        """
        return self._quay_io_scope

    @quay_io_scope.setter
    def quay_io_scope(self, quay_io_scope):
        """Sets the quay_io_scope of this Config.


        :param quay_io_scope: The quay_io_scope of this Config.  # noqa: E501
        :type: str
        """

        self._quay_io_scope = quay_io_scope

    @property
    def tag_manager_id(self):
        """Gets the tag_manager_id of this Config.  # noqa: E501


        :return: The tag_manager_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._tag_manager_id

    @tag_manager_id.setter
    def tag_manager_id(self, tag_manager_id):
        """Sets the tag_manager_id of this Config.


        :param tag_manager_id: The tag_manager_id of this Config.  # noqa: E501
        :type: str
        """

        self._tag_manager_id = tag_manager_id

    @property
    def terra_import_url(self):
        """Gets the terra_import_url of this Config.  # noqa: E501


        :return: The terra_import_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._terra_import_url

    @terra_import_url.setter
    def terra_import_url(self, terra_import_url):
        """Sets the terra_import_url of this Config.


        :param terra_import_url: The terra_import_url of this Config.  # noqa: E501
        :type: str
        """

        self._terra_import_url = terra_import_url

    @property
    def zenodo_auth_url(self):
        """Gets the zenodo_auth_url of this Config.  # noqa: E501


        :return: The zenodo_auth_url of this Config.  # noqa: E501
        :rtype: str
        """
        return self._zenodo_auth_url

    @zenodo_auth_url.setter
    def zenodo_auth_url(self, zenodo_auth_url):
        """Sets the zenodo_auth_url of this Config.


        :param zenodo_auth_url: The zenodo_auth_url of this Config.  # noqa: E501
        :type: str
        """

        self._zenodo_auth_url = zenodo_auth_url

    @property
    def zenodo_client_id(self):
        """Gets the zenodo_client_id of this Config.  # noqa: E501


        :return: The zenodo_client_id of this Config.  # noqa: E501
        :rtype: str
        """
        return self._zenodo_client_id

    @zenodo_client_id.setter
    def zenodo_client_id(self, zenodo_client_id):
        """Sets the zenodo_client_id of this Config.


        :param zenodo_client_id: The zenodo_client_id of this Config.  # noqa: E501
        :type: str
        """

        self._zenodo_client_id = zenodo_client_id

    @property
    def zenodo_redirect_path(self):
        """Gets the zenodo_redirect_path of this Config.  # noqa: E501


        :return: The zenodo_redirect_path of this Config.  # noqa: E501
        :rtype: str
        """
        return self._zenodo_redirect_path

    @zenodo_redirect_path.setter
    def zenodo_redirect_path(self, zenodo_redirect_path):
        """Sets the zenodo_redirect_path of this Config.


        :param zenodo_redirect_path: The zenodo_redirect_path of this Config.  # noqa: E501
        :type: str
        """

        self._zenodo_redirect_path = zenodo_redirect_path

    @property
    def zenodo_scope(self):
        """Gets the zenodo_scope of this Config.  # noqa: E501


        :return: The zenodo_scope of this Config.  # noqa: E501
        :rtype: str
        """
        return self._zenodo_scope

    @zenodo_scope.setter
    def zenodo_scope(self, zenodo_scope):
        """Sets the zenodo_scope of this Config.


        :param zenodo_scope: The zenodo_scope of this Config.  # noqa: E501
        :type: str
        """

        self._zenodo_scope = zenodo_scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Config):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Config):
            return True

        return self.to_dict() != other.to_dict()
