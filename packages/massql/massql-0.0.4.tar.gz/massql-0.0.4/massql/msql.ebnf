statement: "QUERY" querytype "WHERE" wherefullcondition+ "FILTER" filterfullcondition+
     | "QUERY" querytype "FILTER" filterfullcondition+
     | "QUERY" querytype "WHERE" wherefullcondition+ 
     | "QUERY" querytype

querytype: datams1data
     | datams2data
     | function"(" datams1data ")"
     | function "(" datams2data ")"
     | function"(" datams1data "," param "=" floating ")"

datams1data: "MS1DATA"
datams2data: "MS2DATA"

wherefullcondition: wherefullcondition booleanconjunction wherefullcondition
    | condition ":" qualifier
    | condition

filterfullcondition: filterfullcondition booleanconjunction filterfullcondition
    | condition ":" qualifier
    | condition

condition: conditionfields "=" numericalexpression
    | conditionfields equal "(" statement ")"
    | polaritycondition equal positivepolarity
    | polaritycondition equal negativepolarity
    | xcondition equal xfunction "(min=" numericalexpression "," "max=" numericalexpression ")"
    | xcondition equal xfunction "(min=" numericalexpression "," "max=" numericalexpression ")"

qualifier: qualifier ":" qualifier
    | qualifierfields equal numericalexpression
    | qualifierfields greaterthan numericalexpression
    | qualifierfields lessthan numericalexpression
    | qualifierintensityreference

equal: "="
lessthan: "<"
greaterthan: ">"
positivepolarity: "POSITIVE"
    | "positive"
    | "Positive"
negativepolarity: "NEGATIVE"
    | "negative"
    | "Negative"

conditionfields: ms2productcondition
    | ms2precursorcondition
    | ms2neutrallosscondition
    | ms1mzcondition
    | rtmincondition
    | rtmaxcondition
    | scanmincondition
    | scanmaxcondition
    | chargecondition

ms2productcondition: "MS2PROD" | "MS2MZ"
ms2precursorcondition: "MS2PREC"
ms2neutrallosscondition: "MS2NL"
ms1mzcondition: "MS1MZ"
rtmincondition: "RTMIN"
rtmaxcondition: "RTMAX"
scanmincondition: "SCANMIN"
scanmaxcondition: "SCANMAX"
polaritycondition: "POLARITY"
chargecondition: "CHARGE"
xcondition: "X"
xfunction: xrange | xdefect
xrange: "range"
xdefect: "defect"

qualifierfields: qualifiermztolerance
    | qualifierppmtolerance
    | qualifierintensitypercent
    | qualifierintensityticpercent
    | qualifierintensityvalue
    | qualifierintensitymatch
    | qualifierintensitytolpercent

qualifiermztolerance: "TOLERANCEMZ"
qualifierppmtolerance: "TOLERANCEPPM"
qualifierintensitypercent: "INTENSITYPERCENT"
qualifierintensityticpercent: "INTENSITYTICPERCENT"
qualifierintensityvalue: "INTENSITYVALUE"
qualifierintensitymatch: "INTENSITYMATCH"
qualifierintensitytolpercent: "INTENSITYMATCHPERCENT"
qualifierintensityreference: "INTENSITYMATCHREFERENCE"


function: functionscannum
    | functionscansum
    | functionscanrangesum
    | functionscanmz
    | functionscaninfo

functionscannum: "scannum"
functionscansum: "scansum" 
functionscanrangesum: "scanrangesum"
functionscanmz: "scanmz"
functionscaninfo: "scaninfo"

booleanconjunction: "AND"
    | "and"
    | "And"

param: "TOLERANCE"
floating: /[-+]?([0-9]*\.[0-9]+|[0-9]+)/
variable: /[XY]/

// Numerical Expression
numericalexpression: term
    | numericalexpression plus term
    | numericalexpression minus term
term: factor
    | term multiply factor
    | term divide factor
factor: floating
    | variable
    | "formula(" moleculeformula ")"
    | "aminoaciddelta(" aminoacids ")"
    | peptidefunction
    | "(" numericalexpression ")"
peptidefunction: "peptide(" peptide "," "charge=" peptidecharge "," "ion=" peptideion ")"
multiply: "*"
divide: "/"
plus: "+"
minus: "-"

moleculeformula: /[A-Z][A-Za-z1-9]*/
aminoacids: /[A-Z][A-Z]*/
peptide: /[A-Z][A-Z]*/
peptidecharge: /[1-9]/
peptideion: /[A-Za-z]/

// Boiler Plate
%import common.ESCAPED_STRING   -> STRING
%import common.SIGNED_NUMBER    -> NUMBER
%import common.WS
%ignore WS