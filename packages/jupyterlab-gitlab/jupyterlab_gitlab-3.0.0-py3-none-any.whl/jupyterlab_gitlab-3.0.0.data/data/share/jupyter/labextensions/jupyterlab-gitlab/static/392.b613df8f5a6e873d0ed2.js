"use strict";(self.webpackChunkjupyterlab_gitlab=self.webpackChunkjupyterlab_gitlab||[]).push([[392],{392:(e,t,s)=>{s.r(t),s.d(t,{default:()=>C});var r=s(23),i=s(589),n=s(525),o=s(451),a=s(994),l=s(168),c=s(920),h=s(414),d=s(491);function p(e,t){return d.ServerConnection.makeRequest(e,{},t).then((e=>200!==e.status?e.json().then((t=>{throw new d.ServerConnection.ResponseError(e,t.message)})):e.json()))}var u=s(959);const m="https://gitlab.com";class b{constructor(e){this._baseUrl="",this._validUser=!1,this._isDisposed=!1,this._fileChanged=new l.Signal(this),this._serverSettings=d.ServerConnection.makeSettings(),this._fileTypeForPath=t=>{const s=e.getFileTypesForPath(t);return 0===s.length?e.getFileType("text"):s[0]},this.baseUrl=m,this._useProxy=new Promise((e=>{p(c.URLExt.join(this._serverSettings.baseUrl,"gitlab",g.b64EncodeUrlSafe("/templates/licenses")),this._serverSettings).then((()=>{e(!0)})).catch((()=>{console.warn("The JupyterLab GitLab server extension appears to be missing. If you do not install it with application credentials, you are likely to be rate limited by GitLab very quickly"),e(!1)}))})),this.rateLimitedState=new h.ObservableValue(!1)}get name(){return"GitLab"}get validUser(){return this._validUser}get serverSettings(){return this._serverSettings}get fileChanged(){return this._fileChanged}get isDisposed(){return this._isDisposed}dispose(){this.isDisposed||(this._isDisposed=!0,l.Signal.clearData(this))}get baseUrl(){return this._baseUrl}set baseUrl(e){this._baseUrl=e}get accessToken(){return this._accessToken}set accessToken(e){this._accessToken=e}get(e,t){const s=_(e);if(""===s.user)return this._validUser=!1,Promise.resolve(g.dummyDirectory);if(s.user&&!s.repository)return this._listRepos(s.user);let r="tree";s.path&&(r=!t||"file"!==t.type&&"notebook"!==t.type?c.URLExt.join("tree","?path="+encodeURIComponent(s.path)):c.URLExt.join("files",encodeURIComponent(s.path))+"?ref=master");const i=c.URLExt.join("projects",encodeURIComponent(s.user)+"%2F"+encodeURIComponent(s.repository),"repository",r);return this._apiRequest(i).then((t=>(this._validUser=!0,!1!==this.rateLimitedState.get()&&this.rateLimitedState.set(!1),g.gitLabContentsToJupyterContents(e,t,this._fileTypeForPath)))).catch((e=>404===e.response.status?(console.warn("GitLab: cannot find group/repo. Perhaps you misspelled something?"),this._validUser=!1,g.dummyDirectory):403===e.response.status&&-1!==e.message.indexOf("rate limit")?(!0!==this.rateLimitedState.get()&&this.rateLimitedState.set(!0),console.error(e.message),Promise.reject(e)):(console.error(e.message),Promise.reject(e))))}getDownloadUrl(e){const t=_(e);if(!t.user)return Promise.reject("GitLab: no active group");if(!t.path)return Promise.reject("GitLab: No file selected");const s=c.URLExt.join(this.baseUrl,"api","v4"),r=c.URLExt.join(s,"projects",encodeURIComponent(t.user)+"%2F"+encodeURIComponent(t.repository),"repository","files",encodeURIComponent(t.path),"raw")+"?ref=master";return Promise.resolve(r)}newUntitled(e={}){return Promise.reject("Repository is read only")}delete(e){return Promise.reject("Repository is read only")}rename(e,t){return Promise.reject("Repository is read only")}save(e,t){return Promise.reject("Repository is read only")}copy(e,t){return Promise.reject("Repository is read only")}createCheckpoint(e){return Promise.reject("Repository is read only")}listCheckpoints(e){return Promise.resolve([])}restoreCheckpoint(e,t){return Promise.reject("Repository is read only")}deleteCheckpoint(e,t){return Promise.reject("Read only")}_listRepos(e){const t=c.URLExt.encodeParts(c.URLExt.join("groups",e,"projects"));return this._apiRequest(t).catch((t=>{if(404===t.response.status){const t=c.URLExt.encodeParts(c.URLExt.join("users",e,"projects"));return this._apiRequest(t)}throw t})).then((e=>(this._validUser=!0,!1!==this.rateLimitedState.get()&&this.rateLimitedState.set(!1),g.reposToDirectory(e)))).catch((e=>(403===e.response.status&&-1!==e.message.indexOf("rate limit")?!0!==this.rateLimitedState.get()&&this.rateLimitedState.set(!0):(console.error(e.message),console.warn("GitLab: cannot find user. Perhaps you misspelled something?"),this._validUser=!1),g.dummyDirectory)))}_apiRequest(e){return this._useProxy.then((t=>{const s=e.split("?");let r=s[0];const i=(s[1]||"").split("&"),n={};for(const e of i)if(e){const[t,s]=e.split("=");n[t]=s}let o;return!0===t?(o=c.URLExt.join(this._serverSettings.baseUrl,"gitlab"),this.accessToken&&(n.private_token=this.accessToken)):o=c.URLExt.join(this.baseUrl,"api","v4"),r&&(!0===t&&(r=g.b64EncodeUrlSafe(r)),o=c.URLExt.join(o,r)),o+="?"+Object.keys(n).map((e=>`${e}=${n[e]}`)).join("&"),!0===t?p(o,this._serverSettings):(a=o,window.fetch(a).then((e=>200!==e.status?e.json().then((t=>{throw new d.ServerConnection.ResponseError(e,t.message)})):e.json())));var a}))}}function _(e){const t=e.split("/");return{user:t.length>0?t[0]:"",repository:t.length>1?t[1]:"",path:t.length>2?c.URLExt.join(...t.slice(2)):""}}var g;!function(e){function t(e,t){const s=new Response(t,{status:e,statusText:t});return new d.ServerConnection.ResponseError(s,t)}e.dummyDirectory={type:"directory",path:"",name:"",format:"json",content:[],created:"",writable:!1,last_modified:"",mimetype:""},e.gitLabContentsToJupyterContents=function s(r,i,n){if(Array.isArray(i))return{name:c.PathExt.basename(r),path:r,format:"json",type:"directory",writable:!1,created:"",last_modified:"",mimetype:"",content:i.map((e=>s(c.PathExt.join(r,e.name),e,n)))};if("blob"===i.type||i.hasOwnProperty("file_name")){const t=n(r),s=i.content;let o;switch(t.fileFormat){case"text":o=void 0!==s?e.b64DecodeUTF8(s):null;break;case"base64":o=void 0!==s?s:null;break;case"json":o=void 0!==s?JSON.parse(e.b64DecodeUTF8(s)):null;break;default:throw new Error(`Unexpected file format: ${t.fileFormat}`)}return{name:c.PathExt.basename(r),path:r,format:t.fileFormat,type:"file",created:"",writable:!1,last_modified:"",mimetype:t.mimeTypes[0],content:o}}if("tree"===i.type)return{name:c.PathExt.basename(r),path:r,format:"json",type:"directory",created:"",writable:!1,last_modified:"",mimetype:"",content:null};throw"commit"===i.type?t(400,`Cannot open "${i.name}" because it is a submodule`):t(500,`"${i.name}" has and unexpected type: ${i.type}`)},e.reposToDirectory=function(e){return{name:"",path:"",format:"json",type:"directory",created:"",last_modified:"",writable:!1,mimetype:"",content:e.map((e=>({name:e.name,path:e.path_with_namespace,format:"json",type:"directory",created:"",writable:!1,last_modified:"",mimetype:"",content:null})))}},e.makeError=t;const s=new TextDecoder("utf8");e.b64DecodeUTF8=function(e){const t=u.toByteArray(e.replace(/\n/g,""));return s.decode(t)},e.b64EncodeUrlSafe=function(e){return btoa(e).replace(/\+/g,"-").replace(/\//g,"_")}}(g||(g={}));var y=s(133),w=s(615);class f extends w.Widget{constructor(e,t){super(),this._errorPanel=null,this._changeGuard=!1,this.addClass("jp-GitLabBrowser"),this.layout=new w.PanelLayout,this.layout.addWidget(e),this._browser=e,this._drive=t,this.userName=new v,this.userName.node.title="Click to edit user/group",this._browser.toolbar.addItem("user",this.userName),this.userName.nameChanged.connect(this._onUserChanged,this),this._openGitLabButton=new i.ToolbarButton({onClick:()=>{let e=this._drive.baseUrl;if(!this._drive.validUser)return void window.open(e);const t=_(this._browser.model.manager.services.contents.localPath(this._browser.model.path));e=c.URLExt.join(e,t.user),t.repository&&(e=c.URLExt.join(e,t.repository,"tree","master",t.path)),window.open(e)},iconClass:"jp-GitLab-icon jp-Icon jp-Icon-16",tooltip:"Open this repository on GitLab"}),this._openGitLabButton.addClass("jp-GitLab-toolbar-item"),this._browser.toolbar.addItem("GitLab",this._openGitLabButton);const s=new i.ToolbarButton({icon:y.refreshIcon,onClick:()=>{this._browser.model.refresh()},tooltip:"Refresh File List"});s.addClass("jp-GitLab-toolbar-item"),this._browser.toolbar.addItem("gh-refresher",s),this._browser.model.pathChanged.connect(this._onPathChanged,this),this._onPathChanged(),this._drive.rateLimitedState.changed.connect(this._updateErrorPanel,this)}_onUserChanged(){this._changeGuard||(this._changeGuard=!0,this._browser.model.cd(`/${this.userName.name}`).then((()=>{this._changeGuard=!1,this._updateErrorPanel(),document.activeElement===document.body&&this._browser.layout.widgets[3].node.focus()})))}_onPathChanged(){const e=_(this._browser.model.manager.services.contents.localPath(this._browser.model.path));this._changeGuard||(this._changeGuard=!0,this.userName.name=e.user,this._changeGuard=!1,this._updateErrorPanel())}_updateErrorPanel(){const e=_(this._browser.model.manager.services.contents.localPath(this._browser.model.path)),t=this._drive.rateLimitedState.get(),s=this._drive.validUser;if(this._errorPanel&&(this._browser.layout.widgets[3].node.removeChild(this._errorPanel.node),this._errorPanel.dispose(),this._errorPanel=null),t)this._errorPanel=new L("You have been rate limited by GitLab! You will need to wait about an hour before continuing"),this._browser.layout.widgets[3].node.appendChild(this._errorPanel.node);else if(s);else{const t=e.user?`"${e.user}" appears to be an invalid user name!`:"Please enter a GitLab user name";this._errorPanel=new L(t),this._browser.layout.widgets[3].node.appendChild(this._errorPanel.node)}}}class v extends w.Widget{constructor(){super(),this._name="",this._nameChanged=new l.Signal(this),this.addClass("jp-GitLabUserInput");const e=this.layout=new w.PanelLayout,t=new w.Widget;t.addClass("jp-GitLabUserInput-wrapper"),this._input=document.createElement("input"),this._input.placeholder="GitLab User or Group",this._input.className="jp-GitLabUserInput-input",t.node.appendChild(this._input),e.addWidget(t)}get name(){return this._name}set name(e){if(e===this._name)return;const t=this._name;this._name=e,this._input.value=e,this._nameChanged.emit({oldValue:t,newValue:e})}get nameChanged(){return this._nameChanged}handleEvent(e){switch(e.type){case"keydown":switch(e.keyCode){case 13:e.stopPropagation(),e.preventDefault(),this.name=this._input.value,this._input.blur()}break;case"blur":e.stopPropagation(),e.preventDefault(),this.name=this._input.value;break;case"focus":e.stopPropagation(),e.preventDefault(),this._input.select()}}onAfterAttach(e){this._input.addEventListener("keydown",this),this._input.addEventListener("blur",this),this._input.addEventListener("focus",this)}onBeforeDetach(e){this._input.removeEventListener("keydown",this),this._input.removeEventListener("blur",this),this._input.removeEventListener("focus",this)}}class L extends w.Widget{constructor(e){super(),this.addClass("jp-GitLabErrorPanel");const t=document.createElement("div"),s=document.createElement("div");t.className="jp-GitLabErrorImage",s.className="jp-GitLabErrorText",s.textContent=e,this.node.appendChild(t),this.node.appendChild(s)}}const U="gitlab-filebrowser",j="jupyterlab-gitlab:drive",C={id:j,requires:[o.IDocumentManager,a.IFileBrowserFactory,r.ILayoutRestorer,n.ISettingRegistry],activate:function(e,t,s,r,i){const n=new b(e.docRegistry);t.services.contents.addDrive(n);const o=s.createFileBrowser(U,{driveName:n.name,refreshInterval:3e5}),a=new f(o,n);a.title.iconClass="jp-GitLab-icon jp-SideBar-tabIcon",a.title.caption="Browse GitLab",a.id="gitlab-file-browser",r.add(a,U),e.shell.add(a,"left",{rank:102});let l=!1;const c=async e=>{const t=e.get("baseUrl").composite,s=e.get("accessToken").composite;if(n.baseUrl=t||m,s){let t=!0;l&&(t=await P.showWarning()),t?n.accessToken=s:e.remove("accessToken")}else n.accessToken=null};Promise.all([i.load(j),e.restored]).then((([e])=>{e.changed.connect(c),c(e),l=!0;const t=e.get("defaultRepo").composite;t&&o.model.restored.then((()=>{o.model.cd(`/${t}`)}))})).catch((e=>{console.error(e.message)}))},autoStart:!0};var P;!function(e){e.showWarning=async function(){return(0,i.showDialog)({title:"Security Alert!",body:"Adding a client side access token can pose a security risk! Please consider using the server extension instead.Do you want to continue?",buttons:[i.Dialog.cancelButton({label:"CANCEL"}),i.Dialog.warnButton({label:"PROCEED"})]}).then((e=>!!e.button.accept))}}(P||(P={}))}}]);