{"version":3,"sources":["components/TitleCard.tsx","type/actor.ts","components/StatusChip.tsx","components/SearchComponent.tsx","util/hook.ts","util/converter.ts","util/func.tsx","components/ActorTable.tsx","components/PercentageBar.tsx","components/StatesCounter.tsx","components/WorkerTable.tsx","pages/actor/index.tsx","service/actor.ts"],"names":["useStyles","makeStyles","theme","card","padding","spacing","paddingTop","margin","map","e","join","title","fontSize","typography","fontWeight","color","palette","text","secondary","marginBottom","body","TitleCard","children","classes","className","ActorEnum","colorMap","node","ALIVE","green","DEAD","red","actor","PENDING","blue","RECONSTRUCTING","lightBlue","job","INIT","grey","SUBMITTED","DISPATCHED","RUNNING","COMPLETED","cyan","FINISHED","FAILED","typeMap","deps","INFO","ERROR","StatusChip","type","status","suffix","style","border","borderRadius","blueGrey","borderColor","backgroundColor","search","marginTop","SearchInput","label","onChange","defaultValue","size","InputProps","value","target","endAdornment","position","SearchSelect","options","select","SelectProps","width","useFilter","useState","filters","setFilters","changeFilter","key","val","f","find","push","filterFunc","instance","every","get","toString","includes","useSorter","initialSortKey","desc","sorter","setSorter","sorterFunc","instanceA","instanceB","b","a","setSortKey","setOrderDesc","sorterKey","memoryConverter","bytes","toFixed","longTextCut","len","interactive","length","slice","ActorTable","actors","workers","pageNo","setPageNo","pageSize","setPageSize","ipLogMap","useContext","GlobalContext","actorList","Object","values","functionDesc","taskSpec","functionDescriptor","javaFunctionDescriptor","pythonFunctionDescriptor","filter","list","Fragment","flex","display","alignItems","Array","from","Set","state","onInputChange","_","trim","renderInput","params","address","ipAddress","Math","min","Number","page","num","count","ceil","col","align","actorId","jobId","pid","name","numRestarts","coreWorkerStats","expandComponent","actorMap","mini","orange","port","to","encodeURIComponent","useStyle","container","background","height","lineHeight","boxSizing","displayBar","paper","right","transition","borderTopLeftRadius","borderBottomLeftRadius","zIndex","primary","textAlign","PercentageBar","props","total","per","round","max","StateCounter","stateMap","forEach","item","entries","s","ExpandableTableRow","stateKey","otherProps","React","isExpanded","setIsExpanded","useEffect","startsWith","onClick","colSpan","WorkerDetailTable","RayletWorkerTable","setKey","nodeMap","random","sort","aWorker","bWorker","cpuPercent","cpuTimes","memoryInfo","cmdline","createTime","language","ip","hostname","maxHeight","overflow","lineBreak","dayjs","format","window","open","root","Actors","setActors","then","res","data"],"mappings":"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","file":"static/js/10.0f437208.chunk.js","sourcesContent":["import { makeStyles, Paper } from \"@material-ui/core\";\nimport React, { PropsWithChildren, ReactNode } from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    padding: theme.spacing(2),\n    paddingTop: theme.spacing(1.5),\n    margin: [theme.spacing(2), theme.spacing(1)].map((e) => `${e}px`).join(\" \"),\n  },\n  title: {\n    fontSize: theme.typography.fontSize + 2,\n    fontWeight: 500,\n    color: theme.palette.text.secondary,\n    marginBottom: theme.spacing(1),\n  },\n  body: {\n    padding: theme.spacing(0.5),\n  },\n}));\n\nconst TitleCard = ({\n  title,\n  children,\n}: PropsWithChildren<{ title: ReactNode | string }>) => {\n  const classes = useStyles();\n  return (\n    <Paper className={classes.card}>\n      <div className={classes.title}>{title}</div>\n      <div className={classes.body}>{children}</div>\n    </Paper>\n  );\n};\n\nexport default TitleCard;\n","export enum ActorEnum {\n  ALIVE = \"ALIVE\",\n  PENDING = \"PENDING\",\n  RECONSTRUCTING = \"RECONSTRUCTING\",\n  DEAD = \"DEAD\",\n}\n\nexport type Address = {\n  rayletId: string;\n  ipAddress: string;\n  port: number;\n  workerId: string;\n};\n\nexport type TaskSpec = {\n  actorCreationTaskSpec: {\n    actorId: string;\n    dynamicWorkerOptions: string[];\n    extensionData: string;\n    isAsyncio: boolean;\n    isDetached: boolean;\n    maxActorRestarts: boolean;\n    maxConcurrency: number;\n    name: string;\n  };\n  args: {\n    data: string;\n    metadata: string;\n    nestedInlinedIds: string[];\n    objectIds: string[];\n  }[];\n  callerAddress: {\n    ipAddress: string;\n    port: number;\n    rayletId: string;\n    workerId: string;\n  };\n  callerId: string;\n  functionDescriptor: {\n    javaFunctionDescriptor: {\n      className: string;\n      functionName: string;\n      signature: string;\n    };\n    pythonFunctionDescriptor: {\n      className: string;\n      functionName: string;\n      signature: string;\n    };\n  };\n  jobId: string;\n  language: string;\n  maxRetries: number;\n  numReturns: string;\n  parentCounter: string;\n  parentTaskId: string;\n  requiredPlacementResources: {\n    [key: string]: number;\n  };\n  requiredResources: {\n    [key: string]: number;\n  };\n  sourceActorId: string;\n  taskId: string;\n  type: string;\n};\n\nexport type Actor = {\n  actorId: string;\n  children: { [key: string]: Actor };\n  taskSpec: TaskSpec;\n  ipAddress: string;\n  isDirectCall: boolean;\n  jobId: string;\n  numExecutedTasks: number;\n  numLocalObjects: number;\n  numObjectIdsInScope: number;\n  state: ActorEnum | string; // PENDING, ALIVE, RECONSTRUCTING, DEAD\n  taskQueueLength: number;\n  usedObjectStoreMemory: number;\n  usedResources: { [key: string]: string | number };\n  timestamp: number;\n  actorTitle: string;\n  averageTaskExecutionSpeed: number;\n  nodeId: string;\n  pid: number;\n  ownerAddress: Address;\n  address: Address;\n  maxReconstructions: string;\n  remainingReconstructions: string;\n  isDetached: false;\n  name: string;\n  numRestarts: string;\n};\n","import { Color } from \"@material-ui/core\";\nimport {\n  blue,\n  blueGrey,\n  cyan,\n  green,\n  grey,\n  lightBlue,\n  red,\n} from \"@material-ui/core/colors\";\nimport { CSSProperties } from \"@material-ui/core/styles/withStyles\";\nimport React, { ReactNode } from \"react\";\nimport { ActorEnum } from \"../type/actor\";\n\nconst colorMap = {\n  node: {\n    ALIVE: green,\n    DEAD: red,\n  },\n  actor: {\n    [ActorEnum.ALIVE]: green,\n    [ActorEnum.DEAD]: red,\n    [ActorEnum.PENDING]: blue,\n    [ActorEnum.RECONSTRUCTING]: lightBlue,\n  },\n  job: {\n    INIT: grey,\n    SUBMITTED: blue,\n    DISPATCHED: lightBlue,\n    RUNNING: green,\n    COMPLETED: cyan,\n    FINISHED: cyan,\n    FAILED: red,\n  },\n} as {\n  [key: string]: {\n    [key: string]: Color;\n  };\n};\n\nconst typeMap = {\n  deps: blue,\n  INFO: cyan,\n  ERROR: red,\n} as {\n  [key: string]: Color;\n};\n\nexport const StatusChip = ({\n  type,\n  status,\n  suffix,\n}: {\n  type: string;\n  status: string | ActorEnum | ReactNode;\n  suffix?: string;\n}) => {\n  const style = {\n    padding: \"2px 8px\",\n    border: \"solid 1px\",\n    borderRadius: 4,\n    fontSize: 12,\n    margin: 2,\n  } as CSSProperties;\n\n  let color = blueGrey as Color;\n\n  if (typeMap[type]) {\n    color = typeMap[type];\n  } else if (\n    typeof status === \"string\" &&\n    colorMap[type] &&\n    colorMap[type][status]\n  ) {\n    color = colorMap[type][status];\n  }\n\n  style.color = color[500];\n  style.borderColor = color[500];\n  if (color !== blueGrey) {\n    style.backgroundColor = `${color[500]}20`;\n  }\n\n  return (\n    <span style={style}>\n      {status}\n      {suffix}\n    </span>\n  );\n};\n","import {\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    margin: theme.spacing(1),\n    marginTop: 0,\n  },\n}));\n\nexport const SearchInput = ({\n  label,\n  onChange,\n  defaultValue,\n}: {\n  label: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      InputProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value);\n          }\n        },\n        defaultValue,\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <SearchOutlined />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n};\n\nexport const SearchSelect = ({\n  label,\n  onChange,\n  options,\n}: {\n  label: string;\n  onChange?: (value: string) => void;\n  options: (string | [string, string])[];\n}) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      select\n      SelectProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value as string);\n          }\n        },\n        style: {\n          width: 100,\n        },\n      }}\n    >\n      <MenuItem value=\"\">All</MenuItem>\n      {options.map((e) =>\n        typeof e === \"string\" ? (\n          <MenuItem value={e}>{e}</MenuItem>\n        ) : (\n          <MenuItem value={e[0]}>{e[1]}</MenuItem>\n        ),\n      )}\n    </TextField>\n  );\n};\n","import { get } from \"lodash\";\nimport { useState } from \"react\";\n\nexport const useFilter = <KeyType extends string>() => {\n  const [filters, setFilters] = useState<{ key: KeyType; val: string }[]>([]);\n  const changeFilter = (key: KeyType, val: string) => {\n    const f = filters.find((e) => e.key === key);\n    if (f) {\n      f.val = val;\n    } else {\n      filters.push({ key, val });\n    }\n    setFilters([...filters]);\n  };\n  const filterFunc = (instance: { [key: string]: any }) => {\n    return filters.every(\n      (f) => !f.val || get(instance, f.key, \"\").toString().includes(f.val),\n    );\n  };\n\n  return {\n    changeFilter,\n    filterFunc,\n  };\n};\n\nexport const useSorter = (initialSortKey?: string) => {\n  const [sorter, setSorter] = useState({\n    key: initialSortKey || \"\",\n    desc: false,\n  });\n\n  const sorterFunc = (\n    instanceA: { [key: string]: any },\n    instanceB: { [key: string]: any },\n  ) => {\n    if (!sorter.key) {\n      return 0;\n    }\n\n    let [b, a] = [instanceA, instanceB];\n    if (sorter.desc) {\n      [a, b] = [instanceA, instanceB];\n    }\n\n    if (!get(a, sorter.key)) {\n      return -1;\n    }\n\n    if (!get(b, sorter.key)) {\n      return 1;\n    }\n\n    return get(a, sorter.key) > get(b, sorter.key) ? 1 : -1;\n  };\n\n  return {\n    sorterFunc,\n    setSortKey: (key: string) => setSorter({ ...sorter, key }),\n    setOrderDesc: (desc: boolean) => setSorter({ ...sorter, desc }),\n    sorterKey: sorter.key,\n  };\n};\n","export const memoryConverter = (bytes: number) => {\n  if (bytes < 1024) {\n    return `${bytes}KB`;\n  }\n\n  if (bytes < 1024 ** 2) {\n    return `${(bytes / 1024 ** 1).toFixed(2)}KB`;\n  }\n\n  if (bytes < 1024 ** 3) {\n    return `${(bytes / 1024 ** 2).toFixed(2)}MB`;\n  }\n\n  if (bytes < 1024 ** 4) {\n    return `${(bytes / 1024 ** 3).toFixed(2)}GB`;\n  }\n\n  if (bytes < 1024 ** 5) {\n    return `${(bytes / 1024 ** 4).toFixed(2)}TB`;\n  }\n\n  if (bytes < 1024 ** 6) {\n    return `${(bytes / 1024 ** 5).toFixed(2)}TB`;\n  }\n\n  return \"\";\n};\n","import { Tooltip } from \"@material-ui/core\";\nimport React, { CSSProperties } from \"react\";\n\nexport const longTextCut = (text: string = \"\", len: number = 28) => (\n  <Tooltip title={text} interactive>\n    <span>{text.length > len ? text.slice(0, len) + \"...\" : text}</span>\n  </Tooltip>\n);\n\nexport const jsonFormat = (str: string | object) => {\n  const preStyle = {\n    textAlign: \"left\",\n    wordBreak: \"break-all\",\n    whiteSpace: \"pre-wrap\",\n  } as CSSProperties;\n  if (typeof str === \"object\") {\n    return <pre style={preStyle}>{JSON.stringify(str, null, 2)}</pre>;\n  }\n  try {\n    const j = JSON.parse(str);\n    if (typeof j !== \"object\") {\n      return JSON.stringify(j);\n    }\n    return <pre style={preStyle}>{JSON.stringify(j, null, 2)}</pre>;\n  } catch (e) {\n    return str;\n  }\n};\n","import {\n  InputAdornment,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  TextFieldProps,\n} from \"@material-ui/core\";\nimport { orange } from \"@material-ui/core/colors\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport React, { useContext, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { Actor } from \"../type/actor\";\nimport { Worker } from \"../type/worker\";\nimport { longTextCut } from \"../util/func\";\nimport { useFilter } from \"../util/hook\";\nimport StateCounter from \"./StatesCounter\";\nimport { StatusChip } from \"./StatusChip\";\nimport RayletWorkerTable, { ExpandableTableRow } from \"./WorkerTable\";\n\nconst ActorTable = ({\n  actors = {},\n  workers = [],\n}: {\n  actors: { [actorId: string]: Actor };\n  workers?: Worker[];\n}) => {\n  const [pageNo, setPageNo] = useState(1);\n  const { changeFilter, filterFunc } = useFilter();\n  const [pageSize, setPageSize] = useState(10);\n  const { ipLogMap } = useContext(GlobalContext);\n  const actorList = Object.values(actors || {})\n    .map((e) => ({\n      ...e,\n      functionDesc: Object.values(\n        e.taskSpec?.functionDescriptor?.javaFunctionDescriptor ||\n          e.taskSpec?.functionDescriptor?.pythonFunctionDescriptor ||\n          {},\n      ).join(\" \"),\n    }))\n    .filter(filterFunc);\n  const list = actorList.slice((pageNo - 1) * pageSize, pageNo * pageSize);\n\n  return (\n    <React.Fragment>\n      <div style={{ flex: 1, display: \"flex\", alignItems: \"center\" }}>\n        <Autocomplete\n          style={{ margin: 8, width: 120 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.state)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"state\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"State\" />\n          )}\n        />\n        <Autocomplete\n          style={{ margin: 8, width: 150 }}\n          options={Array.from(\n            new Set(Object.values(actors).map((e) => e.address?.ipAddress)),\n          )}\n          onInputChange={(_: any, value: string) => {\n            changeFilter(\"address.ipAddress\", value.trim());\n          }}\n          renderInput={(params: TextFieldProps) => (\n            <TextField {...params} label=\"IP\" />\n          )}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"PID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"pid\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 200 }}\n          label=\"Task Func Desc\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"functionDesc\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Name\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"name\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Actor ID\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              changeFilter(\"actorId\", value.trim());\n            },\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchOutlined />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <TextField\n          style={{ margin: 8, width: 120 }}\n          label=\"Page Size\"\n          size=\"small\"\n          InputProps={{\n            onChange: ({ target: { value } }) => {\n              setPageSize(Math.min(Number(value), 500) || 10);\n            },\n          }}\n        />\n      </div>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <div>\n          <Pagination\n            page={pageNo}\n            onChange={(e, num) => setPageNo(num)}\n            count={Math.ceil(actorList.length / pageSize)}\n          />\n        </div>\n        <div>\n          <StateCounter type=\"actor\" list={actorList} />\n        </div>\n      </div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              \"\",\n              \"ID(Num Restarts)\",\n              \"Name\",\n              \"Task Func Desc\",\n              \"Job Id\",\n              \"Pid\",\n              \"IP\",\n              \"Port\",\n              \"State\",\n              \"Log\",\n            ].map((col) => (\n              <TableCell align=\"center\" key={col}>\n                {col}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {list.map(\n            ({\n              actorId,\n              functionDesc,\n              jobId,\n              pid,\n              address,\n              state,\n              name,\n              numRestarts,\n            }) => (\n              <ExpandableTableRow\n                length={\n                  workers.filter(\n                    (e) =>\n                      e.pid === pid &&\n                      address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                  ).length\n                }\n                expandComponent={\n                  <RayletWorkerTable\n                    actorMap={{}}\n                    workers={workers.filter(\n                      (e) =>\n                        e.pid === pid &&\n                        address.ipAddress === e.coreWorkerStats[0].ipAddress,\n                    )}\n                    mini\n                  />\n                }\n                key={actorId}\n              >\n                <TableCell\n                  align=\"center\"\n                  style={{\n                    color: Number(numRestarts) > 0 ? orange[500] : \"inherit\",\n                  }}\n                >\n                  {actorId}({numRestarts})\n                </TableCell>\n                <TableCell align=\"center\">{name}</TableCell>\n                <TableCell align=\"center\">\n                  {longTextCut(functionDesc, 60)}\n                </TableCell>\n                <TableCell align=\"center\">{jobId}</TableCell>\n                <TableCell align=\"center\">{pid}</TableCell>\n                <TableCell align=\"center\">{address?.ipAddress}</TableCell>\n                <TableCell align=\"center\">{address?.port}</TableCell>\n                <TableCell align=\"center\">\n                  <StatusChip type=\"actor\" status={state} />\n                </TableCell>\n                <TableCell align=\"center\">\n                  {ipLogMap[address?.ipAddress] && (\n                    <Link\n                      target=\"_blank\"\n                      to={`/log/${encodeURIComponent(\n                        ipLogMap[address?.ipAddress],\n                      )}?fileName=${jobId}-${pid}`}\n                    >\n                      Log\n                    </Link>\n                  )}\n                </TableCell>\n              </ExpandableTableRow>\n            ),\n          )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default ActorTable;\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { PropsWithChildren } from \"react\";\n\nconst useStyle = makeStyles((theme) => ({\n  container: {\n    background: \"linear-gradient(45deg, #21CBF3ee 30%, #2196F3ee 90%)\",\n    border: `1px solid #ffffffbb`,\n    padding: \"0 12px\",\n    height: 18,\n    lineHeight: \"18px\",\n    position: \"relative\",\n    boxSizing: \"content-box\",\n    borderRadius: 4,\n  },\n  displayBar: {\n    background: theme.palette.background.paper,\n    position: \"absolute\",\n    right: 0,\n    height: 18,\n    transition: \"0.5s width\",\n    borderRadius: 2,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    border: \"2px solid transparent\",\n    boxSizing: \"border-box\",\n  },\n  text: {\n    fontSize: 12,\n    zIndex: 2,\n    position: \"relative\",\n    color: theme.palette.text.primary,\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n}));\n\nconst PercentageBar = (\n  props: PropsWithChildren<{ num: number; total: number }>,\n) => {\n  const { num, total } = props;\n  const classes = useStyle();\n  const per = Math.round((num / total) * 100);\n\n  return (\n    <div className={classes.container}>\n      <div\n        className={classes.displayBar}\n        style={{\n          width: `${Math.min(Math.max(0, 100 - per), 100)}%`,\n        }}\n      />\n      <div className={classes.text}>{props.children}</div>\n    </div>\n  );\n};\n\nexport default PercentageBar;\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { StatusChip } from \"./StatusChip\";\n\nconst StateCounter = ({\n  type,\n  list,\n}: {\n  type: string;\n  list: { state: string }[];\n}) => {\n  const stateMap = {} as { [state: string]: number };\n  list.forEach(({ state }) => {\n    stateMap[state] = stateMap[state] + 1 || 1;\n  });\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\">\n      <Grid item>\n        <StatusChip status=\"TOTAL\" type={type} suffix={`x ${list.length}`} />\n      </Grid>\n      {Object.entries(stateMap).map(([s, num]) => (\n        <Grid item>\n          <StatusChip status={s} type={type} suffix={` x ${num}`} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default StateCounter;\n","import {\n  Button,\n  Grid,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { KeyboardArrowDown, KeyboardArrowRight } from \"@material-ui/icons\";\nimport dayjs from \"dayjs\";\nimport React, {\n  PropsWithChildren,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { GlobalContext } from \"../App\";\nimport { Actor } from \"../type/actor\";\nimport { CoreWorkerStats, Worker } from \"../type/worker\";\nimport { memoryConverter } from \"../util/converter\";\nimport { longTextCut } from \"../util/func\";\n\nimport { useFilter } from \"../util/hook\";\nimport ActorTable from \"./ActorTable\";\nimport PercentageBar from \"./PercentageBar\";\nimport { SearchInput } from \"./SearchComponent\";\n\nexport const ExpandableTableRow = ({\n  children,\n  expandComponent,\n  length,\n  stateKey = \"\",\n  ...otherProps\n}: PropsWithChildren<{\n  expandComponent: ReactNode;\n  length: number;\n  stateKey?: string;\n}>) => {\n  const [isExpanded, setIsExpanded] = React.useState(false);\n\n  useEffect(() => {\n    if (stateKey.startsWith(\"ON\")) {\n      setIsExpanded(true);\n    } else if (stateKey.startsWith(\"OFF\")) {\n      setIsExpanded(false);\n    }\n  }, [stateKey]);\n\n  if (length < 1) {\n    return (\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\" />\n        {children}\n      </TableRow>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <TableRow {...otherProps}>\n        <TableCell padding=\"checkbox\">\n          <IconButton\n            style={{ color: \"inherit\" }}\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            {length}\n            {isExpanded ? <KeyboardArrowDown /> : <KeyboardArrowRight />}\n          </IconButton>\n        </TableCell>\n        {children}\n      </TableRow>\n      {isExpanded && (\n        <TableRow>\n          <TableCell colSpan={24}>{expandComponent}</TableCell>\n        </TableRow>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst WorkerDetailTable = ({\n  actorMap,\n  coreWorkerStats,\n}: {\n  actorMap: { [actorId: string]: Actor };\n  coreWorkerStats: CoreWorkerStats[];\n}) => {\n  const actors = {} as { [actorId: string]: Actor };\n  (coreWorkerStats || [])\n    .filter((e) => actorMap[e.actorId])\n    .forEach((e) => (actors[e.actorId] = actorMap[e.actorId]));\n\n  if (!Object.values(actors).length) {\n    return <p>The Worker Haven't Had Related Actor Yet.</p>;\n  }\n\n  return (\n    <TableContainer>\n      <ActorTable actors={actors} />\n    </TableContainer>\n  );\n};\n\nconst RayletWorkerTable = ({\n  workers = [],\n  actorMap,\n  mini,\n}: {\n  workers: Worker[];\n  actorMap: { [actorId: string]: Actor };\n  mini?: boolean;\n}) => {\n  const { changeFilter, filterFunc } = useFilter();\n  const [key, setKey] = useState(\"\");\n  const { nodeMap, ipLogMap } = useContext(GlobalContext);\n  const open = () => setKey(`ON${Math.random()}`);\n  const close = () => setKey(`OFF${Math.random()}`);\n\n  return (\n    <React.Fragment>\n      {!mini && (\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\n          <SearchInput\n            label=\"Pid\"\n            onChange={(value) => changeFilter(\"pid\", value)}\n          />\n          <Button onClick={open}>Expand All</Button>\n          <Button onClick={close}>Collapse All</Button>\n        </div>\n      )}{\" \"}\n      <Table>\n        <TableHead>\n          <TableRow>\n            {[\n              \"\",\n              \"Pid\",\n              \"CPU\",\n              \"CPU Times\",\n              \"Memory\",\n              \"CMD Line\",\n              \"Create Time\",\n              \"Log\",\n              \"Ops\",\n              \"IP/Hostname\",\n            ].map((col) => (\n              <TableCell align=\"center\" key={col}>\n                {col}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {workers\n            .filter(filterFunc)\n            .sort((aWorker, bWorker) => {\n              const a =\n                (aWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              const b =\n                (bWorker.coreWorkerStats || []).filter(\n                  (e) => actorMap[e.actorId],\n                ).length || 0;\n              return b - a;\n            })\n            .map(\n              ({\n                pid,\n                cpuPercent,\n                cpuTimes,\n                memoryInfo,\n                cmdline,\n                createTime,\n                coreWorkerStats = [],\n                language,\n                ip,\n                hostname,\n              }) => (\n                <ExpandableTableRow\n                  expandComponent={\n                    <WorkerDetailTable\n                      actorMap={actorMap}\n                      coreWorkerStats={coreWorkerStats}\n                    />\n                  }\n                  length={\n                    (coreWorkerStats || []).filter((e) => actorMap[e.actorId])\n                      .length\n                  }\n                  key={pid}\n                  stateKey={key}\n                >\n                  <TableCell align=\"center\">{pid}</TableCell>\n                  <TableCell align=\"center\">\n                    <PercentageBar num={Number(cpuPercent)} total={100}>\n                      {cpuPercent}%\n                    </PercentageBar>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(cpuTimes || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{val}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <div style={{ maxHeight: 55, overflow: \"auto\" }}>\n                      {Object.entries(memoryInfo || {}).map(([key, val]) => (\n                        <div style={{ margin: 4 }}>\n                          {key}:{memoryConverter(val)}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"center\" style={{ lineBreak: \"anywhere\" }}>\n                    {cmdline && longTextCut(cmdline.filter((e) => e).join(\" \"))}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {dayjs(createTime * 1000).format(\"YYYY/MM/DD HH:mm:ss\")}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    <Grid container spacing={2}>\n                      {ipLogMap[ip] && (\n                        <Grid item>\n                          <Link\n                            target=\"_blank\"\n                            to={`/log/${encodeURIComponent(\n                              ipLogMap[ip],\n                            )}?fileName=${\n                              coreWorkerStats[0].jobId || \"\"\n                            }-${pid}`}\n                          >\n                            Log\n                          </Link>\n                        </Grid>\n                      )}\n                    </Grid>\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {language === \"JAVA\" && (\n                      <div>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstack/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstack\n                        </Button>{\" \"}\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jmap/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jmap\n                        </Button>\n                        <Button\n                          onClick={() => {\n                            window.open(\n                              `#/cmd/jstat/${coreWorkerStats[0]?.ipAddress}/${pid}`,\n                            );\n                          }}\n                        >\n                          jstat\n                        </Button>\n                      </div>\n                    )}\n                  </TableCell>\n                  <TableCell align=\"center\">\n                    {ip}\n                    <br />\n                    {nodeMap[hostname] ? (\n                      <Link target=\"_blank\" to={`/node/${nodeMap[hostname]}`}>\n                        {hostname}\n                      </Link>\n                    ) : (\n                      hostname\n                    )}\n                  </TableCell>\n                </ExpandableTableRow>\n              ),\n            )}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n};\n\nexport default RayletWorkerTable;\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport ActorTable from \"../../components/ActorTable\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { getActors } from \"../../service/actor\";\nimport { Actor } from \"../../type/actor\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    width: \"100%\",\n  },\n}));\n\nconst Actors = () => {\n  const classes = useStyles();\n  const [actors, setActors] = useState<{ [actorId: string]: Actor }>({});\n\n  useEffect(() => {\n    getActors().then((res) => {\n      if (res?.data?.data?.actors) {\n        setActors(res.data.data.actors);\n      }\n    });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title=\"ACTORS\">\n        <ActorTable actors={actors} />\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default Actors;\n","import { Actor } from \"../type/actor\";\nimport { get } from \"./requestHandlers\";\n\nexport const getActors = () => {\n  return get<{\n    result: boolean;\n    message: string;\n    data: {\n      actors: {\n        [actorId: string]: Actor;\n      };\n    };\n  }>(\"logical/actors\");\n};\n"],"sourceRoot":""}