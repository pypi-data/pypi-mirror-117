# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NetworkConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_network': 'list[ClusterNetwork]',
        'machine_network': 'list[MachineNetwork]',
        'service_network': 'list[ServiceNetwork]'
    }

    attribute_map = {
        'cluster_network': 'cluster_network',
        'machine_network': 'machine_network',
        'service_network': 'service_network'
    }

    def __init__(self, cluster_network=None, machine_network=None, service_network=None):  # noqa: E501
        """NetworkConfiguration - a model defined in Swagger"""  # noqa: E501

        self._cluster_network = None
        self._machine_network = None
        self._service_network = None
        self.discriminator = None

        if cluster_network is not None:
            self.cluster_network = cluster_network
        if machine_network is not None:
            self.machine_network = machine_network
        if service_network is not None:
            self.service_network = service_network

    @property
    def cluster_network(self):
        """Gets the cluster_network of this NetworkConfiguration.  # noqa: E501


        :return: The cluster_network of this NetworkConfiguration.  # noqa: E501
        :rtype: list[ClusterNetwork]
        """
        return self._cluster_network

    @cluster_network.setter
    def cluster_network(self, cluster_network):
        """Sets the cluster_network of this NetworkConfiguration.


        :param cluster_network: The cluster_network of this NetworkConfiguration.  # noqa: E501
        :type: list[ClusterNetwork]
        """

        self._cluster_network = cluster_network

    @property
    def machine_network(self):
        """Gets the machine_network of this NetworkConfiguration.  # noqa: E501


        :return: The machine_network of this NetworkConfiguration.  # noqa: E501
        :rtype: list[MachineNetwork]
        """
        return self._machine_network

    @machine_network.setter
    def machine_network(self, machine_network):
        """Sets the machine_network of this NetworkConfiguration.


        :param machine_network: The machine_network of this NetworkConfiguration.  # noqa: E501
        :type: list[MachineNetwork]
        """

        self._machine_network = machine_network

    @property
    def service_network(self):
        """Gets the service_network of this NetworkConfiguration.  # noqa: E501


        :return: The service_network of this NetworkConfiguration.  # noqa: E501
        :rtype: list[ServiceNetwork]
        """
        return self._service_network

    @service_network.setter
    def service_network(self, service_network):
        """Sets the service_network of this NetworkConfiguration.


        :param service_network: The service_network of this NetworkConfiguration.  # noqa: E501
        :type: list[ServiceNetwork]
        """

        self._service_network = service_network

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
