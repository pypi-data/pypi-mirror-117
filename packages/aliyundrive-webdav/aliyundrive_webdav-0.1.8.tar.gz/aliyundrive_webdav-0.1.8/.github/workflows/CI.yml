on: [push, pull_request]

name: CI

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Use gnu-tar on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy_check:
    name: Clippy Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - run: rustup component add clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  openwrt:
    name: OpenWrt Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install build requirements
        run: |
          sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
          gettext git java-propose-classpath libelf-dev libncurses5-dev \
          libncursesw5-dev libssl-dev python python2.7-dev python3 unzip wget \
          python3-distutils python3-setuptools python3-dev rsync subversion \
          swig time xsltproc zlib1g-dev
      - name: Install OpenWrt SDK
        run: |
          wget -O openwrt-sdk.tar.xz https://downloads.openwrt.org/snapshots/targets/x86/64/openwrt-sdk-x86-64_gcc-10.3.0_musl.Linux-x86_64.tar.xz
          xz -q -d openwrt-sdk.tar.xz && tar -xvf openwrt-sdk.tar
          mv -f openwrt-sdk-* openwrt-sdk
      - name: Build Package
        run: |
          mkdir -p openwrt-sdk/package/aliyundrive-webdav
          cp -r openwrt/* openwrt-sdk/package/aliyundrive-webdav/
          make -C openwrt-sdk defconfig

          echo 'CONFIG_PACKAGE_aliyundrive-webdav=y' >> openwrt-sdk/.config
          cd openwrt-sdk
          make package/aliyundrive-webdav/compile V=s
      - name: Archive package
        uses: actions/upload-artifact@v1
        with:
          name: openwrt-packages
          path: openwrt-sdk/bin/packages
