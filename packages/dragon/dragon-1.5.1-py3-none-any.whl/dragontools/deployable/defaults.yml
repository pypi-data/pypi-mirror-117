---
# Special thanks to uroboro for suggesting this
# Configurations here should provide enough default variables to create the specified module;
# Please reach out to _kritanta if you need advice on extending these
Defaults:
  proj_build_dir: .dragon
  builddir: $proj_build_dir/build
  objdir: $proj_build_dir/obj
  signdir: $proj_build_dir/sign
  bridging-header: $name-Bridging-Header.h
  dragondir: $$DRAGONDIR
  toolchain-prefix: arm64-apple-darwin14-
  tool-prefix: ''
  cc: clang
  cxx: clang++
  ld: clang++
  nopack: No
  codesign: ldid
  dsym: dsymutil
  plutil: plutil
  swift: swift
  lipo: lipo
  logos: $dragondir/src/logos/bin/logos.pl
  cargo: cargo
  cargo-nightly: 'cargo +nightly'
  optool: $dragondir/bin/optool
  stage:
    - 'true'
  wild_recurse: No
  warnings: -Wall
  optim: "0"
  debug: -fcolor-diagnostics
  idflag: ''
  entflag: '-S'
  entfile: ''
  resource_dir: 'Resources'
  fw_dirs:
    - $dragondir/sdks/iPhoneOS.sdk/System/Library/PrivateFrameworks/
    - $dragondir/frameworks
  lib_dirs:
    - $dragondir/lib
    - '.'
  additional_lib_dirs:
  additional_fw_dirs:
  cinclude: '-I$dragondir/include -I$dragondir/vendor/include -I$dragondir/include/_fallback -I$DRAGONDIR/headers/ -I$pwd'
  stagedir: '_'
  modulesinternal: '-fmodules -fcxx-modules -fmodule-name=$name -fbuild-session-file=$proj_build_dir/modules/ -fmodules-validate-once-per-build-session -fmodules-prune-after=345600 -fmodules-prune-interval=86400'

# Touching these without a firm grasp of what you're doing is likely to break things
# They serve to abstract how we slap together all of the clang args
InternalDefaults:
  internalcflags: '$cinclude $debug $fwSearch $cflags $btarg -O$optim  $targetprefix$targetvers $sysroot $header_includes $arc $triple $theosshim $macros $warnings $modulesinternal'
  internalswiftflags: '-color-diagnostics -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk -L/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos -g -L/usr/lib/swift -swift-version 5 -module-name $name'
  internalfflags: '$internalcflags $typeldflags $frameworks $libs $libflags $lopts $libSearch $ldflags $libs'
  internalldflags: '$internalcflags $typeldflags $frameworks $libs $libflags $lopts $libSearch $ldflags $libs'
  internalsigntarget: '$signdir/$build_target_file.unsigned'
  internalsymtarget: '$signdir/$build_target_file.unsym'
  internallibflags: '-lobjc -lc++'
  pwd: '.'
Targets:
  sim:
    all:
      targetos: iphonesimulator
      triple: MACHINE
      arc: yes
      fw_dirs:                                                         
        - /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk                                                                                  
        - $dragondir/frameworks 
      sysroot: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk
      archs:
        - MACHINE
  ios:
    all:
      targetos: iphoneos
      targetvers: 10.0
      triple: arm64-apple-ios$targetvers
      targetprefix: -miphoneos-version-min=
      arc: yes
      sysroot: $dragondir/sdks/iPhoneOS.sdk
      archs:
        - armv7
        - arm64
        - arm64e
  watchos:
    all:
      targetos: watchos
      targetvers: 5.0
      arc: yes
      sysroot: $dragondir/sdks/WatchOS.sdk
      archs: arm64_32
  host:
    all:
      triple: MACHINE
      archs:
        - MACHINE
Types:
  comprehensive:
  app:
    required_states:
      - has_build_files
    variables:
      install_location: '/Applications/'
      target: '$proj_build_dir/$stagedir/$location/$name.app/$name'
  application:
    required_states:
      - has_build_files
    variables:
      install_location: '/Applications/'
      target: '$proj_build_dir/$stagedir/$location/$name.app/$name'
  tweak-jailed:
    required_states:
      - has_build_files
    variables:
      install_location: '/Applications/'
      target: '$proj_build_dir/$stagedir/$location/$name.app/$name'
      loader: DragonLoad
      embed-libs:
        - CydiaSubstrate
  tweak:
    required_states:
      - has_build_files
    production:
      deb:
        - 'build-files'
        - 'copy-to-target'
    production_allow:
      - deb
    variables:
      install_location: '/Library/MobileSubstrate/DynamicLibraries/'
      build_target_file: '$proj_build_dir/$stagedir/$location$name.dylib'
      hooker-priority: libhooker
      lang: logos
      lopts: '-dynamiclib -ggdb -Xlinker -segalign -Xlinker 4000 -framework CydiaSubstrate'
      frameworks:  
        - UIKit
        - Foundation
      stage2:
        - 'cp $name.plist $proj_build_dir/_/Library/MobileSubstrate/DynamicLibraries/$name.plist 2>/dev/null  || python3 -m dragontools.bfilter $proj_build_dir/DragonMake $name > $proj_build_dir/_/Library/MobileSubstrate/DynamicLibraries/$name.plist'
  prefs:
    required_states:
      - has_build_files
    production_allow:
      - deb
    variables:
      install_location: '/Library/PreferenceBundles/$name.bundle'
      build_target_file: '$proj_build_dir/$stagedir$location/$name'
      libs:
        - 'substrate'
      lopts: '-dynamiclib -ggdb -Xlinker -segalign -Xlinker 4000 -framework Preferences'
      frameworks:
        - UIKit
        - Foundation
      stage2:
        - 'mkdir -p .dragon/_/Library/PreferenceLoader/Preferences/'
        - 'cp entry.plist .dragon/_/Library/PreferenceLoader/Preferences/$name.plist'
        - 'cp -R Resources/ $proj_build_dir/$stagedir/$location'
  bundle:
    required_states:
      - has_build_files
    production_allow:
      - deb
    variables:
      install_location: '/Library/$name/'
      build_target_file: '$proj_build_dir/$stagedir/$location/$name.bundle/$name'
      lopts: '-dynamiclib -ggdb -Xlinker -segalign -Xlinker 4000'
      frameworks:
        - UIKit
        - Foundation
      stage2:
        - 'cp -R Resources/ $proj_build_dir/$stagedir/$location/$name.bundle/'

  framework:
    required_states:
      - has_build_files
    production_allow:
      - deb
    variables:
      install_location: '/Library/Frameworks/$name.framework'
      build_target_file: '$proj_build_dir/$stagedir/$location/$name'
      lopts: '-dynamiclib -ggdb -Xlinker -segalign -Xlinker 4000'
      frameworks:
        - Foundation
      stage2:
        - 'cp -R Resources/ $proj_build_dir/$stagedir/$location'
        - 'cp -R $proj_build_dir/$stagedir$location $$DRAGONDIR/frameworks/$name.framework'
        - 'if [ ! -z "$public_headers" ]; then
           mkdir -p $proj_build_dir/$stagedir/$location/Headers;
           cp $public_headers $proj_build_dir/$stagedir/$location/Headers;
           fi'
  resource-bundle:
    required_states:
    production_allow:
      - deb
    variables:
      install_location: '/Library/$name/$name.bundle/'
      build_target_file: 'build.ninja'
      libs:
        - 'substrate'
      lopts: '-dynamiclib -ggdb -Xlinker -segalign -Xlinker 4000'
      frameworks:
        - UIKit
        - Foundation
      stage2:
        - 'true;'
  stage:
    variables:
      build_target_file: 'build.ninja'
      stage2:
        - 'true;'
  library:
    required_states:
      - has_build_files
    production_allow:
      - deb
      - raw
    variables:
      install_location: 'usr/lib'
      build_target_file: '$proj_build_dir/$stagedir/$location/$name.dylib'
      ldflags: '-install_name $location$name.dylib'
      lopts: '-dynamiclib -ggdb -Xlinker -segalign -Xlinker 4000'
      stage2:
        - 'true;'
  cli:
    required_states:
      - has_build_files
    production_allow:
      - deb
      - raw
    variables:
      install_location: '/usr/bin'
      build_target_file: '$proj_build_dir/$stagedir/$location/$name'
      stage2:
        - 'true;'
  tool:
    required_states:
      - has_build_files
    production_allow:
      - deb
      - raw
    variables:
      install_location: '/usr/bin'
      lopts: ''
      build_target_file: '$proj_build_dir/$stagedir/$location/$name'
      stage2:
        - 'true;'
  static:
    required_states:
      - has_build_files
    production_allow:
      - deb
      - raw
    variables:
      install_location: '/usr/lib'
      lopts: ''
      build_target_file: '$proj_build_dir/$stagedir/$location/$name.a'
      stage2:
        - 'true;'
  raw:
