# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['puck_me',
 'puck_me.game',
 'puck_me.goalie',
 'puck_me.lib',
 'puck_me.player',
 'puck_me.skater']

package_data = \
{'': ['*']}

install_requires = \
['beautifulsoup4>=4.9.3,<5.0.0',
 'html5lib>=1.1,<2.0',
 'lxml>=4.6.3,<5.0.0',
 'pandas>=1.3.1,<2.0.0',
 'requests>=2.26.0,<3.0.0']

setup_kwargs = {
    'name': 'puck-me',
    'version': '0.3.0',
    'description': 'Puck Me is a python package for scraping NHL stats from the internet.',
    'long_description': '# Puck Me\n\nPuck Me is a python package for scraping NHL stats from the internet.\n\n---\n\n### Basic Usage\n\n```\nfrom puck_me.players import Players\n\nyear = "2020"\n\nskaters = Players.all_skaters(year)\ngoalies = Players.all_goalies(year)\n\n# Print name of first three skaters\nfor skater in skaters[:3]:\n    print(skater.name)\n\n# Print name of first three goalies\nfor goalie in goalies[:3]:\n    print(goalie.name)\n```\n\nOutput:\n\n```\n>>> Justin Abdelkader\n>>> Pontus Aberg\n>>> Vitaly Abramov\n>>> Jake Allen\n>>> Frederik Andersen\n>>> Craig Anderson\n```\n\n---\n\n## Skater\n\n#### Name\n\n`skater.name` -> `str`\n\n#### Games Played\n\n`skater.games_played()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Goals\n\n`skater.goals()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Assists\n\n`skater.assists()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Points\n\n`skater.points()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Plus Minus\n\n`skater.plus_minus()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Penalty Minutes\n\n`skater.penalty_minutes()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Even-Strength Goals\n\n`skater.goals_even_strength()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Power-Play Goals\n\n`skater.goals_power_play()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Short-Handed Goals\n\n`skater.goals_short_handed()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Game Winning Goals\n\n`skater.goals_game_winning()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Shots\n\n`skater.shots()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Shooting Percentage\n\n`skater.shooting_percentage()` -> `float`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Shifts\n\n`skater.shifts()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Average Time On Ice\n\n`skater.time_on_ice_per_game()` -> `str`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Total Time On Ice\n\n`skater.time_on_ice_total()` -> `str`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Game Log\n\n`skater.gamelog()` -> `list[SkaterGame]`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\nBasic Usage:\n\n```\nfrom puck_me.players import Players\n\nyear = "2020"\nskaters = Players.all_skaters(year)\ncrosby = list(filter(lambda s: s.name == "Sidney Crosby", skaters))[0]\n\nfor game in crosby.gamelog()[:5]:\n    print(\n        f"On {game.date} at arena \'{game.arena}\' {crosby.name} scored {game.points} points."\n    )\n```\n\nOutput:\n\n```\n>>> On 2019-10-03 at arena \'Home\' Sidney Crosby scored 1 points.\n>>> On 2019-10-05 at arena \'Home\' Sidney Crosby scored 2 points.\n>>> On 2019-10-08 at arena \'Home\' Sidney Crosby scored 1 points.\n>>> On 2019-10-10 at arena \'Home\' Sidney Crosby scored 2 points.\n>>> On 2019-10-12 at arena \'Away\' Sidney Crosby scored 2 points.\n```\n\n#### Playoff Game Log\n\n`skater.gamelog_playoffs()` -> `list[SkaterGame]`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Regular Season Game Log\n\n`skater.gamelog_regular_season()` -> `list[SkaterGame]`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Split Data\n\n`skater.splits()` -> `list[SkaterSplit]`\n\nparams:\n\n- `required: split_type` | `see SplitType`\n- `optional: year` | `example: "2009"`\n\nBasic Usage:\n\n```\nfrom puck_me.players import Players\nfrom puck_me.lib.split_types import SplitType\n\nyear = "2020"\nskaters = Players.all_skaters(year)\ncrosby = list(filter(lambda s: s.name == "Sidney Crosby", skaters))[0]\n\nfor division_split in crosby.splits(SplitType.DIVISION):\n    print(\n        f"Against the {division_split.value} division {crosby.name} scored {division_split.goals} goals."\n    )\n```\n\nOutput:\n\n```\n>>> Against the Atlantic division Sidney Crosby scored 7 goals.\n>>> Against the Metropolitan division Sidney Crosby scored 4 goals.\n>>> Against the Central division Sidney Crosby scored 4 goals.\n>>> Against the Pacific division Sidney Crosby scored 1 goals.\n```\n\n---\n\n## SkaterGame\n\n#### Date\n\n`game.date` -> `str`\n\n#### Age\n\n`game.age` -> `str`\n\n#### Team\n\n`game.team` -> `str`\n\n#### Arena\n\n`game.arena` -> `str`\n\n#### Opponent\n\n`game.opponent` -> `str`\n\n#### Result\n\n`game.result` -> `str`\n\n#### Game Won\n\n`game.is_win` -> `bool`\n\n#### Penalty Minutes\n\n`game.pim` -> `int`\n\n#### Time On Ice\n\n`game.time_on_ice` -> `str`\n\n#### Goals\n\n`game.goals` -> `int`\n\n#### Power Play Goals\n\n`game.goals_pp` -> `int`\n\n#### Even Strength Goals\n\n`game.goals_ev` -> `int`\n\n#### Short Handed Goals\n\n`game.goals_sh` -> `int`\n\n#### Game Winning Goals\n\n`game.goals_gw` -> `int`\n\n#### Assists\n\n`game.assists` -> `int`\n\n#### Even Strength Assists\n\n`game.assists_ev` -> `int`\n\n#### Power Play Assists\n\n`game.assists_pp` -> `int`\n\n#### Short Handed Assists\n\n`game.assists_sh` -> `int`\n\n#### Points\n\n`game.points` -> `int`\n\n#### Plus Minus\n\n`game.plus_minus` -> `int`\n\n#### Shots\n\n`game.shots` -> `int`\n\n#### Shot Percentage\n\n`game.shot_pct` -> `float`\n\n#### Shifts\n\n`game.shifts` -> `int`\n\n#### Hits\n\n`game.hits` -> `int`\n\n#### Blocks\n\n`game.blocks` -> `int`\n\n#### Face-Off Wins\n\n`game.faceoff_wins` -> `int`\n\n#### Face-Off Losses\n\n`game.faceoff_loss` -> `int`\n\n#### Face-Off Percentage\n\n`game.faceoff_pct` -> `float`\n\n---\n\n## SkaterSplit\n\n#### Value\n\n`split.value` -> `str`\n\n#### Games Played\n\n`split.games_played` -> `int`\n\n#### Goals\n\n`split.goals` -> `int`\n\n#### Assists\n\n`split.assists` -> `int`\n\n#### Points\n\n`split.points` -> `int`\n\n#### Plus Minus\n\n`split.plus_minus` -> `int`\n\n#### Penalty Minutes\n\n`split.penalty_minutes` -> `int`\n\n#### Even Strength Goals\n\n`split.goals_ev` -> `int`\n\n#### Power Play Goals\n\n`split.goals_pp` -> `int`\n\n#### Short Handed Goals\n\n`split.goals_sh` -> `int`\n\n#### Game Winning Goals\n\n`split.goals_gw` -> `int`\n\n#### Shots\n\n`split.shots` -> `int`\n\n#### Shooting Percentage\n\n`split.shooting_pct` -> `float`\n\n#### Shifts\n\n`split.shifts` -> `int`\n\n#### Total Time On Ice\n\n`split.time_on_ice_total` -> `str`\n\n#### Average Time On Ice\n\n`split.time_on_ice_average` -> `str`\n\n---\n\n## Goalie\n\n#### Name\n\n`goalie.name` -> `str`\n\n#### Games Played\n\n`goalie.games_played()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Wins\n\n`goalie.wins()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Losses\n\n`goalie.losses()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Tie Losses\n\n`goalie.tie_losses()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Goals Against\n\n`goalie.goals_against()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Shots Faced\n\n`goalie.shots_faced()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Saves\n\n`goalie.save_percent()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Goals Against Average\n\n`goalie.goals_against_avg()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Shutouts\n\n`goalie.shutouts()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Penalty Minutes\n\n`goalie.penalty_mins()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Time On Ice\n\n`goalie.time_on_ice()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Even Strength Goals Against\n\n`goalie.goals_against_ev()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Power Play Goals Against\n\n`goalie.goals_against_pp()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Short Handed Goals Against\n\n`goalie.goals_against_sh()` -> `int`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Game Log\n\n`goalie.gamelog()` -> `list[GoalieGame]`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\nBasic Usage:\n\n```\nfrom puck_me.players import Players\n\nyear = "2020"\ngoalies = Players.all_goalies(year)\nlundqvist = list(filter(lambda g: g.name == "Henrik Lundqvist", goalies))[0]\n\nfor game in lundqvist.gamelog()[:5]:\n    print(\n        f"On {game.date} at arena \'{game.arena}\' {lundqvist.name} made {game.saves} saves."\n    )\n```\n\nOutput:\n\n```\n>>> On 2019-10-03 at arena \'Home\' Henrik Lundqvist made 43 saves.\n>>> On 2019-10-12 at arena \'Home\' Henrik Lundqvist made 23 saves.\n>>> On 2019-10-18 at arena \'Away\' Henrik Lundqvist made 29 saves.\n>>> On 2019-10-20 at arena \'Home\' Henrik Lundqvist made 40 saves.\n>>> On 2019-10-24 at arena \'Home\' Henrik Lundqvist made 31 saves.\n```\n\n#### Playoff Game Log\n\n`goalie.gamelog_playoffs()` -> `list[GoalieGame]`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Regular Season Game Log\n\n`goalie.gamelog_regular_season()` -> `list[GoalieGame]`\n\nparams:\n\n- `optional: year` | `example: "2009"`\n\n#### Split Data\n\n`goalie.splits()` -> `list[GoalieSplit]`\n\nparams:\n\n- `required: split_type` | `see SplitType`\n- `optional: year` | `example: "2009"`\n\nBasic Usage:\n\n```\nfrom puck_me.players import Players\nfrom puck_me.lib.split_types import SplitType\n\nyear = "2020"\ngoalies = Players.all_goalies(year)\nlundqvist = list(filter(lambda g: g.name == "Henrik Lundqvist", goalies))[0]\n\nfor division_split in lundqvist.splits(SplitType.DIVISION):\n    print(\n        f"Against the {division_split.value} division {crosby.name} scored {division_split.goals} goals."\n    )\n```\n\nOutput:\n\n```\n>>> Against the Atlantic division Henrik Lundqvist made 256 saves.\n>>> Against the Metropolitan division Henrik Lundqvist made 235 saves.\n>>> Against the Central division Henrik Lundqvist made 105 saves.\n>>> Against the Pacific division Henrik Lundqvist made 203 saves.\n```\n\n---\n\n## GoalieGame\n\n#### Date\n\n`game.date` -> `str`\n\n#### Age\n\n`game.age` -> `str`\n\n#### Team\n\n`game.team` -> `str`\n\n#### Arena\n\n`game.arena` -> `str`\n\n#### Opponent\n\n`game.opponent` -> `str`\n\n#### Result\n\n`game.result` -> `str`\n\n#### Game Won\n\n`game.is_win` -> `bool`\n\n#### Penalty Minutes\n\n`game.pim` -> `int`\n\n#### Time On Ice\n\n`game.time_on_ice` -> `str`\n\n#### Decision\n\n`game.decision` -> `str`\n\n#### Goals Against\n\n`game.goals_against` -> `int`\n\n#### Shots Against\n\n`game.shots_against` -> `int`\n\n#### Saves\n\n`game.saves` -> `int`\n\n#### Save Pct\n\n`game.save_pct` -> `int`\n\n#### Shutouts\n\n`game.shutouts` -> `int`\n\n---\n\n## GoalieSplit\n\n#### Value\n\n`split.value` -> `str`\n\n#### Games Played\n\n`split.games_played` -> `int`\n\n#### Wins\n\n`split.wins` -> `int`\n\n#### Losses\n\n`split.losses` -> `int`\n\n#### Tie Losses\n\n`split.tie_losses` -> `int`\n\n#### Goals Against\n\n`split.goals_against` -> `int`\n\n#### Shots Faced\n\n`split.shots_faced` -> `int`\n\n#### Saves\n\n`split.saves` -> `int`\n\n#### Save Percent\n\n`split.save_percent` -> `float`\n\n#### Average Goals Against\n\n`split.goals_against_avg` -> `float`\n\n#### Shutouts\n\n`split.shutouts` -> `int`\n\n#### Penalty Minutes\n\n`split.penalty_mins` -> `int`\n\n#### Time On Ice\n\n`split.time_on_ice` -> `str`\n\n#### Even Strength Goals Against\n\n`split.goals_against_ev` -> `int`\n\n#### Power Play Goals Against\n\n`split.goals_against_pp` -> `int`\n\n#### Short Handed Goals Against\n\n`split.goals_against_sh` -> `int`\n\n---\n\n## SplitType\n\nSplit type is an enum.\n\n#### Values\n\n`SplitType.SEASON`\n\n`SplitType.ARENA`\n\n`SplitType.ALL_STAR` (for splitting before and after All-Star break)\n\n`SplitType.RESULT`\n\n`SplitType.MONTH`\n\n`SplitType.CONFERENCE`\n\n`SplitType.DIVISION`\n\n`SplitType.OPPONENT`\n',
    'author': 'Nathan',
    'author_email': 'nathansaccon10@hotmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/nsaccon/hockey_ref_scraper',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
