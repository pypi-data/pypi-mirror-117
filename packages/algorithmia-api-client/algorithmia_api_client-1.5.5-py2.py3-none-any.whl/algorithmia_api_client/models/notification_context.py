# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class NotificationContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'algorithm_id': 'str',
        'username': 'str',
        'algoname': 'str',
        'semantic_version': 'int'
    }

    attribute_map = {
        'algorithm_id': 'algorithm_id',
        'username': 'username',
        'algoname': 'algoname',
        'semantic_version': 'semantic_version'
    }

    def __init__(self, algorithm_id=None, username=None, algoname=None, semantic_version=None, local_vars_configuration=None):  # noqa: E501
        """NotificationContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._algorithm_id = None
        self._username = None
        self._algoname = None
        self._semantic_version = None
        self.discriminator = None

        self.algorithm_id = algorithm_id
        self.username = username
        self.algoname = algoname
        if semantic_version is not None:
            self.semantic_version = semantic_version

    @property
    def algorithm_id(self):
        """Gets the algorithm_id of this NotificationContext.  # noqa: E501


        :return: The algorithm_id of this NotificationContext.  # noqa: E501
        :rtype: str
        """
        return self._algorithm_id

    @algorithm_id.setter
    def algorithm_id(self, algorithm_id):
        """Sets the algorithm_id of this NotificationContext.


        :param algorithm_id: The algorithm_id of this NotificationContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algorithm_id is None:  # noqa: E501
            raise ValueError("Invalid value for `algorithm_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                algorithm_id is not None and len(algorithm_id) > 100):
            raise ValueError("Invalid value for `algorithm_id`, length must be less than or equal to `100`")  # noqa: E501

        self._algorithm_id = algorithm_id

    @property
    def username(self):
        """Gets the username of this NotificationContext.  # noqa: E501


        :return: The username of this NotificationContext.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NotificationContext.


        :param username: The username of this NotificationContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def algoname(self):
        """Gets the algoname of this NotificationContext.  # noqa: E501


        :return: The algoname of this NotificationContext.  # noqa: E501
        :rtype: str
        """
        return self._algoname

    @algoname.setter
    def algoname(self, algoname):
        """Sets the algoname of this NotificationContext.


        :param algoname: The algoname of this NotificationContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algoname is None:  # noqa: E501
            raise ValueError("Invalid value for `algoname`, must not be `None`")  # noqa: E501

        self._algoname = algoname

    @property
    def semantic_version(self):
        """Gets the semantic_version of this NotificationContext.  # noqa: E501


        :return: The semantic_version of this NotificationContext.  # noqa: E501
        :rtype: int
        """
        return self._semantic_version

    @semantic_version.setter
    def semantic_version(self, semantic_version):
        """Sets the semantic_version of this NotificationContext.


        :param semantic_version: The semantic_version of this NotificationContext.  # noqa: E501
        :type: int
        """

        self._semantic_version = semantic_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotificationContext):
            return True

        return self.to_dict() != other.to_dict()
