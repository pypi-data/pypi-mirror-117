# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class SASConnectorCredential(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storage_uri': 'str',
        'sas_token': 'str',
        'container_name': 'str'
    }

    attribute_map = {
        'storage_uri': 'storage_uri',
        'sas_token': 'sas_token',
        'container_name': 'container_name'
    }

    def __init__(self, storage_uri=None, sas_token=None, container_name=None, local_vars_configuration=None):  # noqa: E501
        """SASConnectorCredential - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._storage_uri = None
        self._sas_token = None
        self._container_name = None
        self.discriminator = None

        self.storage_uri = storage_uri
        self.sas_token = sas_token
        self.container_name = container_name

    @property
    def storage_uri(self):
        """Gets the storage_uri of this SASConnectorCredential.  # noqa: E501


        :return: The storage_uri of this SASConnectorCredential.  # noqa: E501
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this SASConnectorCredential.


        :param storage_uri: The storage_uri of this SASConnectorCredential.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and storage_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `storage_uri`, must not be `None`")  # noqa: E501

        self._storage_uri = storage_uri

    @property
    def sas_token(self):
        """Gets the sas_token of this SASConnectorCredential.  # noqa: E501


        :return: The sas_token of this SASConnectorCredential.  # noqa: E501
        :rtype: str
        """
        return self._sas_token

    @sas_token.setter
    def sas_token(self, sas_token):
        """Sets the sas_token of this SASConnectorCredential.


        :param sas_token: The sas_token of this SASConnectorCredential.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and sas_token is None:  # noqa: E501
            raise ValueError("Invalid value for `sas_token`, must not be `None`")  # noqa: E501

        self._sas_token = sas_token

    @property
    def container_name(self):
        """Gets the container_name of this SASConnectorCredential.  # noqa: E501


        :return: The container_name of this SASConnectorCredential.  # noqa: E501
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this SASConnectorCredential.


        :param container_name: The container_name of this SASConnectorCredential.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and container_name is None:  # noqa: E501
            raise ValueError("Invalid value for `container_name`, must not be `None`")  # noqa: E501

        self._container_name = container_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SASConnectorCredential):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SASConnectorCredential):
            return True

        return self.to_dict() != other.to_dict()
