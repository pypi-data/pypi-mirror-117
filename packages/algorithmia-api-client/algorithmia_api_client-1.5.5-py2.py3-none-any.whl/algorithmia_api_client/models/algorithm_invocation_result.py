# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class AlgorithmInvocationResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_async': 'bool',
        'request_id': 'str',
        'error': 'AlgorithmSynchronousInvocationResultError',
        'metadata': 'AlgorithmSynchronousInvocationResultMetadata',
        'result': 'AlgorithmSynchronousInvocationResultOneOf'
    }

    attribute_map = {
        '_async': 'async',
        'request_id': 'request_id',
        'error': 'error',
        'metadata': 'metadata',
        'result': 'result'
    }

    def __init__(self, _async=None, request_id=None, error=None, metadata=None, result=None, local_vars_configuration=None):  # noqa: E501
        """AlgorithmInvocationResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__async = None
        self._request_id = None
        self._error = None
        self._metadata = None
        self._result = None
        self.discriminator = None

        self._async = _async
        self.request_id = request_id
        if error is not None:
            self.error = error
        if metadata is not None:
            self.metadata = metadata
        if result is not None:
            self.result = result

    @property
    def _async(self):
        """Gets the _async of this AlgorithmInvocationResult.  # noqa: E501


        :return: The _async of this AlgorithmInvocationResult.  # noqa: E501
        :rtype: bool
        """
        return self.__async

    @_async.setter
    def _async(self, _async):
        """Sets the _async of this AlgorithmInvocationResult.


        :param _async: The _async of this AlgorithmInvocationResult.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and _async is None:  # noqa: E501
            raise ValueError("Invalid value for `_async`, must not be `None`")  # noqa: E501

        self.__async = _async

    @property
    def request_id(self):
        """Gets the request_id of this AlgorithmInvocationResult.  # noqa: E501


        :return: The request_id of this AlgorithmInvocationResult.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AlgorithmInvocationResult.


        :param request_id: The request_id of this AlgorithmInvocationResult.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and request_id is None:  # noqa: E501
            raise ValueError("Invalid value for `request_id`, must not be `None`")  # noqa: E501

        self._request_id = request_id

    @property
    def error(self):
        """Gets the error of this AlgorithmInvocationResult.  # noqa: E501


        :return: The error of this AlgorithmInvocationResult.  # noqa: E501
        :rtype: AlgorithmSynchronousInvocationResultError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this AlgorithmInvocationResult.


        :param error: The error of this AlgorithmInvocationResult.  # noqa: E501
        :type: AlgorithmSynchronousInvocationResultError
        """

        self._error = error

    @property
    def metadata(self):
        """Gets the metadata of this AlgorithmInvocationResult.  # noqa: E501


        :return: The metadata of this AlgorithmInvocationResult.  # noqa: E501
        :rtype: AlgorithmSynchronousInvocationResultMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AlgorithmInvocationResult.


        :param metadata: The metadata of this AlgorithmInvocationResult.  # noqa: E501
        :type: AlgorithmSynchronousInvocationResultMetadata
        """

        self._metadata = metadata

    @property
    def result(self):
        """Gets the result of this AlgorithmInvocationResult.  # noqa: E501


        :return: The result of this AlgorithmInvocationResult.  # noqa: E501
        :rtype: AlgorithmSynchronousInvocationResultOneOf
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AlgorithmInvocationResult.


        :param result: The result of this AlgorithmInvocationResult.  # noqa: E501
        :type: AlgorithmSynchronousInvocationResultOneOf
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlgorithmInvocationResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlgorithmInvocationResult):
            return True

        return self.to_dict() != other.to_dict()
