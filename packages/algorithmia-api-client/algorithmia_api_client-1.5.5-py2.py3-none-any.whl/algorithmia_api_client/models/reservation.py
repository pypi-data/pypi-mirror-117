# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class Reservation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reservation_id': 'str',
        'billable_to': 'str',
        'billable_to_uuid': 'str',
        'algoname': 'str',
        'username': 'str',
        'version_type': 'str',
        'num_slots': 'int',
        'algo_id': 'str',
        'algorithm_id': 'str',
        'version_hash': 'str'
    }

    attribute_map = {
        'reservation_id': 'reservation_id',
        'billable_to': 'billable_to',
        'billable_to_uuid': 'billable_to_uuid',
        'algoname': 'algoname',
        'username': 'username',
        'version_type': 'version_type',
        'num_slots': 'num_slots',
        'algo_id': 'algo_id',
        'algorithm_id': 'algorithm_id',
        'version_hash': 'version_hash'
    }

    def __init__(self, reservation_id=None, billable_to=None, billable_to_uuid=None, algoname=None, username=None, version_type=None, num_slots=None, algo_id=None, algorithm_id=None, version_hash=None, local_vars_configuration=None):  # noqa: E501
        """Reservation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reservation_id = None
        self._billable_to = None
        self._billable_to_uuid = None
        self._algoname = None
        self._username = None
        self._version_type = None
        self._num_slots = None
        self._algo_id = None
        self._algorithm_id = None
        self._version_hash = None
        self.discriminator = None

        self.reservation_id = reservation_id
        if billable_to is not None:
            self.billable_to = billable_to
        if billable_to_uuid is not None:
            self.billable_to_uuid = billable_to_uuid
        self.algoname = algoname
        self.username = username
        self.version_type = version_type
        self.num_slots = num_slots
        self.algo_id = algo_id
        self.algorithm_id = algorithm_id
        self.version_hash = version_hash

    @property
    def reservation_id(self):
        """Gets the reservation_id of this Reservation.  # noqa: E501


        :return: The reservation_id of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._reservation_id

    @reservation_id.setter
    def reservation_id(self, reservation_id):
        """Sets the reservation_id of this Reservation.


        :param reservation_id: The reservation_id of this Reservation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and reservation_id is None:  # noqa: E501
            raise ValueError("Invalid value for `reservation_id`, must not be `None`")  # noqa: E501

        self._reservation_id = reservation_id

    @property
    def billable_to(self):
        """Gets the billable_to of this Reservation.  # noqa: E501


        :return: The billable_to of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._billable_to

    @billable_to.setter
    def billable_to(self, billable_to):
        """Sets the billable_to of this Reservation.


        :param billable_to: The billable_to of this Reservation.  # noqa: E501
        :type: str
        """

        self._billable_to = billable_to

    @property
    def billable_to_uuid(self):
        """Gets the billable_to_uuid of this Reservation.  # noqa: E501


        :return: The billable_to_uuid of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._billable_to_uuid

    @billable_to_uuid.setter
    def billable_to_uuid(self, billable_to_uuid):
        """Sets the billable_to_uuid of this Reservation.


        :param billable_to_uuid: The billable_to_uuid of this Reservation.  # noqa: E501
        :type: str
        """

        self._billable_to_uuid = billable_to_uuid

    @property
    def algoname(self):
        """Gets the algoname of this Reservation.  # noqa: E501


        :return: The algoname of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._algoname

    @algoname.setter
    def algoname(self, algoname):
        """Sets the algoname of this Reservation.


        :param algoname: The algoname of this Reservation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algoname is None:  # noqa: E501
            raise ValueError("Invalid value for `algoname`, must not be `None`")  # noqa: E501

        self._algoname = algoname

    @property
    def username(self):
        """Gets the username of this Reservation.  # noqa: E501


        :return: The username of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Reservation.


        :param username: The username of this Reservation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def version_type(self):
        """Gets the version_type of this Reservation.  # noqa: E501


        :return: The version_type of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._version_type

    @version_type.setter
    def version_type(self, version_type):
        """Sets the version_type of this Reservation.


        :param version_type: The version_type of this Reservation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version_type is None:  # noqa: E501
            raise ValueError("Invalid value for `version_type`, must not be `None`")  # noqa: E501

        self._version_type = version_type

    @property
    def num_slots(self):
        """Gets the num_slots of this Reservation.  # noqa: E501


        :return: The num_slots of this Reservation.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this Reservation.


        :param num_slots: The num_slots of this Reservation.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_slots is None:  # noqa: E501
            raise ValueError("Invalid value for `num_slots`, must not be `None`")  # noqa: E501

        self._num_slots = num_slots

    @property
    def algo_id(self):
        """Gets the algo_id of this Reservation.  # noqa: E501


        :return: The algo_id of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._algo_id

    @algo_id.setter
    def algo_id(self, algo_id):
        """Sets the algo_id of this Reservation.


        :param algo_id: The algo_id of this Reservation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algo_id is None:  # noqa: E501
            raise ValueError("Invalid value for `algo_id`, must not be `None`")  # noqa: E501

        self._algo_id = algo_id

    @property
    def algorithm_id(self):
        """Gets the algorithm_id of this Reservation.  # noqa: E501


        :return: The algorithm_id of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._algorithm_id

    @algorithm_id.setter
    def algorithm_id(self, algorithm_id):
        """Sets the algorithm_id of this Reservation.


        :param algorithm_id: The algorithm_id of this Reservation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algorithm_id is None:  # noqa: E501
            raise ValueError("Invalid value for `algorithm_id`, must not be `None`")  # noqa: E501

        self._algorithm_id = algorithm_id

    @property
    def version_hash(self):
        """Gets the version_hash of this Reservation.  # noqa: E501


        :return: The version_hash of this Reservation.  # noqa: E501
        :rtype: str
        """
        return self._version_hash

    @version_hash.setter
    def version_hash(self, version_hash):
        """Sets the version_hash of this Reservation.


        :param version_hash: The version_hash of this Reservation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version_hash is None:  # noqa: E501
            raise ValueError("Invalid value for `version_hash`, must not be `None`")  # noqa: E501

        self._version_hash = version_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Reservation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Reservation):
            return True

        return self.to_dict() != other.to_dict()
