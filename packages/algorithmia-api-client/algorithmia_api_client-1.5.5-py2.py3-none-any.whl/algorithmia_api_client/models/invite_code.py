# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class InviteCode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'invite_code': 'str',
        'signup_credits': 'int',
        'comments': 'str',
        'expires_at': 'str',
        'created_at': 'str',
        'created_by': 'str'
    }

    attribute_map = {
        'invite_code': 'inviteCode',
        'signup_credits': 'signupCredits',
        'comments': 'comments',
        'expires_at': 'expiresAt',
        'created_at': 'createdAt',
        'created_by': 'createdBy'
    }

    def __init__(self, invite_code=None, signup_credits=None, comments=None, expires_at=None, created_at=None, created_by=None, local_vars_configuration=None):  # noqa: E501
        """InviteCode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._invite_code = None
        self._signup_credits = None
        self._comments = None
        self._expires_at = None
        self._created_at = None
        self._created_by = None
        self.discriminator = None

        if invite_code is not None:
            self.invite_code = invite_code
        if signup_credits is not None:
            self.signup_credits = signup_credits
        if comments is not None:
            self.comments = comments
        if expires_at is not None:
            self.expires_at = expires_at
        if created_at is not None:
            self.created_at = created_at
        if created_by is not None:
            self.created_by = created_by

    @property
    def invite_code(self):
        """Gets the invite_code of this InviteCode.  # noqa: E501


        :return: The invite_code of this InviteCode.  # noqa: E501
        :rtype: str
        """
        return self._invite_code

    @invite_code.setter
    def invite_code(self, invite_code):
        """Sets the invite_code of this InviteCode.


        :param invite_code: The invite_code of this InviteCode.  # noqa: E501
        :type: str
        """

        self._invite_code = invite_code

    @property
    def signup_credits(self):
        """Gets the signup_credits of this InviteCode.  # noqa: E501


        :return: The signup_credits of this InviteCode.  # noqa: E501
        :rtype: int
        """
        return self._signup_credits

    @signup_credits.setter
    def signup_credits(self, signup_credits):
        """Sets the signup_credits of this InviteCode.


        :param signup_credits: The signup_credits of this InviteCode.  # noqa: E501
        :type: int
        """

        self._signup_credits = signup_credits

    @property
    def comments(self):
        """Gets the comments of this InviteCode.  # noqa: E501


        :return: The comments of this InviteCode.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InviteCode.


        :param comments: The comments of this InviteCode.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def expires_at(self):
        """Gets the expires_at of this InviteCode.  # noqa: E501


        :return: The expires_at of this InviteCode.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this InviteCode.


        :param expires_at: The expires_at of this InviteCode.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    @property
    def created_at(self):
        """Gets the created_at of this InviteCode.  # noqa: E501


        :return: The created_at of this InviteCode.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InviteCode.


        :param created_at: The created_at of this InviteCode.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this InviteCode.  # noqa: E501


        :return: The created_by of this InviteCode.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this InviteCode.


        :param created_by: The created_by of this InviteCode.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InviteCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InviteCode):
            return True

        return self.to_dict() != other.to_dict()
