# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class SecretProviderRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'module_name': 'str',
        'factory_class_name': 'str',
        'interface_version': 'str',
        'configuration': 'SecretProviderRequestConfiguration',
        'is_enabled': 'bool',
        'is_default': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'module_name': 'moduleName',
        'factory_class_name': 'factoryClassName',
        'interface_version': 'interfaceVersion',
        'configuration': 'configuration',
        'is_enabled': 'isEnabled',
        'is_default': 'isDefault'
    }

    def __init__(self, name=None, description=None, module_name=None, factory_class_name=None, interface_version=None, configuration=None, is_enabled=None, is_default=None, local_vars_configuration=None):  # noqa: E501
        """SecretProviderRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._module_name = None
        self._factory_class_name = None
        self._interface_version = None
        self._configuration = None
        self._is_enabled = None
        self._is_default = None
        self.discriminator = None

        self.name = name
        self.description = description
        self.module_name = module_name
        self.factory_class_name = factory_class_name
        self.interface_version = interface_version
        if configuration is not None:
            self.configuration = configuration
        self.is_enabled = is_enabled
        self.is_default = is_default

    @property
    def name(self):
        """Gets the name of this SecretProviderRequest.  # noqa: E501


        :return: The name of this SecretProviderRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SecretProviderRequest.


        :param name: The name of this SecretProviderRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SecretProviderRequest.  # noqa: E501


        :return: The description of this SecretProviderRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SecretProviderRequest.


        :param description: The description of this SecretProviderRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def module_name(self):
        """Gets the module_name of this SecretProviderRequest.  # noqa: E501


        :return: The module_name of this SecretProviderRequest.  # noqa: E501
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """Sets the module_name of this SecretProviderRequest.


        :param module_name: The module_name of this SecretProviderRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and module_name is None:  # noqa: E501
            raise ValueError("Invalid value for `module_name`, must not be `None`")  # noqa: E501

        self._module_name = module_name

    @property
    def factory_class_name(self):
        """Gets the factory_class_name of this SecretProviderRequest.  # noqa: E501


        :return: The factory_class_name of this SecretProviderRequest.  # noqa: E501
        :rtype: str
        """
        return self._factory_class_name

    @factory_class_name.setter
    def factory_class_name(self, factory_class_name):
        """Sets the factory_class_name of this SecretProviderRequest.


        :param factory_class_name: The factory_class_name of this SecretProviderRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and factory_class_name is None:  # noqa: E501
            raise ValueError("Invalid value for `factory_class_name`, must not be `None`")  # noqa: E501

        self._factory_class_name = factory_class_name

    @property
    def interface_version(self):
        """Gets the interface_version of this SecretProviderRequest.  # noqa: E501


        :return: The interface_version of this SecretProviderRequest.  # noqa: E501
        :rtype: str
        """
        return self._interface_version

    @interface_version.setter
    def interface_version(self, interface_version):
        """Sets the interface_version of this SecretProviderRequest.


        :param interface_version: The interface_version of this SecretProviderRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and interface_version is None:  # noqa: E501
            raise ValueError("Invalid value for `interface_version`, must not be `None`")  # noqa: E501

        self._interface_version = interface_version

    @property
    def configuration(self):
        """Gets the configuration of this SecretProviderRequest.  # noqa: E501


        :return: The configuration of this SecretProviderRequest.  # noqa: E501
        :rtype: SecretProviderRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this SecretProviderRequest.


        :param configuration: The configuration of this SecretProviderRequest.  # noqa: E501
        :type: SecretProviderRequestConfiguration
        """

        self._configuration = configuration

    @property
    def is_enabled(self):
        """Gets the is_enabled of this SecretProviderRequest.  # noqa: E501


        :return: The is_enabled of this SecretProviderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this SecretProviderRequest.


        :param is_enabled: The is_enabled of this SecretProviderRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")  # noqa: E501

        self._is_enabled = is_enabled

    @property
    def is_default(self):
        """Gets the is_default of this SecretProviderRequest.  # noqa: E501


        :return: The is_default of this SecretProviderRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SecretProviderRequest.


        :param is_default: The is_default of this SecretProviderRequest.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_default is None:  # noqa: E501
            raise ValueError("Invalid value for `is_default`, must not be `None`")  # noqa: E501

        self._is_default = is_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecretProviderRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SecretProviderRequest):
            return True

        return self.to_dict() != other.to_dict()
