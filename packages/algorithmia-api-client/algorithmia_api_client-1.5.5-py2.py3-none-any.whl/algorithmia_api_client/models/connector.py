# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class Connector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'label': 'str',
        'protocol': 'str',
        'is_default': 'bool',
        'cred_data': 'str',
        'cred_type': 'str',
        'path': 'str',
        'writeable': 'bool'
    }

    attribute_map = {
        'username': 'username',
        'label': 'label',
        'protocol': 'protocol',
        'is_default': 'is_default',
        'cred_data': 'cred_data',
        'cred_type': 'cred_type',
        'path': 'path',
        'writeable': 'writeable'
    }

    def __init__(self, username=None, label=None, protocol=None, is_default=None, cred_data=None, cred_type=None, path='*', writeable=False, local_vars_configuration=None):  # noqa: E501
        """Connector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._label = None
        self._protocol = None
        self._is_default = None
        self._cred_data = None
        self._cred_type = None
        self._path = None
        self._writeable = None
        self.discriminator = None

        self.username = username
        if label is not None:
            self.label = label
        self.protocol = protocol
        if is_default is not None:
            self.is_default = is_default
        self.cred_data = cred_data
        self.cred_type = cred_type
        if path is not None:
            self.path = path
        if writeable is not None:
            self.writeable = writeable

    @property
    def username(self):
        """Gets the username of this Connector.  # noqa: E501


        :return: The username of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Connector.


        :param username: The username of this Connector.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def label(self):
        """Gets the label of this Connector.  # noqa: E501


        :return: The label of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Connector.


        :param label: The label of this Connector.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def protocol(self):
        """Gets the protocol of this Connector.  # noqa: E501


        :return: The protocol of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Connector.


        :param protocol: The protocol of this Connector.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and protocol is None:  # noqa: E501
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["s3", "dropbox", "azureblob", "gs"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and protocol not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def is_default(self):
        """Gets the is_default of this Connector.  # noqa: E501


        :return: The is_default of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this Connector.


        :param is_default: The is_default of this Connector.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def cred_data(self):
        """Gets the cred_data of this Connector.  # noqa: E501


        :return: The cred_data of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._cred_data

    @cred_data.setter
    def cred_data(self, cred_data):
        """Sets the cred_data of this Connector.


        :param cred_data: The cred_data of this Connector.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cred_data is None:  # noqa: E501
            raise ValueError("Invalid value for `cred_data`, must not be `None`")  # noqa: E501
        allowed_values = ["IAMConnectorCredential", "SASConnectorCredential", "ServiceAccountConnectorCredential", "OAuthConnectorCredential"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cred_data not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cred_data` ({0}), must be one of {1}"  # noqa: E501
                .format(cred_data, allowed_values)
            )

        self._cred_data = cred_data

    @property
    def cred_type(self):
        """Gets the cred_type of this Connector.  # noqa: E501


        :return: The cred_type of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._cred_type

    @cred_type.setter
    def cred_type(self, cred_type):
        """Sets the cred_type of this Connector.


        :param cred_type: The cred_type of this Connector.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cred_type is None:  # noqa: E501
            raise ValueError("Invalid value for `cred_type`, must not be `None`")  # noqa: E501
        allowed_values = ["iam", "oauth", "sas", "serviceaccount"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and cred_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `cred_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cred_type, allowed_values)
            )

        self._cred_type = cred_type

    @property
    def path(self):
        """Gets the path of this Connector.  # noqa: E501


        :return: The path of this Connector.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Connector.


        :param path: The path of this Connector.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def writeable(self):
        """Gets the writeable of this Connector.  # noqa: E501


        :return: The writeable of this Connector.  # noqa: E501
        :rtype: bool
        """
        return self._writeable

    @writeable.setter
    def writeable(self, writeable):
        """Sets the writeable of this Connector.


        :param writeable: The writeable of this Connector.  # noqa: E501
        :type: bool
        """

        self._writeable = writeable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Connector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Connector):
            return True

        return self.to_dict() != other.to_dict()
