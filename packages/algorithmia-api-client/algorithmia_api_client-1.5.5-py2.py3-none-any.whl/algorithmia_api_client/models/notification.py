# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class Notification(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'notification_id': 'str',
        'notification_type': 'str',
        'created_at': 'datetime',
        'read_at': 'datetime',
        'notification_context': 'NotificationContext'
    }

    attribute_map = {
        'notification_id': 'notification_id',
        'notification_type': 'notification_type',
        'created_at': 'created_at',
        'read_at': 'read_at',
        'notification_context': 'notification_context'
    }

    def __init__(self, notification_id=None, notification_type=None, created_at=None, read_at=None, notification_context=None, local_vars_configuration=None):  # noqa: E501
        """Notification - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._notification_id = None
        self._notification_type = None
        self._created_at = None
        self._read_at = None
        self._notification_context = None
        self.discriminator = None

        self.notification_id = notification_id
        self.notification_type = notification_type
        self.created_at = created_at
        if read_at is not None:
            self.read_at = read_at
        self.notification_context = notification_context

    @property
    def notification_id(self):
        """Gets the notification_id of this Notification.  # noqa: E501


        :return: The notification_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this Notification.


        :param notification_id: The notification_id of this Notification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and notification_id is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                notification_id is not None and len(notification_id) > 100):
            raise ValueError("Invalid value for `notification_id`, length must be less than or equal to `100`")  # noqa: E501

        self._notification_id = notification_id

    @property
    def notification_type(self):
        """Gets the notification_type of this Notification.  # noqa: E501


        :return: The notification_type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this Notification.


        :param notification_type: The notification_type of this Notification.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and notification_type is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def created_at(self):
        """Gets the created_at of this Notification.  # noqa: E501


        :return: The created_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notification.


        :param created_at: The created_at of this Notification.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def read_at(self):
        """Gets the read_at of this Notification.  # noqa: E501


        :return: The read_at of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._read_at

    @read_at.setter
    def read_at(self, read_at):
        """Sets the read_at of this Notification.


        :param read_at: The read_at of this Notification.  # noqa: E501
        :type: datetime
        """

        self._read_at = read_at

    @property
    def notification_context(self):
        """Gets the notification_context of this Notification.  # noqa: E501


        :return: The notification_context of this Notification.  # noqa: E501
        :rtype: NotificationContext
        """
        return self._notification_context

    @notification_context.setter
    def notification_context(self, notification_context):
        """Sets the notification_context of this Notification.


        :param notification_context: The notification_context of this Notification.  # noqa: E501
        :type: NotificationContext
        """
        if self.local_vars_configuration.client_side_validation and notification_context is None:  # noqa: E501
            raise ValueError("Invalid value for `notification_context`, must not be `None`")  # noqa: E501

        self._notification_context = notification_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Notification):
            return True

        return self.to_dict() != other.to_dict()
