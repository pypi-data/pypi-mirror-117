# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class ReservationCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'algoname': 'str',
        'calling_user': 'str',
        'version_type': 'str',
        'num_slots': 'int',
        'version_identifier': 'str'
    }

    attribute_map = {
        'username': 'username',
        'algoname': 'algoname',
        'calling_user': 'calling_user',
        'version_type': 'version_type',
        'num_slots': 'num_slots',
        'version_identifier': 'version_identifier'
    }

    def __init__(self, username=None, algoname=None, calling_user=None, version_type=None, num_slots=None, version_identifier=None, local_vars_configuration=None):  # noqa: E501
        """ReservationCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._username = None
        self._algoname = None
        self._calling_user = None
        self._version_type = None
        self._num_slots = None
        self._version_identifier = None
        self.discriminator = None

        self.username = username
        self.algoname = algoname
        self.calling_user = calling_user
        self.version_type = version_type
        self.num_slots = num_slots
        if version_identifier is not None:
            self.version_identifier = version_identifier

    @property
    def username(self):
        """Gets the username of this ReservationCreate.  # noqa: E501


        :return: The username of this ReservationCreate.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ReservationCreate.


        :param username: The username of this ReservationCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def algoname(self):
        """Gets the algoname of this ReservationCreate.  # noqa: E501


        :return: The algoname of this ReservationCreate.  # noqa: E501
        :rtype: str
        """
        return self._algoname

    @algoname.setter
    def algoname(self, algoname):
        """Sets the algoname of this ReservationCreate.


        :param algoname: The algoname of this ReservationCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algoname is None:  # noqa: E501
            raise ValueError("Invalid value for `algoname`, must not be `None`")  # noqa: E501

        self._algoname = algoname

    @property
    def calling_user(self):
        """Gets the calling_user of this ReservationCreate.  # noqa: E501


        :return: The calling_user of this ReservationCreate.  # noqa: E501
        :rtype: str
        """
        return self._calling_user

    @calling_user.setter
    def calling_user(self, calling_user):
        """Sets the calling_user of this ReservationCreate.


        :param calling_user: The calling_user of this ReservationCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and calling_user is None:  # noqa: E501
            raise ValueError("Invalid value for `calling_user`, must not be `None`")  # noqa: E501

        self._calling_user = calling_user

    @property
    def version_type(self):
        """Gets the version_type of this ReservationCreate.  # noqa: E501


        :return: The version_type of this ReservationCreate.  # noqa: E501
        :rtype: str
        """
        return self._version_type

    @version_type.setter
    def version_type(self, version_type):
        """Sets the version_type of this ReservationCreate.


        :param version_type: The version_type of this ReservationCreate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and version_type is None:  # noqa: E501
            raise ValueError("Invalid value for `version_type`, must not be `None`")  # noqa: E501

        self._version_type = version_type

    @property
    def num_slots(self):
        """Gets the num_slots of this ReservationCreate.  # noqa: E501


        :return: The num_slots of this ReservationCreate.  # noqa: E501
        :rtype: int
        """
        return self._num_slots

    @num_slots.setter
    def num_slots(self, num_slots):
        """Sets the num_slots of this ReservationCreate.


        :param num_slots: The num_slots of this ReservationCreate.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and num_slots is None:  # noqa: E501
            raise ValueError("Invalid value for `num_slots`, must not be `None`")  # noqa: E501

        self._num_slots = num_slots

    @property
    def version_identifier(self):
        """Gets the version_identifier of this ReservationCreate.  # noqa: E501


        :return: The version_identifier of this ReservationCreate.  # noqa: E501
        :rtype: str
        """
        return self._version_identifier

    @version_identifier.setter
    def version_identifier(self, version_identifier):
        """Sets the version_identifier of this ReservationCreate.


        :param version_identifier: The version_identifier of this ReservationCreate.  # noqa: E501
        :type: str
        """

        self._version_identifier = version_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReservationCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReservationCreate):
            return True

        return self.to_dict() != other.to_dict()
