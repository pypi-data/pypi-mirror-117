# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class PagedResultListObjects(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'source_type': 'EventListenerSourceType',
        'source_uri': 'str',
        'algo_name': 'str',
        'algo_owner': 'str',
        'algo_version': 'str',
        'algo_timeout_seconds': 'int',
        'listener_owner': 'str',
        'credentials': 'str',
        'keyname': 'str',
        'value': 'str',
        'created_at': 'float',
        'updated_at': 'float',
        'resource_type': 'str',
        'org_name': 'str',
        'org_email': 'str',
        'org_label': 'str',
        'org_contact_name': 'str',
        'org_url': 'str',
        'type_id': 'str',
        'self_link': 'str',
        'stripe_customer_id': 'str',
        'owner_ids': 'list[str]',
        'username': 'str',
        'role': 'str',
        'user_link': 'str',
        'fullname': 'str',
        'email': 'str',
        'company_name': 'str',
        'company_role': 'str'
    }

    attribute_map = {
        'id': 'id',
        'source_type': 'sourceType',
        'source_uri': 'sourceURI',
        'algo_name': 'algoName',
        'algo_owner': 'algoOwner',
        'algo_version': 'algoVersion',
        'algo_timeout_seconds': 'algoTimeoutSeconds',
        'listener_owner': 'listenerOwner',
        'credentials': 'credentials',
        'keyname': 'keyname',
        'value': 'value',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'resource_type': 'resource_type',
        'org_name': 'org_name',
        'org_email': 'org_email',
        'org_label': 'org_label',
        'org_contact_name': 'org_contact_name',
        'org_url': 'org_url',
        'type_id': 'type_id',
        'self_link': 'self_link',
        'stripe_customer_id': 'stripe_customer_id',
        'owner_ids': 'owner_ids',
        'username': 'username',
        'role': 'role',
        'user_link': 'user_link',
        'fullname': 'fullname',
        'email': 'email',
        'company_name': 'company_name',
        'company_role': 'company_role'
    }

    def __init__(self, id=None, source_type=None, source_uri=None, algo_name=None, algo_owner=None, algo_version=None, algo_timeout_seconds=420, listener_owner=None, credentials=None, keyname=None, value=None, created_at=None, updated_at=None, resource_type=None, org_name=None, org_email=None, org_label=None, org_contact_name=None, org_url=None, type_id=None, self_link=None, stripe_customer_id=None, owner_ids=None, username=None, role=None, user_link=None, fullname=None, email=None, company_name=None, company_role=None, local_vars_configuration=None):  # noqa: E501
        """PagedResultListObjects - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._source_type = None
        self._source_uri = None
        self._algo_name = None
        self._algo_owner = None
        self._algo_version = None
        self._algo_timeout_seconds = None
        self._listener_owner = None
        self._credentials = None
        self._keyname = None
        self._value = None
        self._created_at = None
        self._updated_at = None
        self._resource_type = None
        self._org_name = None
        self._org_email = None
        self._org_label = None
        self._org_contact_name = None
        self._org_url = None
        self._type_id = None
        self._self_link = None
        self._stripe_customer_id = None
        self._owner_ids = None
        self._username = None
        self._role = None
        self._user_link = None
        self._fullname = None
        self._email = None
        self._company_name = None
        self._company_role = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.source_type = source_type
        self.source_uri = source_uri
        self.algo_name = algo_name
        self.algo_owner = algo_owner
        self.algo_version = algo_version
        if algo_timeout_seconds is not None:
            self.algo_timeout_seconds = algo_timeout_seconds
        if listener_owner is not None:
            self.listener_owner = listener_owner
        self.credentials = credentials
        self.keyname = keyname
        self.value = value
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.resource_type = resource_type
        self.org_name = org_name
        self.org_email = org_email
        self.org_label = org_label
        self.org_contact_name = org_contact_name
        if org_url is not None:
            self.org_url = org_url
        self.type_id = type_id
        if self_link is not None:
            self.self_link = self_link
        if stripe_customer_id is not None:
            self.stripe_customer_id = stripe_customer_id
        if owner_ids is not None:
            self.owner_ids = owner_ids
        self.username = username
        self.role = role
        self.user_link = user_link
        if fullname is not None:
            self.fullname = fullname
        self.email = email
        if company_name is not None:
            self.company_name = company_name
        if company_role is not None:
            self.company_role = company_role

    @property
    def id(self):
        """Gets the id of this PagedResultListObjects.  # noqa: E501


        :return: The id of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PagedResultListObjects.


        :param id: The id of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) > 36):
            raise ValueError("Invalid value for `id`, length must be less than or equal to `36`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                id is not None and len(id) < 36):
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `36`")  # noqa: E501

        self._id = id

    @property
    def source_type(self):
        """Gets the source_type of this PagedResultListObjects.  # noqa: E501


        :return: The source_type of this PagedResultListObjects.  # noqa: E501
        :rtype: EventListenerSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this PagedResultListObjects.


        :param source_type: The source_type of this PagedResultListObjects.  # noqa: E501
        :type: EventListenerSourceType
        """
        if self.local_vars_configuration.client_side_validation and source_type is None:  # noqa: E501
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501

        self._source_type = source_type

    @property
    def source_uri(self):
        """Gets the source_uri of this PagedResultListObjects.  # noqa: E501


        :return: The source_uri of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this PagedResultListObjects.


        :param source_uri: The source_uri of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `source_uri`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                source_uri is not None and len(source_uri) > 255):
            raise ValueError("Invalid value for `source_uri`, length must be less than or equal to `255`")  # noqa: E501

        self._source_uri = source_uri

    @property
    def algo_name(self):
        """Gets the algo_name of this PagedResultListObjects.  # noqa: E501


        :return: The algo_name of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._algo_name

    @algo_name.setter
    def algo_name(self, algo_name):
        """Sets the algo_name of this PagedResultListObjects.


        :param algo_name: The algo_name of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algo_name is None:  # noqa: E501
            raise ValueError("Invalid value for `algo_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                algo_name is not None and len(algo_name) > 255):
            raise ValueError("Invalid value for `algo_name`, length must be less than or equal to `255`")  # noqa: E501

        self._algo_name = algo_name

    @property
    def algo_owner(self):
        """Gets the algo_owner of this PagedResultListObjects.  # noqa: E501


        :return: The algo_owner of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._algo_owner

    @algo_owner.setter
    def algo_owner(self, algo_owner):
        """Sets the algo_owner of this PagedResultListObjects.


        :param algo_owner: The algo_owner of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algo_owner is None:  # noqa: E501
            raise ValueError("Invalid value for `algo_owner`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                algo_owner is not None and len(algo_owner) > 255):
            raise ValueError("Invalid value for `algo_owner`, length must be less than or equal to `255`")  # noqa: E501

        self._algo_owner = algo_owner

    @property
    def algo_version(self):
        """Gets the algo_version of this PagedResultListObjects.  # noqa: E501


        :return: The algo_version of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._algo_version

    @algo_version.setter
    def algo_version(self, algo_version):
        """Sets the algo_version of this PagedResultListObjects.


        :param algo_version: The algo_version of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and algo_version is None:  # noqa: E501
            raise ValueError("Invalid value for `algo_version`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                algo_version is not None and len(algo_version) > 255):
            raise ValueError("Invalid value for `algo_version`, length must be less than or equal to `255`")  # noqa: E501

        self._algo_version = algo_version

    @property
    def algo_timeout_seconds(self):
        """Gets the algo_timeout_seconds of this PagedResultListObjects.  # noqa: E501


        :return: The algo_timeout_seconds of this PagedResultListObjects.  # noqa: E501
        :rtype: int
        """
        return self._algo_timeout_seconds

    @algo_timeout_seconds.setter
    def algo_timeout_seconds(self, algo_timeout_seconds):
        """Sets the algo_timeout_seconds of this PagedResultListObjects.


        :param algo_timeout_seconds: The algo_timeout_seconds of this PagedResultListObjects.  # noqa: E501
        :type: int
        """

        self._algo_timeout_seconds = algo_timeout_seconds

    @property
    def listener_owner(self):
        """Gets the listener_owner of this PagedResultListObjects.  # noqa: E501


        :return: The listener_owner of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._listener_owner

    @listener_owner.setter
    def listener_owner(self, listener_owner):
        """Sets the listener_owner of this PagedResultListObjects.


        :param listener_owner: The listener_owner of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                listener_owner is not None and len(listener_owner) > 255):
            raise ValueError("Invalid value for `listener_owner`, length must be less than or equal to `255`")  # noqa: E501

        self._listener_owner = listener_owner

    @property
    def credentials(self):
        """Gets the credentials of this PagedResultListObjects.  # noqa: E501


        :return: The credentials of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this PagedResultListObjects.


        :param credentials: The credentials of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and credentials is None:  # noqa: E501
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                credentials is not None and len(credentials) > 255):
            raise ValueError("Invalid value for `credentials`, length must be less than or equal to `255`")  # noqa: E501

        self._credentials = credentials

    @property
    def keyname(self):
        """Gets the keyname of this PagedResultListObjects.  # noqa: E501


        :return: The keyname of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._keyname

    @keyname.setter
    def keyname(self, keyname):
        """Sets the keyname of this PagedResultListObjects.


        :param keyname: The keyname of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and keyname is None:  # noqa: E501
            raise ValueError("Invalid value for `keyname`, must not be `None`")  # noqa: E501

        self._keyname = keyname

    @property
    def value(self):
        """Gets the value of this PagedResultListObjects.  # noqa: E501


        :return: The value of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PagedResultListObjects.


        :param value: The value of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def created_at(self):
        """Gets the created_at of this PagedResultListObjects.  # noqa: E501


        :return: The created_at of this PagedResultListObjects.  # noqa: E501
        :rtype: float
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PagedResultListObjects.


        :param created_at: The created_at of this PagedResultListObjects.  # noqa: E501
        :type: float
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PagedResultListObjects.  # noqa: E501


        :return: The updated_at of this PagedResultListObjects.  # noqa: E501
        :rtype: float
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PagedResultListObjects.


        :param updated_at: The updated_at of this PagedResultListObjects.  # noqa: E501
        :type: float
        """

        self._updated_at = updated_at

    @property
    def resource_type(self):
        """Gets the resource_type of this PagedResultListObjects.  # noqa: E501


        :return: The resource_type of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PagedResultListObjects.


        :param resource_type: The resource_type of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and resource_type is None:  # noqa: E501
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def org_name(self):
        """Gets the org_name of this PagedResultListObjects.  # noqa: E501


        :return: The org_name of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._org_name

    @org_name.setter
    def org_name(self, org_name):
        """Sets the org_name of this PagedResultListObjects.


        :param org_name: The org_name of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_name is None:  # noqa: E501
            raise ValueError("Invalid value for `org_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_name is not None and len(org_name) > 30):
            raise ValueError("Invalid value for `org_name`, length must be less than or equal to `30`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_name is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', org_name)):  # noqa: E501
            raise ValueError(r"Invalid value for `org_name`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501

        self._org_name = org_name

    @property
    def org_email(self):
        """Gets the org_email of this PagedResultListObjects.  # noqa: E501


        :return: The org_email of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._org_email

    @org_email.setter
    def org_email(self, org_email):
        """Sets the org_email of this PagedResultListObjects.


        :param org_email: The org_email of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_email is None:  # noqa: E501
            raise ValueError("Invalid value for `org_email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_email is not None and len(org_email) > 100):
            raise ValueError("Invalid value for `org_email`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_email is not None and not re.search(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$', org_email)):  # noqa: E501
            raise ValueError(r"Invalid value for `org_email`, must be a follow pattern or equal to `/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$/`")  # noqa: E501

        self._org_email = org_email

    @property
    def org_label(self):
        """Gets the org_label of this PagedResultListObjects.  # noqa: E501


        :return: The org_label of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._org_label

    @org_label.setter
    def org_label(self, org_label):
        """Sets the org_label of this PagedResultListObjects.


        :param org_label: The org_label of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_label is None:  # noqa: E501
            raise ValueError("Invalid value for `org_label`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_label is not None and len(org_label) > 100):
            raise ValueError("Invalid value for `org_label`, length must be less than or equal to `100`")  # noqa: E501

        self._org_label = org_label

    @property
    def org_contact_name(self):
        """Gets the org_contact_name of this PagedResultListObjects.  # noqa: E501


        :return: The org_contact_name of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._org_contact_name

    @org_contact_name.setter
    def org_contact_name(self, org_contact_name):
        """Sets the org_contact_name of this PagedResultListObjects.


        :param org_contact_name: The org_contact_name of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and org_contact_name is None:  # noqa: E501
            raise ValueError("Invalid value for `org_contact_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                org_contact_name is not None and len(org_contact_name) > 100):
            raise ValueError("Invalid value for `org_contact_name`, length must be less than or equal to `100`")  # noqa: E501

        self._org_contact_name = org_contact_name

    @property
    def org_url(self):
        """Gets the org_url of this PagedResultListObjects.  # noqa: E501


        :return: The org_url of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._org_url

    @org_url.setter
    def org_url(self, org_url):
        """Sets the org_url of this PagedResultListObjects.


        :param org_url: The org_url of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                org_url is not None and len(org_url) > 100):
            raise ValueError("Invalid value for `org_url`, length must be less than or equal to `100`")  # noqa: E501

        self._org_url = org_url

    @property
    def type_id(self):
        """Gets the type_id of this PagedResultListObjects.  # noqa: E501


        :return: The type_id of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this PagedResultListObjects.


        :param type_id: The type_id of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type_id is None:  # noqa: E501
            raise ValueError("Invalid value for `type_id`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                type_id is not None and len(type_id) > 100):
            raise ValueError("Invalid value for `type_id`, length must be less than or equal to `100`")  # noqa: E501

        self._type_id = type_id

    @property
    def self_link(self):
        """Gets the self_link of this PagedResultListObjects.  # noqa: E501


        :return: The self_link of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this PagedResultListObjects.


        :param self_link: The self_link of this PagedResultListObjects.  # noqa: E501
        :type: str
        """

        self._self_link = self_link

    @property
    def stripe_customer_id(self):
        """Gets the stripe_customer_id of this PagedResultListObjects.  # noqa: E501


        :return: The stripe_customer_id of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._stripe_customer_id

    @stripe_customer_id.setter
    def stripe_customer_id(self, stripe_customer_id):
        """Sets the stripe_customer_id of this PagedResultListObjects.


        :param stripe_customer_id: The stripe_customer_id of this PagedResultListObjects.  # noqa: E501
        :type: str
        """

        self._stripe_customer_id = stripe_customer_id

    @property
    def owner_ids(self):
        """Gets the owner_ids of this PagedResultListObjects.  # noqa: E501


        :return: The owner_ids of this PagedResultListObjects.  # noqa: E501
        :rtype: list[str]
        """
        return self._owner_ids

    @owner_ids.setter
    def owner_ids(self, owner_ids):
        """Sets the owner_ids of this PagedResultListObjects.


        :param owner_ids: The owner_ids of this PagedResultListObjects.  # noqa: E501
        :type: list[str]
        """

        self._owner_ids = owner_ids

    @property
    def username(self):
        """Gets the username of this PagedResultListObjects.  # noqa: E501


        :return: The username of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PagedResultListObjects.


        :param username: The username of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 30):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `30`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', username)):  # noqa: E501
            raise ValueError(r"Invalid value for `username`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501

        self._username = username

    @property
    def role(self):
        """Gets the role of this PagedResultListObjects.  # noqa: E501


        :return: The role of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PagedResultListObjects.


        :param role: The role of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and role is None:  # noqa: E501
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["owner", "member", "invited", "unknown"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and role not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def user_link(self):
        """Gets the user_link of this PagedResultListObjects.  # noqa: E501


        :return: The user_link of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._user_link

    @user_link.setter
    def user_link(self, user_link):
        """Sets the user_link of this PagedResultListObjects.


        :param user_link: The user_link of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_link is None:  # noqa: E501
            raise ValueError("Invalid value for `user_link`, must not be `None`")  # noqa: E501

        self._user_link = user_link

    @property
    def fullname(self):
        """Gets the fullname of this PagedResultListObjects.  # noqa: E501


        :return: The fullname of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname):
        """Sets the fullname of this PagedResultListObjects.


        :param fullname: The fullname of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                fullname is not None and len(fullname) > 100):
            raise ValueError("Invalid value for `fullname`, length must be less than or equal to `100`")  # noqa: E501

        self._fullname = fullname

    @property
    def email(self):
        """Gets the email of this PagedResultListObjects.  # noqa: E501


        :return: The email of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PagedResultListObjects.


        :param email: The email of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 100):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `100`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and not re.search(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$', email)):  # noqa: E501
            raise ValueError(r"Invalid value for `email`, must be a follow pattern or equal to `/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+[.][a-zA-Z]{2,6}$/`")  # noqa: E501

        self._email = email

    @property
    def company_name(self):
        """Gets the company_name of this PagedResultListObjects.  # noqa: E501


        :return: The company_name of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this PagedResultListObjects.


        :param company_name: The company_name of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                company_name is not None and len(company_name) > 100):
            raise ValueError("Invalid value for `company_name`, length must be less than or equal to `100`")  # noqa: E501

        self._company_name = company_name

    @property
    def company_role(self):
        """Gets the company_role of this PagedResultListObjects.  # noqa: E501


        :return: The company_role of this PagedResultListObjects.  # noqa: E501
        :rtype: str
        """
        return self._company_role

    @company_role.setter
    def company_role(self, company_role):
        """Sets the company_role of this PagedResultListObjects.


        :param company_role: The company_role of this PagedResultListObjects.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                company_role is not None and len(company_role) > 200):
            raise ValueError("Invalid value for `company_role`, length must be less than or equal to `200`")  # noqa: E501

        self._company_role = company_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PagedResultListObjects):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PagedResultListObjects):
            return True

        return self.to_dict() != other.to_dict()
