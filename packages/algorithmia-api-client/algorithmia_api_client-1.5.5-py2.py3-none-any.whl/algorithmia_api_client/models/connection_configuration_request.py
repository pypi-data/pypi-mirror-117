# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from algorithmia_api_client.configuration import Configuration


class ConnectionConfigurationRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connection_type': 'str',
        'broker_url': 'str',
        'topic': 'str',
        'broker_username': 'str',
        'broker_password': 'str',
        'ca_certificate': 'str',
        'sasl_mechanism': 'str',
        'id': 'str'
    }

    attribute_map = {
        'connection_type': 'connection_type',
        'broker_url': 'broker_url',
        'topic': 'topic',
        'broker_username': 'broker_username',
        'broker_password': 'broker_password',
        'ca_certificate': 'ca_certificate',
        'sasl_mechanism': 'sasl_mechanism',
        'id': 'id'
    }

    def __init__(self, connection_type=None, broker_url=None, topic=None, broker_username=None, broker_password=None, ca_certificate=None, sasl_mechanism=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ConnectionConfigurationRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connection_type = None
        self._broker_url = None
        self._topic = None
        self._broker_username = None
        self._broker_password = None
        self._ca_certificate = None
        self._sasl_mechanism = None
        self._id = None
        self.discriminator = None

        self.connection_type = connection_type
        self.broker_url = broker_url
        self.topic = topic
        self.broker_username = broker_username
        self.broker_password = broker_password
        if ca_certificate is not None:
            self.ca_certificate = ca_certificate
        if sasl_mechanism is not None:
            self.sasl_mechanism = sasl_mechanism
        if id is not None:
            self.id = id

    @property
    def connection_type(self):
        """Gets the connection_type of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The connection_type of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this ConnectionConfigurationRequest.


        :param connection_type: The connection_type of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connection_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connection_type`, must not be `None`")  # noqa: E501
        allowed_values = ["kafka_sasl_ssl", "kafka_unauthenticated_plaintext"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and connection_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def broker_url(self):
        """Gets the broker_url of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The broker_url of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._broker_url

    @broker_url.setter
    def broker_url(self, broker_url):
        """Sets the broker_url of this ConnectionConfigurationRequest.


        :param broker_url: The broker_url of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and broker_url is None:  # noqa: E501
            raise ValueError("Invalid value for `broker_url`, must not be `None`")  # noqa: E501

        self._broker_url = broker_url

    @property
    def topic(self):
        """Gets the topic of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The topic of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this ConnectionConfigurationRequest.


        :param topic: The topic of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and topic is None:  # noqa: E501
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501

        self._topic = topic

    @property
    def broker_username(self):
        """Gets the broker_username of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The broker_username of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._broker_username

    @broker_username.setter
    def broker_username(self, broker_username):
        """Sets the broker_username of this ConnectionConfigurationRequest.


        :param broker_username: The broker_username of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and broker_username is None:  # noqa: E501
            raise ValueError("Invalid value for `broker_username`, must not be `None`")  # noqa: E501

        self._broker_username = broker_username

    @property
    def broker_password(self):
        """Gets the broker_password of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The broker_password of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._broker_password

    @broker_password.setter
    def broker_password(self, broker_password):
        """Sets the broker_password of this ConnectionConfigurationRequest.


        :param broker_password: The broker_password of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and broker_password is None:  # noqa: E501
            raise ValueError("Invalid value for `broker_password`, must not be `None`")  # noqa: E501

        self._broker_password = broker_password

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The ca_certificate of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this ConnectionConfigurationRequest.


        :param ca_certificate: The ca_certificate of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._ca_certificate = ca_certificate

    @property
    def sasl_mechanism(self):
        """Gets the sasl_mechanism of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The sasl_mechanism of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._sasl_mechanism

    @sasl_mechanism.setter
    def sasl_mechanism(self, sasl_mechanism):
        """Sets the sasl_mechanism of this ConnectionConfigurationRequest.


        :param sasl_mechanism: The sasl_mechanism of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["SCRAM-SHA-256", "SCRAM-SHA-512", "PLAIN"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and sasl_mechanism not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `sasl_mechanism` ({0}), must be one of {1}"  # noqa: E501
                .format(sasl_mechanism, allowed_values)
            )

        self._sasl_mechanism = sasl_mechanism

    @property
    def id(self):
        """Gets the id of this ConnectionConfigurationRequest.  # noqa: E501


        :return: The id of this ConnectionConfigurationRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConnectionConfigurationRequest.


        :param id: The id of this ConnectionConfigurationRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectionConfigurationRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConnectionConfigurationRequest):
            return True

        return self.to_dict() != other.to_dict()
