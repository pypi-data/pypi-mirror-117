# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from algorithmia_api_client.api_client import ApiClient
from algorithmia_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BuildsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def commit_log_for_repository(self, username, algoname, **kwargs):  # noqa: E501
        """List commits for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_log_for_repository(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param str since: The first commit SHA of the repository to list in the commits. This is included in the result list.
        :param str until: The last commit SHA of the repository to list in the commits. This is included in the result list.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: RepositoryCommitLog
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.commit_log_for_repository_with_http_info(username, algoname, **kwargs)  # noqa: E501

    def commit_log_for_repository_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """List commits for a repository  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.commit_log_for_repository_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param str since: The first commit SHA of the repository to list in the commits. This is included in the result list.
        :param str until: The last commit SHA of the repository to list in the commits. This is included in the result list.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(RepositoryCommitLog, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'algoname',
            'since',
            'until'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_log_for_repository" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `commit_log_for_repository`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if self.api_client.client_side_validation and ('algoname' not in local_var_params or  # noqa: E501
                                                        local_var_params['algoname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algoname` when calling `commit_log_for_repository`")  # noqa: E501

        if self.api_client.client_side_validation and ('username' in local_var_params and  # noqa: E501
                                                        len(local_var_params['username']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `commit_log_for_repository`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `commit_log_for_repository`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []
        if 'since' in local_var_params and local_var_params['since'] is not None:  # noqa: E501
            query_params.append(('since', local_var_params['since']))  # noqa: E501
        if 'until' in local_var_params and local_var_params['until'] is not None:  # noqa: E501
            query_params.append(('until', local_var_params['until']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{username}/{algoname}/log', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepositoryCommitLog',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compile_algorithm(self, username, algoname, **kwargs):  # noqa: E501
        """Compile algorithm  # noqa: E501

        Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compile_algorithm(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.compile_algorithm_with_http_info(username, algoname, **kwargs)  # noqa: E501

    def compile_algorithm_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Compile algorithm  # noqa: E501

        Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compile_algorithm_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VersionResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'algoname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compile_algorithm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `compile_algorithm`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if self.api_client.client_side_validation and ('algoname' not in local_var_params or  # noqa: E501
                                                        local_var_params['algoname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algoname` when calling `compile_algorithm`")  # noqa: E501

        if self.api_client.client_side_validation and ('username' in local_var_params and  # noqa: E501
                                                        len(local_var_params['username']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `compile_algorithm`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `compile_algorithm`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{username}/{algoname}/compile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compile_algorithm_by_id(self, algorithm_id, body, **kwargs):  # noqa: E501
        """Compile algorithm  # noqa: E501

        Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing. For BitBucket it's necessary to provide additional information in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compile_algorithm_by_id(algorithm_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param str body: A build request (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: VersionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.compile_algorithm_by_id_with_http_info(algorithm_id, body, **kwargs)  # noqa: E501

    def compile_algorithm_by_id_with_http_info(self, algorithm_id, body, **kwargs):  # noqa: E501
        """Compile algorithm  # noqa: E501

        Compiles the latest available source code for an algorithm, resulting in a new hash version of an algorithm available for publishing. For BitBucket it's necessary to provide additional information in the request body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.compile_algorithm_by_id_with_http_info(algorithm_id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param str body: A build request (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(VersionResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'algorithm_id',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compile_algorithm_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'algorithm_id' is set
        if self.api_client.client_side_validation and ('algorithm_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['algorithm_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algorithm_id` when calling `compile_algorithm_by_id`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `compile_algorithm_by_id`")  # noqa: E501

        if self.api_client.client_side_validation and 'algorithm_id' in local_var_params and not re.search(r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$', local_var_params['algorithm_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `algorithm_id` when calling `compile_algorithm_by_id`, must conform to the pattern `/^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'algorithm_id' in local_var_params:
            path_params['algorithmId'] = local_var_params['algorithm_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{algorithmId}/compile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VersionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_build_by_id(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get individual algorithm build by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_by_id(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_algorithm_build_by_id_with_http_info(username, algoname, buildid, **kwargs)  # noqa: E501

    def get_algorithm_build_by_id_with_http_info(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get individual algorithm build by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_by_id_with_http_info(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Build, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'algoname',
            'buildid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_build_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `get_algorithm_build_by_id`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if self.api_client.client_side_validation and ('algoname' not in local_var_params or  # noqa: E501
                                                        local_var_params['algoname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algoname` when calling `get_algorithm_build_by_id`")  # noqa: E501
        # verify the required parameter 'buildid' is set
        if self.api_client.client_side_validation and ('buildid' not in local_var_params or  # noqa: E501
                                                        local_var_params['buildid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `buildid` when calling `get_algorithm_build_by_id`")  # noqa: E501

        if self.api_client.client_side_validation and ('username' in local_var_params and  # noqa: E501
                                                        len(local_var_params['username']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_build_by_id`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_build_by_id`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501
        if 'buildid' in local_var_params:
            path_params['buildid'] = local_var_params['buildid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{username}/{algoname}/builds/{buildid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_build_logs(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get algorithm build logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_logs(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BuildLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_algorithm_build_logs_with_http_info(username, algoname, buildid, **kwargs)  # noqa: E501

    def get_algorithm_build_logs_with_http_info(self, username, algoname, buildid, **kwargs):  # noqa: E501
        """Get algorithm build logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_build_logs_with_http_info(username, algoname, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param str buildid: Build ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BuildLogs, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'algoname',
            'buildid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_build_logs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `get_algorithm_build_logs`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if self.api_client.client_side_validation and ('algoname' not in local_var_params or  # noqa: E501
                                                        local_var_params['algoname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algoname` when calling `get_algorithm_build_logs`")  # noqa: E501
        # verify the required parameter 'buildid' is set
        if self.api_client.client_side_validation and ('buildid' not in local_var_params or  # noqa: E501
                                                        local_var_params['buildid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `buildid` when calling `get_algorithm_build_logs`")  # noqa: E501

        if self.api_client.client_side_validation and ('username' in local_var_params and  # noqa: E501
                                                        len(local_var_params['username']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_build_logs`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_build_logs`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501
        if 'buildid' in local_var_params:
            path_params['buildid'] = local_var_params['buildid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{username}/{algoname}/builds/{buildid}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildLogs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_builds(self, username, algoname, **kwargs):  # noqa: E501
        """Get algorithm builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_builds(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedBuildsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_algorithm_builds_with_http_info(username, algoname, **kwargs)  # noqa: E501

    def get_algorithm_builds_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Get algorithm builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_builds_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedBuildsList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'algoname',
            'limit',
            'marker'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_builds" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `get_algorithm_builds`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if self.api_client.client_side_validation and ('algoname' not in local_var_params or  # noqa: E501
                                                        local_var_params['algoname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algoname` when calling `get_algorithm_builds`")  # noqa: E501

        if self.api_client.client_side_validation and ('username' in local_var_params and  # noqa: E501
                                                        len(local_var_params['username']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_builds`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_builds`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_algorithm_builds`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params and local_var_params['marker'] is not None:  # noqa: E501
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{username}/{algoname}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedBuildsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_by_id_build_by_id(self, algorithm_id, buildid, **kwargs):  # noqa: E501
        """Get individual algorithm build by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_by_id_build_by_id(algorithm_id, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param str buildid: Build ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Build
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_algorithm_by_id_build_by_id_with_http_info(algorithm_id, buildid, **kwargs)  # noqa: E501

    def get_algorithm_by_id_build_by_id_with_http_info(self, algorithm_id, buildid, **kwargs):  # noqa: E501
        """Get individual algorithm build by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_by_id_build_by_id_with_http_info(algorithm_id, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param str buildid: Build ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Build, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'algorithm_id',
            'buildid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_by_id_build_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'algorithm_id' is set
        if self.api_client.client_side_validation and ('algorithm_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['algorithm_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algorithm_id` when calling `get_algorithm_by_id_build_by_id`")  # noqa: E501
        # verify the required parameter 'buildid' is set
        if self.api_client.client_side_validation and ('buildid' not in local_var_params or  # noqa: E501
                                                        local_var_params['buildid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `buildid` when calling `get_algorithm_by_id_build_by_id`")  # noqa: E501

        if self.api_client.client_side_validation and 'algorithm_id' in local_var_params and not re.search(r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$', local_var_params['algorithm_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `algorithm_id` when calling `get_algorithm_by_id_build_by_id`, must conform to the pattern `/^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'algorithm_id' in local_var_params:
            path_params['algorithmId'] = local_var_params['algorithm_id']  # noqa: E501
        if 'buildid' in local_var_params:
            path_params['buildid'] = local_var_params['buildid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{algorithmId}/builds/{buildid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Build',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_by_id_build_logs(self, algorithm_id, buildid, **kwargs):  # noqa: E501
        """Get algorithm build logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_by_id_build_logs(algorithm_id, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param str buildid: Build ID (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: BuildLogs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_algorithm_by_id_build_logs_with_http_info(algorithm_id, buildid, **kwargs)  # noqa: E501

    def get_algorithm_by_id_build_logs_with_http_info(self, algorithm_id, buildid, **kwargs):  # noqa: E501
        """Get algorithm build logs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_by_id_build_logs_with_http_info(algorithm_id, buildid, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param str buildid: Build ID (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(BuildLogs, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'algorithm_id',
            'buildid'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_by_id_build_logs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'algorithm_id' is set
        if self.api_client.client_side_validation and ('algorithm_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['algorithm_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algorithm_id` when calling `get_algorithm_by_id_build_logs`")  # noqa: E501
        # verify the required parameter 'buildid' is set
        if self.api_client.client_side_validation and ('buildid' not in local_var_params or  # noqa: E501
                                                        local_var_params['buildid'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `buildid` when calling `get_algorithm_by_id_build_logs`")  # noqa: E501

        if self.api_client.client_side_validation and 'algorithm_id' in local_var_params and not re.search(r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$', local_var_params['algorithm_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `algorithm_id` when calling `get_algorithm_by_id_build_logs`, must conform to the pattern `/^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'algorithm_id' in local_var_params:
            path_params['algorithmId'] = local_var_params['algorithm_id']  # noqa: E501
        if 'buildid' in local_var_params:
            path_params['buildid'] = local_var_params['buildid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{algorithmId}/builds/{buildid}/logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuildLogs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_by_id_builds(self, algorithm_id, **kwargs):  # noqa: E501
        """Get algorithm builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_by_id_builds(algorithm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedBuildsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_algorithm_by_id_builds_with_http_info(algorithm_id, **kwargs)  # noqa: E501

    def get_algorithm_by_id_builds_with_http_info(self, algorithm_id, **kwargs):  # noqa: E501
        """Get algorithm builds  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_by_id_builds_with_http_info(algorithm_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str algorithm_id: Algorithm UUID (required)
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedBuildsList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'algorithm_id',
            'limit',
            'marker'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_by_id_builds" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'algorithm_id' is set
        if self.api_client.client_side_validation and ('algorithm_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['algorithm_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algorithm_id` when calling `get_algorithm_by_id_builds`")  # noqa: E501

        if self.api_client.client_side_validation and 'algorithm_id' in local_var_params and not re.search(r'^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$', local_var_params['algorithm_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `algorithm_id` when calling `get_algorithm_by_id_builds`, must conform to the pattern `/^[a-zA-Z0-9]{8}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{4}-[a-zA-Z0-9]{12}$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_algorithm_by_id_builds`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'algorithm_id' in local_var_params:
            path_params['algorithmId'] = local_var_params['algorithm_id']  # noqa: E501

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params and local_var_params['marker'] is not None:  # noqa: E501
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{algorithmId}/builds', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedBuildsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_algorithm_scm_connection_status(self, username, algoname, **kwargs):  # noqa: E501
        """Get algorithm SCM connection status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_scm_connection_status(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ScmConnectionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_algorithm_scm_connection_status_with_http_info(username, algoname, **kwargs)  # noqa: E501

    def get_algorithm_scm_connection_status_with_http_info(self, username, algoname, **kwargs):  # noqa: E501
        """Get algorithm SCM connection status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_algorithm_scm_connection_status_with_http_info(username, algoname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param str algoname: Algorithm name (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ScmConnectionStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'algoname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_algorithm_scm_connection_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `get_algorithm_scm_connection_status`")  # noqa: E501
        # verify the required parameter 'algoname' is set
        if self.api_client.client_side_validation and ('algoname' not in local_var_params or  # noqa: E501
                                                        local_var_params['algoname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `algoname` when calling `get_algorithm_scm_connection_status`")  # noqa: E501

        if self.api_client.client_side_validation and ('username' in local_var_params and  # noqa: E501
                                                        len(local_var_params['username']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_scm_connection_status`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `get_algorithm_scm_connection_status`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501
        if 'algoname' in local_var_params:
            path_params['algoname'] = local_var_params['algoname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/algorithms/{username}/{algoname}/scm/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScmConnectionStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
