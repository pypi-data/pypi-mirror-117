# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from algorithmia_api_client.api_client import ApiClient
from algorithmia_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ConnectorsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_connector_for_user_by_id(self, username, **kwargs):  # noqa: E501
        """Create connector for a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connector_for_user_by_id(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param Connector connector: Attempting to create a data connector for a specific user or organization
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: ConnectorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_connector_for_user_by_id_with_http_info(username, **kwargs)  # noqa: E501

    def create_connector_for_user_by_id_with_http_info(self, username, **kwargs):  # noqa: E501
        """Create connector for a user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_connector_for_user_by_id_with_http_info(username, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str username: The username of the user or organization (required)
        :param Connector connector: Attempting to create a data connector for a specific user or organization
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(ConnectorResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'username',
            'connector'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_connector_for_user_by_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'username' is set
        if self.api_client.client_side_validation and ('username' not in local_var_params or  # noqa: E501
                                                        local_var_params['username'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `username` when calling `create_connector_for_user_by_id`")  # noqa: E501

        if self.api_client.client_side_validation and ('username' in local_var_params and  # noqa: E501
                                                        len(local_var_params['username']) > 30):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `create_connector_for_user_by_id`, length must be less than or equal to `30`")  # noqa: E501
        if self.api_client.client_side_validation and 'username' in local_var_params and not re.search(r'^[a-zA-Z][a-zA-Z0-9_]*$', local_var_params['username']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `username` when calling `create_connector_for_user_by_id`, must conform to the pattern `/^[a-zA-Z][a-zA-Z0-9_]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'username' in local_var_params:
            path_params['username'] = local_var_params['username']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'connector' in local_var_params:
            body_params = local_var_params['connector']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'ApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{username}/connectors', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConnectorResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_directory(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Create new directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_directory(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param CreateDirectoryRequest create_directory_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_directory_with_http_info(connector_id, connector_path, **kwargs)  # noqa: E501

    def create_directory_with_http_info(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Create new directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_directory_with_http_info(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param CreateDirectoryRequest create_directory_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse200, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'connector_id',
            'connector_path',
            'create_directory_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_directory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'connector_id' is set
        if self.api_client.client_side_validation and ('connector_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_id` when calling `create_directory`")  # noqa: E501
        # verify the required parameter 'connector_path' is set
        if self.api_client.client_side_validation and ('connector_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_path` when calling `create_directory`")  # noqa: E501

        if self.api_client.client_side_validation and 'connector_id' in local_var_params and not re.search(r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$', local_var_params['connector_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_id` when calling `create_directory`, must conform to the pattern `/^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'connector_path' in local_var_params and not re.search(r'^([^\/]+\/?)*$', local_var_params['connector_path']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_path` when calling `create_directory`, must conform to the pattern `/^([^\/]+\/?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'connector_id' in local_var_params:
            path_params['connectorId'] = local_var_params['connector_id']  # noqa: E501
        if 'connector_path' in local_var_params:
            path_params['connectorPath'] = local_var_params['connector_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_directory_request' in local_var_params:
            body_params = local_var_params['create_directory_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/connector/{connectorId}/{connectorPath}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_file_or_directory(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Delete file or directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_or_directory(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param bool force: If you pass `true` for this parameter, will delete the directory even if it contains files.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_file_or_directory_with_http_info(connector_id, connector_path, **kwargs)  # noqa: E501

    def delete_file_or_directory_with_http_info(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Delete file or directory  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_or_directory_with_http_info(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param bool force: If you pass `true` for this parameter, will delete the directory even if it contains files.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse2001, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'connector_id',
            'connector_path',
            'force'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file_or_directory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'connector_id' is set
        if self.api_client.client_side_validation and ('connector_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_id` when calling `delete_file_or_directory`")  # noqa: E501
        # verify the required parameter 'connector_path' is set
        if self.api_client.client_side_validation and ('connector_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_path` when calling `delete_file_or_directory`")  # noqa: E501

        if self.api_client.client_side_validation and 'connector_id' in local_var_params and not re.search(r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$', local_var_params['connector_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_id` when calling `delete_file_or_directory`, must conform to the pattern `/^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'connector_path' in local_var_params and not re.search(r'^([^\/]+\/?)*$', local_var_params['connector_path']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_path` when calling `delete_file_or_directory`, must conform to the pattern `/^([^\/]+\/?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'connector_id' in local_var_params:
            path_params['connectorId'] = local_var_params['connector_id']  # noqa: E501
        if 'connector_path' in local_var_params:
            path_params['connectorPath'] = local_var_params['connector_path']  # noqa: E501

        query_params = []
        if 'force' in local_var_params and local_var_params['force'] is not None:  # noqa: E501
            query_params.append(('force', local_var_params['force']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/connector/{connectorId}/{connectorPath}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_file_or_directory(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Get file contents or directory listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_or_directory(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param bool acl: Whether the ACL should be included in the response.
        :param str marker: Encoded pagination cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Directory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_file_or_directory_with_http_info(connector_id, connector_path, **kwargs)  # noqa: E501

    def get_file_or_directory_with_http_info(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Get file contents or directory listing  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_file_or_directory_with_http_info(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param bool acl: Whether the ACL should be included in the response.
        :param str marker: Encoded pagination cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Directory, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'connector_id',
            'connector_path',
            'acl',
            'marker'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_or_directory" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'connector_id' is set
        if self.api_client.client_side_validation and ('connector_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_id` when calling `get_file_or_directory`")  # noqa: E501
        # verify the required parameter 'connector_path' is set
        if self.api_client.client_side_validation and ('connector_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_path` when calling `get_file_or_directory`")  # noqa: E501

        if self.api_client.client_side_validation and 'connector_id' in local_var_params and not re.search(r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$', local_var_params['connector_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_id` when calling `get_file_or_directory`, must conform to the pattern `/^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'connector_path' in local_var_params and not re.search(r'^([^\/]+\/?)*$', local_var_params['connector_path']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_path` when calling `get_file_or_directory`, must conform to the pattern `/^([^\/]+\/?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'connector_id' in local_var_params:
            path_params['connectorId'] = local_var_params['connector_id']  # noqa: E501
        if 'connector_path' in local_var_params:
            path_params['connectorPath'] = local_var_params['connector_path']  # noqa: E501

        query_params = []
        if 'acl' in local_var_params and local_var_params['acl'] is not None:  # noqa: E501
            query_params.append(('acl', local_var_params['acl']))  # noqa: E501
        if 'marker' in local_var_params and local_var_params['marker'] is not None:  # noqa: E501
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', '*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/connector/{connectorId}/{connectorPath}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Directory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_directory_acl(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Update directory  # noqa: E501

        Updates the ACL for an Algorithmia hosted data collection. Note that, at this time, this endpoint is not supported for any other connector beyond Algorithmia's own hosted data solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_directory_acl(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param DirectoryAclUpdateRequest directory_acl_update_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_directory_acl_with_http_info(connector_id, connector_path, **kwargs)  # noqa: E501

    def update_directory_acl_with_http_info(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Update directory  # noqa: E501

        Updates the ACL for an Algorithmia hosted data collection. Note that, at this time, this endpoint is not supported for any other connector beyond Algorithmia's own hosted data solution.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_directory_acl_with_http_info(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param DirectoryAclUpdateRequest directory_acl_update_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'connector_id',
            'connector_path',
            'directory_acl_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_directory_acl" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'connector_id' is set
        if self.api_client.client_side_validation and ('connector_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_id` when calling `update_directory_acl`")  # noqa: E501
        # verify the required parameter 'connector_path' is set
        if self.api_client.client_side_validation and ('connector_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_path` when calling `update_directory_acl`")  # noqa: E501

        if self.api_client.client_side_validation and 'connector_id' in local_var_params and not re.search(r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$', local_var_params['connector_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_id` when calling `update_directory_acl`, must conform to the pattern `/^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'connector_path' in local_var_params and not re.search(r'^([^\/]+\/?)*$', local_var_params['connector_path']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_path` when calling `update_directory_acl`, must conform to the pattern `/^([^\/]+\/?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'connector_id' in local_var_params:
            path_params['connectorId'] = local_var_params['connector_id']  # noqa: E501
        if 'connector_path' in local_var_params:
            path_params['connectorPath'] = local_var_params['connector_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'directory_acl_update_request' in local_var_params:
            body_params = local_var_params['directory_acl_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/connector/{connectorId}/{connectorPath}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Upload file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param file body:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.upload_file_with_http_info(connector_id, connector_path, **kwargs)  # noqa: E501

    def upload_file_with_http_info(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Upload file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_with_http_info(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param file body:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(InlineResponse200, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'connector_id',
            'connector_path',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'connector_id' is set
        if self.api_client.client_side_validation and ('connector_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_id` when calling `upload_file`")  # noqa: E501
        # verify the required parameter 'connector_path' is set
        if self.api_client.client_side_validation and ('connector_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_path` when calling `upload_file`")  # noqa: E501

        if self.api_client.client_side_validation and 'connector_id' in local_var_params and not re.search(r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$', local_var_params['connector_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_id` when calling `upload_file`, must conform to the pattern `/^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'connector_path' in local_var_params and not re.search(r'^([^\/]+\/?)*$', local_var_params['connector_path']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_path` when calling `upload_file`, must conform to the pattern `/^([^\/]+\/?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'connector_id' in local_var_params:
            path_params['connectorId'] = local_var_params['connector_id']  # noqa: E501
        if 'connector_path' in local_var_params:
            path_params['connectorPath'] = local_var_params['connector_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/connector/{connectorId}/{connectorPath}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_file_existence(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Check if file exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_file_existence(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.verify_file_existence_with_http_info(connector_id, connector_path, **kwargs)  # noqa: E501

    def verify_file_existence_with_http_info(self, connector_id, connector_path, **kwargs):  # noqa: E501
        """Check if file exists  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_file_existence_with_http_info(connector_id, connector_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str connector_id: Specifies the connector you wish to interact with. For Algorithmia hosted data, simply supply `data`. Otherwise, provide your connector's ID. A connector's ID is represented as its connector type, the `+` character, and its label (unless it is the default connector for its type, see below.) Thus, a non-default S3 connector with the label \"test\" would be identified as \"s3+test\". You can use your default connector for a given storage provider by passing the following identifiers: - `azureblob`: Your default Azure Blob connector. - `dropbox`: Your default Dropbox connector, if Dropbox is enabled for your Algorithmia instance. - `gs`: Your default Google Cloud Storage connector. - `s3`: Your default AWS S3 connector.  (required)
        :param str connector_path: Describes the file path you wish to operate on within your chosen data connector. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'connector_id',
            'connector_path'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_file_existence" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'connector_id' is set
        if self.api_client.client_side_validation and ('connector_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_id` when calling `verify_file_existence`")  # noqa: E501
        # verify the required parameter 'connector_path' is set
        if self.api_client.client_side_validation and ('connector_path' not in local_var_params or  # noqa: E501
                                                        local_var_params['connector_path'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `connector_path` when calling `verify_file_existence`")  # noqa: E501

        if self.api_client.client_side_validation and 'connector_id' in local_var_params and not re.search(r'^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$', local_var_params['connector_id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_id` when calling `verify_file_existence`, must conform to the pattern `/^(azureblob|data|dropbox|gs|s3){1}(\+[a-zA-Z0-9]+)?$/`")  # noqa: E501
        if self.api_client.client_side_validation and 'connector_path' in local_var_params and not re.search(r'^([^\/]+\/?)*$', local_var_params['connector_path']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `connector_path` when calling `verify_file_existence`, must conform to the pattern `/^([^\/]+\/?)*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'connector_id' in local_var_params:
            path_params['connectorId'] = local_var_params['connector_id']  # noqa: E501
        if 'connector_path' in local_var_params:
            path_params['connectorPath'] = local_var_params['connector_path']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/connector/{connectorId}/{connectorPath}', 'HEAD',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
