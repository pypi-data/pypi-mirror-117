# coding: utf-8

"""
    Algorithmia Management APIs

    APIs for managing actions on the Algorithmia platform  # noqa: E501

    The version of the OpenAPI document: 1.5.0
    Contact: support@algorithmia.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from algorithmia_api_client.api_client import ApiClient
from algorithmia_api_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class FrontendApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_config_entry(self, keyname, **kwargs):  # noqa: E501
        """Delete a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_config_entry(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyname: The keyname for the config map entry (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_config_entry_with_http_info(keyname, **kwargs)  # noqa: E501

    def delete_config_entry_with_http_info(self, keyname, **kwargs):  # noqa: E501
        """Delete a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_config_entry_with_http_info(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyname: The keyname for the config map entry (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_config_entry" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyname' is set
        if self.api_client.client_side_validation and ('keyname' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyname` when calling `delete_config_entry`")  # noqa: E501

        if self.api_client.client_side_validation and ('keyname' in local_var_params and  # noqa: E501
                                                        len(local_var_params['keyname']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keyname` when calling `delete_config_entry`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and 'keyname' in local_var_params and not re.search(r'^[\w][\w-.]*[\w]$', local_var_params['keyname']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keyname` when calling `delete_config_entry`, must conform to the pattern `/^[\w][\w-.]*[\w]$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keyname' in local_var_params:
            path_params['keyname'] = local_var_params['keyname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/config/frontend/{keyname}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_config_entry(self, keyname, **kwargs):  # noqa: E501
        """Get a frontend config entry represeted by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_entry(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyname: The keyname for the config map entry (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FrontendConfigurationEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_config_entry_with_http_info(keyname, **kwargs)  # noqa: E501

    def get_config_entry_with_http_info(self, keyname, **kwargs):  # noqa: E501
        """Get a frontend config entry represeted by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_config_entry_with_http_info(keyname, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyname: The keyname for the config map entry (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FrontendConfigurationEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyname'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_config_entry" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyname' is set
        if self.api_client.client_side_validation and ('keyname' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyname` when calling `get_config_entry`")  # noqa: E501

        if self.api_client.client_side_validation and ('keyname' in local_var_params and  # noqa: E501
                                                        len(local_var_params['keyname']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keyname` when calling `get_config_entry`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and 'keyname' in local_var_params and not re.search(r'^[\w][\w-.]*[\w]$', local_var_params['keyname']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keyname` when calling `get_config_entry`, must conform to the pattern `/^[\w][\w-.]*[\w]$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keyname' in local_var_params:
            path_params['keyname'] = local_var_params['keyname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/config/frontend/{keyname}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FrontendConfigurationEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_frontend_config_entries(self, **kwargs):  # noqa: E501
        """List all frontend configuration values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frontend_config_entries(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PagedResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_frontend_config_entries_with_http_info(**kwargs)  # noqa: E501

    def get_frontend_config_entries_with_http_info(self, **kwargs):  # noqa: E501
        """List all frontend configuration values  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_frontend_config_entries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int limit: The number of results to return in a single page
        :param str marker: Encoded pagination cursor
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PagedResultList, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'limit',
            'marker'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_frontend_config_entries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'limit' in local_var_params and local_var_params['limit'] < 1:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `limit` when calling `get_frontend_config_entries`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in local_var_params and local_var_params['limit'] is not None:  # noqa: E501
            query_params.append(('limit', local_var_params['limit']))  # noqa: E501
        if 'marker' in local_var_params and local_var_params['marker'] is not None:  # noqa: E501
            query_params.append(('marker', local_var_params['marker']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/config/frontend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PagedResultList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_config_entry(self, keyname, frontend_configuration_entry, **kwargs):  # noqa: E501
        """Update or insert a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_config_entry(keyname, frontend_configuration_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyname: The keyname for the config map entry (required)
        :param FrontendConfigurationEntry frontend_configuration_entry: Request with config entry (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: FrontendConfigurationEntry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_config_entry_with_http_info(keyname, frontend_configuration_entry, **kwargs)  # noqa: E501

    def update_config_entry_with_http_info(self, keyname, frontend_configuration_entry, **kwargs):  # noqa: E501
        """Update or insert a config entry represented by the provided keyname  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_config_entry_with_http_info(keyname, frontend_configuration_entry, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str keyname: The keyname for the config map entry (required)
        :param FrontendConfigurationEntry frontend_configuration_entry: Request with config entry (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(FrontendConfigurationEntry, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'keyname',
            'frontend_configuration_entry'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_config_entry" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'keyname' is set
        if self.api_client.client_side_validation and ('keyname' not in local_var_params or  # noqa: E501
                                                        local_var_params['keyname'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `keyname` when calling `update_config_entry`")  # noqa: E501
        # verify the required parameter 'frontend_configuration_entry' is set
        if self.api_client.client_side_validation and ('frontend_configuration_entry' not in local_var_params or  # noqa: E501
                                                        local_var_params['frontend_configuration_entry'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `frontend_configuration_entry` when calling `update_config_entry`")  # noqa: E501

        if self.api_client.client_side_validation and ('keyname' in local_var_params and  # noqa: E501
                                                        len(local_var_params['keyname']) > 64):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keyname` when calling `update_config_entry`, length must be less than or equal to `64`")  # noqa: E501
        if self.api_client.client_side_validation and 'keyname' in local_var_params and not re.search(r'^[\w][\w-.]*[\w]$', local_var_params['keyname']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `keyname` when calling `update_config_entry`, must conform to the pattern `/^[\w][\w-.]*[\w]$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'keyname' in local_var_params:
            path_params['keyname'] = local_var_params['keyname']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'frontend_configuration_entry' in local_var_params:
            body_params = local_var_params['frontend_configuration_entry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['AdminApiKeyAuth', 'CookieAuth']  # noqa: E501

        return self.api_client.call_api(
            '/v1/config/frontend/{keyname}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FrontendConfigurationEntry',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
