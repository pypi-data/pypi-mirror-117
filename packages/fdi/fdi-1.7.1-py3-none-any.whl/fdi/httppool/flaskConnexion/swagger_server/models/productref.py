# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Productref(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, result: ProductrefResult=None, msg: str=None, ts: float=None):  # noqa: E501
        """Productref - a model defined in Swagger

        :param result: The result of this Productref.  # noqa: E501
        :type result: ProductrefResult
        :param msg: The msg of this Productref.  # noqa: E501
        :type msg: str
        :param ts: The ts of this Productref.  # noqa: E501
        :type ts: float
        """
        self.swagger_types = {
            'result': ProductrefResult,
            'msg': str,
            'ts': float
        }

        self.attribute_map = {
            'result': 'result',
            'msg': 'msg',
            'ts': 'ts'
        }

        self._result = result
        self._msg = msg
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt) -> 'Productref':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The productref of this Productref.  # noqa: E501
        :rtype: Productref
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> ProductrefResult:
        """Gets the result of this Productref.


        :return: The result of this Productref.
        :rtype: ProductrefResult
        """
        return self._result

    @result.setter
    def result(self, result: ProductrefResult):
        """Sets the result of this Productref.


        :param result: The result of this Productref.
        :type result: ProductrefResult
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    @property
    def msg(self) -> str:
        """Gets the msg of this Productref.


        :return: The msg of this Productref.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg: str):
        """Sets the msg of this Productref.


        :param msg: The msg of this Productref.
        :type msg: str
        """
        if msg is None:
            raise ValueError("Invalid value for `msg`, must not be `None`")  # noqa: E501

        self._msg = msg

    @property
    def ts(self) -> float:
        """Gets the ts of this Productref.


        :return: The ts of this Productref.
        :rtype: float
        """
        return self._ts

    @ts.setter
    def ts(self, ts: float):
        """Sets the ts of this Productref.


        :param ts: The ts of this Productref.
        :type ts: float
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")  # noqa: E501

        self._ts = ts
